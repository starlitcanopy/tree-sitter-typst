====================
typst/playground/playground
====================


--------------------

(source_file)

====================
typst/emph-strong/emph-syntax
====================

// Basic.
_Emphasized and *strong* words!_

// Inside of a word it's a normal underscore or star.
hello_world Nutzer*innen

// CJK characters will not need spaces.
中文一般使用*粗体*或者_楷体_来表示强调。

日本語では、*太字*や_斜体_を使って強調します。

中文中混有*Strong*和_Emphasis_。

// Can contain paragraph in nested content block.
_Still #[

] emphasized._


--------------------

(source_file
  (comment)
  (emph
    (text)
    (strong
      (text))
    (text))
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (strong
    (text))
  (text)
  (emph
    (text))
  (text)
  (parbreak)
  (text)
  (strong
    (text))
  (text)
  (emph
    (text))
  (text)
  (parbreak)
  (text)
  (strong
    (text))
  (text)
  (emph
    (text))
  (text)
  (parbreak)
  (comment)
  (emph
    (text)
    (code
      (content
        (parbreak)))
    (text))
  (parbreak))

====================
typst/emph-strong/emph-and-strong-call-in-word
====================

// Inside of words can still use the functions.
P#strong[art]ly em#emph[phas]ized.


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/emph-strong/emph-empty-hint
====================

// Warning: 1-3 no text within underscores
// Hint: 1-3 using multiple consecutive underscores (e.g. __) has no additional effect
__


--------------------

(source_file
  (comment)
  (comment)
  (emph)
  (parbreak))

====================
typst/emph-strong/emph-double-underscore-empty-hint
====================

// Warning: 1-3 no text within underscores
// Hint: 1-3 using multiple consecutive underscores (e.g. __) has no additional effect
// Warning: 13-15 no text within underscores
// Hint: 13-15 using multiple consecutive underscores (e.g. __) has no additional effect
__not italic__


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (emph)
  (text)
  (emph)
  (parbreak))

====================
typst/emph-strong/emph-unclosed
====================

// Error: 6-7 unclosed delimiter
#box[_Scoped] to body.


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content
        (emph
          (text)))))
  (text)
  (parbreak))

====================
typst/emph-strong/emph-ends-at-parbreak
====================

// Ends at paragraph break.
// Error: 1-2 unclosed delimiter
_Hello

World


--------------------



====================
typst/emph-strong/emph-strong-unclosed-nested
====================

// Error: 11-12 unclosed delimiter
// Error: 3-4 unclosed delimiter
#[_Cannot *be interleaved]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (content
      (emph
        (text)
        (strong
          (text)))))
  (parbreak))

====================
typst/emph-strong/strong-delta
====================

// Adjusting the delta that strong applies on the weight.
Normal

#set strong(delta: 300)
*Bold*

#set strong(delta: 150)
*Medium* and *#[*Bold*]*


--------------------

(source_file
  (comment)
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (strong
    (text))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (strong
    (text))
  (text)
  (strong
    (code
      (content
        (strong
          (text)))))
  (parbreak))

====================
typst/emph-strong/strong-empty-hint
====================

// Warning: 1-3 no text within stars
// Hint: 1-3 using multiple consecutive stars (e.g. **) has no additional effect
**


--------------------

(source_file
  (comment)
  (comment)
  (strong)
  (parbreak))

====================
typst/emph-strong/strong-double-star-empty-hint
====================

// Warning: 1-3 no text within stars
// Hint: 1-3 using multiple consecutive stars (e.g. **) has no additional effect
// Warning: 11-13 no text within stars
// Hint: 11-13 using multiple consecutive stars (e.g. **) has no additional effect
**not bold**
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (strong)
  (text)
  (strong))

====================
typst/terms/terms-constructor
====================

// Test with constructor.
#terms(
  ([One], [First]),
  ([Two], [Second]),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (content
            (text))
          (content
            (text)))
        (group
          (content
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/terms/terms-built-in-loop
====================

// Test joining.
#for word in lorem(4).split().map(s => s.trim(".")) [
  / #word: Latin stuff.
]


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (call
        (field
          (call
            (field
              (call
                (ident)
                (group
                  (number)))
              (ident))
            (group))
          (ident))
        (group
          (lambda
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (string))))))
      (content
        (term
          (code
            (ident))
          (text)))))
  (parbreak))

====================
typst/terms/terms-multiline
====================

// Test multiline.
#set text(8pt)

/ Fruit: A tasty, edible thing.
/ Veggie:
  An important energy source
  for vegetarians.

  And healthy!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (term
    (text)
    (text))
  (term
    (text)
    (text)
    (text)
    (parbreak)
    (text))
  (parbreak))

====================
typst/terms/terms-style-change-interrupted
====================

// Test style change.
#set text(8pt)
/ First list: #lorem(6)

#set terms(hanging-indent: 30pt)
/ Second list: #lorem(5)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (term
    (text)
    (code
      (call
        (ident)
        (group
          (number)))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (term
    (text)
    (code
      (call
        (ident)
        (group
          (number)))))
  (parbreak))

====================
typst/terms/terms-rtl
====================

// Test RTL.
#set text(8pt, dir: rtl)

/ פרי: דבר טעים, אכיל. ומקור אנרגיה חשוב לצמחונים.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (term
    (text)
    (text))
  (parbreak))

====================
typst/terms/terms-grid
====================

// Test grid like show rule.
#show terms: it => table(
  columns: 2,
  inset: 3pt,
  ..it.children.map(v => (emph(v.term), v.description)).flatten(),
)

/ A: One letter
/ BB: Two letters
/ CCC: Three letters


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number
                (unit)))
            (elude
              (call
                (field
                  (call
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident))
                    (group
                      (lambda
                        (ident)
                        (group
                          (call
                            (ident)
                            (group
                              (field
                                (ident)
                                (ident))))
                          (field
                            (ident)
                            (ident))))))
                  (ident))
                (group))))))))
  (parbreak)
  (term
    (text)
    (text))
  (term
    (text)
    (text))
  (term
    (text)
    (text))
  (parbreak))

====================
typst/terms/terms-syntax-edge-cases
====================

/ Term:
Not in list
/Nope


--------------------

(source_file
  (term
    (text))
  (text)
  (text)
  (parbreak))

====================
typst/terms/terms-missing-colon
====================

// Error: 8 expected colon
/ Hello


--------------------



====================
typst/terms/issue-1050-terms-indent
====================

#set page(width: 110pt)
#set par(first-line-indent: 0.5cm)

- #lorem(5)
- #lorem(5)

+ #lorem(5)
+ #lorem(5)

/ S: #lorem(5)
/ XXXL: #lorem(5)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (item
    (code
      (call
        (ident)
        (group
          (number)))))
  (item
    (code
      (call
        (ident)
        (group
          (number)))))
  (parbreak)
  (item
    (code
      (call
        (ident)
        (group
          (number)))))
  (item
    (code
      (call
        (ident)
        (group
          (number)))))
  (parbreak)
  (term
    (text)
    (code
      (call
        (ident)
        (group
          (number)))))
  (term
    (text)
    (code
      (call
        (ident)
        (group
          (number)))))
  (parbreak))

====================
typst/terms/issue-2530-term-item-panic
====================

// Term item (pre-emptive)
#terms.item[Hello][World!]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (field
          (ident)
          (ident))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/terms/issue-5503-terms-interrupted-by-par-align
====================

// `align` is block-level and should interrupt a `terms`
// but not a `par`
#show terms: [Terms]
/ a: a
/ b: b
#par(leading: 5em)[/ c: c]
/ d: d
/ e: e
#par[/ f: f]
/ g: g
/ h: h
#align(right)[/ i: i]
/ j: j
--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (content
        (text))))
  (term
    (text)
    (text))
  (term
    (text)
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (term
          (text)
          (text)))))
  (term
    (text)
    (text))
  (term
    (text)
    (text))
  (code
    (call
      (ident)
      (content
        (term
          (text)
          (text)))))
  (term
    (text)
    (text))
  (term
    (text)
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (term
          (text)
          (text)))))
  (term
    (text)
    (text)))

====================
typst/enum/enum-function-call
====================

#enum[Embrace][Extend][Extinguish]


--------------------

(source_file
  (code
    (call
      (call
        (call
          (ident)
          (content
            (text)))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/enum/enum-number-override-nested
====================

0. Before first!
1. First.
   2. Indented

+ Second


--------------------

(source_file
  (item
    (text))
  (item
    (text)
    (item
      (text)))
  (parbreak)
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-built-in-loop
====================

// Test automatic numbering in summed content.
#for i in range(5) {
   [+ #numbering("I", 1 + i)]
}


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (content
          (item
            (code
              (call
                (ident)
                (group
                  (string)
                  (add
                    (number)
                    (ident))))))))))
  (parbreak))

====================
typst/enum/list-mix
====================

// Mix of different lists
- Bullet List
+ Numbered List
/ Term: List


--------------------

(source_file
  (comment)
  (item
    (text))
  (item
    (text))
  (term
    (text)
    (text))
  (parbreak))

====================
typst/enum/enum-syntax-at-start
====================

// In the line.
1.2 \
This is 0. \
See 0.3. \


--------------------

(source_file
  (comment)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (parbreak))

====================
typst/enum/enum-syntax-edge-cases
====================

// Edge cases.
+
Empty \
+Nope \
a + 0.


--------------------

(source_file
  (comment)
  (item)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/enum/enum-syntax-number-length
====================

// Ensure that indentation works from the beginning of a number, not the end.

10. a
   11. b
 12. c // same level as b
  13. d // indented past c
14. e


--------------------

(source_file
  (comment)
  (parbreak)
  (item
    (text)
    (item
      (text))
    (item
      (text)
      (comment)
      (item
        (text)
        (comment))))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-number-override
====================

// Test item number overriding.
1. first
+ second
5. fifth

#enum(
   enum.item(1)[First],
   [Second],
   enum.item(5)[Fifth]
)


--------------------

(source_file
  (comment)
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (content
            (text))))))
  (parbreak))

====================
typst/enum/enum-numbering-pattern
====================

// Test numbering pattern.
#set enum(numbering: "(1.a.*)")
+ First
+ Second
  2. Nested
     + Deep
+ Normal


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (item
    (text))
  (item
    (text)
    (item
      (text)
      (item
        (text))))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-numbering-full
====================

// Test full numbering.
#set enum(numbering: "1.a.", full: true)
+ First
  + Nested


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (item
    (text)
    (item
      (text)))
  (parbreak))

====================
typst/enum/enum-numbering-reversed
====================

// Test reverse numbering.
#set enum(reversed: true)
+ Coffee
+ Tea
+ Milk


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-numbering-reversed-overriden
====================

// Test reverse numbering with overriden numbers.
#set enum(reversed: true)
+ A
+ B
+ C
9. D
+ E
+ F


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-numbering-closure
====================

// Test numbering with closure.
#enum(
  start: 3,
  spacing: 0.65em - 3pt,
  tight: false,
  numbering: n => text(
    fill: (red, green, blue).at(calc.rem(n, 3)),
    numbering("A", n),
  ),
  [Red], [Green], [Blue], [Red],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (sub
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (lambda
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (call
                    (field
                      (group
                        (ident)
                        (ident)
                        (ident))
                      (ident))
                    (group
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (ident)
                          (number))))))
                (call
                  (ident)
                  (group
                    (string)
                    (ident)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/enum/enum-numbering-closure-nested
====================

// Test numbering with closure and nested lists.
#set enum(numbering: n => super[#n])
+ A
  + B
+ C


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (ident)
              (call
                (ident)
                (content
                  (code
                    (ident))))))))))
  (item
    (text)
    (item
      (text)))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-numbering-closure-nested-complex
====================

// Test numbering with closure and nested lists.
#set text(font: "New Computer Modern")
#set enum(numbering: (..args) => math.mat(args.pos()), full: true)
+ A
  + B
  + C
    + D
+ E
+ F


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (group
                (elude
                  (ident)))
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))))))
          (tagged
            (ident)
            (bool))))))
  (item
    (text)
    (item
      (text))
    (item
      (text)
      (item
        (text))))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-numbering-pattern-empty
====================

// Error: 22-24 invalid numbering pattern
#set enum(numbering: "")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/enum/enum-numbering-pattern-invalid
====================

// Error: 22-28 invalid numbering pattern
#set enum(numbering: "(())")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/enum/enum-number-align-unaffected
====================

// Alignment shouldn't affect number
#set align(horizon)

+ ABCDEF\ GHIJKL\ MNOPQR
   + INNER\ INNER\ INNER
+ BACK\ HERE


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (parbreak)
  (item
    (text)
    (linebreak)
    (text)
    (linebreak)
    (text)
    (item
      (text)
      (linebreak)
      (text)
      (linebreak)
      (text)))
  (item
    (text)
    (linebreak)
    (text))
  (parbreak))

====================
typst/enum/enum-number-align-default
====================

// Enum number alignment should be 'end' by default
1. a
10. b
100. c


--------------------

(source_file
  (comment)
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-number-align-specified
====================

#set enum(number-align: start)
1.  a
8.  b
16. c


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/enum/enum-number-align-2d
====================

#set enum(number-align: center + horizon)
1.  #box(fill: teal, inset: 10pt )[a]
8.  #box(fill: teal, inset: 10pt )[b]
16. #box(fill: teal,inset: 10pt )[c]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))))
  (item
    (code
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (item
    (code
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (item
    (code
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (parbreak))

====================
typst/enum/enum-number-align-unfolded
====================

// Number align option should not be affected by the context.
#set align(center)
#set enum(number-align: start)

4.  c
8.  d
16. e\ f
   2.  f\ g
   32. g
   64. h


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (item
    (text))
  (item
    (text))
  (item
    (text)
    (linebreak)
    (text)
    (item
      (text)
      (linebreak)
      (text))
    (item
      (text))
    (item
      (text)))
  (parbreak))

====================
typst/enum/enum-number-align-values
====================

// Test valid number align values (horizontal and vertical)
#set enum(number-align: start)
#set enum(number-align: end)
#set enum(number-align: left)
#set enum(number-align: center)
#set enum(number-align: right)
#set enum(number-align: top)
#set enum(number-align: horizon)
#set enum(number-align: bottom)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/enum/issue-2530-enum-item-panic
====================

// Enum item (pre-emptive)
#enum.item(none)[Hello]
#enum.item(17)[Hello]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (field
          (ident)
          (ident))
        (group
          (none)))
      (content
        (text))))
  (code
    (call
      (call
        (field
          (ident)
          (ident))
        (group
          (number)))
      (content
        (text))))
  (parbreak))

====================
typst/enum/issue-5503-enum-interrupted-by-par-align
====================

// `align` is block-level and should interrupt an enum
// but not a `par`
+ a
+ b
#par(leading: 5em)[+ par]
+ d
#par[+ par]
+ f
#align(right)[+ align]
+ h
--------------------

(source_file
  (comment)
  (comment)
  (item
    (text))
  (item
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (item
          (text)))))
  (item
    (text))
  (code
    (call
      (ident)
      (content
        (item
          (text)))))
  (item
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (item
          (text)))))
  (item
    (text)))

====================
typst/list/list-basic
====================

_Shopping list_
#list[Apples][Potatoes][Juice]


--------------------

(source_file
  (emph
    (text))
  (code
    (call
      (call
        (call
          (ident)
          (content
            (text)))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/list/list-nested
====================

- First level.

  - Second level.
    There are multiple paragraphs.

    - Third level.

    Still the same bullet point.

  - Still level 2.

- At the top.


--------------------

(source_file
  (item
    (text)
    (parbreak)
    (item
      (text)
      (text)
      (parbreak)
      (item
        (text))
      (parbreak)
      (text))
    (parbreak)
    (item
      (text)))
  (parbreak)
  (item
    (text))
  (parbreak))

====================
typst/list/list-content-block
====================

- Level 1
  - Level #[
2 through content block
]


--------------------

(source_file
  (item
    (text)
    (item
      (text)
      (code
        (content
          (text)))))
  (parbreak))

====================
typst/list/list-top-level-indent
====================

  - Top-level indent
- is fine.


--------------------

(source_file
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/list/list-indent-specifics
====================

 - A
     - B
   - C
- D


--------------------

(source_file
  (item
    (text)
    (item
      (text))
    (item
      (text)))
  (item
    (text))
  (parbreak))

====================
typst/list/list-indent-trivia-nesting
====================

// Test indent nesting behavior with odd trivia (comments and spaces). The
// comments should _not_ affect the nesting. Only the final column matters.

#let indented = [
- a
 /**/- b
/**/ - c
   /*spanning
     multiple
      lines */ - d
    - e
/**/       - f
/**/  - g
]

#let item = list.item
#let manual = {
  [ ]
  item({
    [a]
    [ ]
    item[b]
    [ ]; [ ]
    item({
      [c]
      [ ]; [ ]
      item[d]
    })
    [ ]
    item({
      [e]
      [ ]; [ ]
      item[f]
      [ ]; [ ]
      item[g]
    })
  })
  [ ]
}

#test(indented, manual)


--------------------

(source_file
  (comment)
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (content
        (item
          (text)
          (comment)
          (item
            (text)))
        (comment)
        (item
          (text))
        (comment)
        (item
          (text))
        (item
          (text))
        (comment)
        (item
          (text))
        (comment)
        (item
          (text)))))
  (parbreak)
  (code
    (let
      (ident)
      (field
        (ident)
        (ident))))
  (code
    (let
      (ident)
      (block
        (content)
        (call
          (ident)
          (group
            (block
              (content
                (text))
              (content)
              (call
                (ident)
                (content
                  (text)))
              (content)
              (content)
              (call
                (ident)
                (group
                  (block
                    (content
                      (text))
                    (content)
                    (content)
                    (call
                      (ident)
                      (content
                        (text))))))
              (content)
              (call
                (ident)
                (group
                  (block
                    (content
                      (text))
                    (content)
                    (content)
                    (call
                      (ident)
                      (content
                        (text)))
                    (content)
                    (content)
                    (call
                      (ident)
                      (content
                        (text)))))))))
        (content))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (parbreak))

====================
typst/list/list-tabs
====================

// This works because tabs are used consistently.
	- A with 1 tab
		- B with 2 tabs


--------------------

(source_file
  (comment)
  (item
    (text)
    (item
      (text)))
  (parbreak))

====================
typst/list/list-mixed-tabs-and-spaces
====================

// This doesn't work because of mixed tabs and spaces.
  - A with 2 spaces
		- B with 2 tabs


--------------------

(source_file
  (comment)
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/list/list-syntax-edge-cases
====================

// Edge cases.
-
Not in list
-Nope


--------------------

(source_file
  (comment)
  (item)
  (text)
  (text)
  (parbreak))

====================
typst/list/list-marker-align-unaffected
====================

// Alignment shouldn't affect marker
#set align(horizon)

- ABCDEF\ GHIJKL\ MNOPQR


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (parbreak)
  (item
    (text)
    (linebreak)
    (text)
    (linebreak)
    (text))
  (parbreak))

====================
typst/list/list-marker-dash
====================

// Test en-dash.
#set list(marker: [--])
- A
- B


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (shorthand)))))))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/list/list-marker-cycle
====================

// Test that items are cycled.
#set list(marker: ([--], [•]))
- A
  - B
    - C


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (content
                (shorthand))
              (content
                (text))))))))
  (item
    (text)
    (item
      (text)
      (item
        (text))))
  (parbreak))

====================
typst/list/list-marker-closure
====================

// Test function.
#set list(marker: n => if n == 1 [--] else [•])
- A
- B
  - C
  - D
    - E
- F


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (ident)
              (branch
                (cmp
                  (ident)
                  (number))
                (content
                  (shorthand))
                (content
                  (text)))))))))
  (item
    (text))
  (item
    (text)
    (item
      (text))
    (item
      (text)
      (item
        (text))))
  (item
    (text))
  (parbreak))

====================
typst/list/list-marker-bare-hyphen
====================

// Test that bare hyphen doesn't lead to cycles and crashes.
#set list(marker: [-])
- Bare hyphen is
- a bad marker


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/list/list-marker-array-empty
====================

// Error: 19-21 array must contain at least one marker
#set list(marker: ())


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group))))))
  (parbreak))

====================
typst/list/list-attached
====================

// Test basic attached list.
Attached to:
- the bottom
- of the paragraph

Next paragraph.


--------------------

(source_file
  (comment)
  (text)
  (item
    (text))
  (item
    (text))
  (parbreak)
  (text)
  (parbreak))

====================
typst/list/list-attached-above-spacing
====================

// Test that attached list isn't affected by block spacing.
#show list: set block(above: 100pt)
Hello
- A
World
- B


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (item
    (text))
  (text)
  (item
    (text))
  (parbreak))

====================
typst/list/list-non-attached-followed-by-attached
====================

// Test non-attached list followed by attached list,
// separated by only word.
Hello

- A

World
- B


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (parbreak)
  (item
    (text))
  (parbreak)
  (text)
  (item
    (text))
  (parbreak))

====================
typst/list/list-tight-non-attached-tight
====================

// Test non-attached tight list.
#set block(spacing: 15pt)
Hello
- A
World

- B
- C

More.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (item
    (text))
  (text)
  (parbreak)
  (item
    (text))
  (item
    (text))
  (parbreak)
  (text)
  (parbreak))

====================
typst/list/list-wide-cannot-attach
====================

// Test that wide lists cannot be ...
#set par(spacing: 15pt)
Hello
- A

- B
World


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (item
    (text))
  (parbreak)
  (item
    (text))
  (text)
  (parbreak))

====================
typst/list/list-wide-really-cannot-attach
====================

// ... even if forced to.
Hello
#list(tight: false)[A][B]
World


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool))))
        (content
          (text)))
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/list/list-items-context
====================

#context [+ A]
#context [+ B]
#context [+ C]


--------------------

(source_file
  (code
    (context
      (content
        (item
          (text)))))
  (code
    (context
      (content
        (item
          (text)))))
  (code
    (context
      (content
        (item
          (text)))))
  (parbreak))

====================
typst/list/list-item-styling
====================

- Hello
#text(red)[- World]
#text(green)[- What up?]


--------------------

(source_file
  (item
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (item
          (text)))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (item
          (text)))))
  (parbreak))

====================
typst/list/issue-2530-list-item-panic
====================

// List item (pre-emptive)
#list.item[Hello]


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (content
        (text))))
  (parbreak))

====================
typst/list/issue-1850-list-attach-spacing
====================

// List attachment should only work with paragraphs, not other blocks.
#set page(width: auto)
#let part = box.with(stroke: 1pt, inset: 3pt)
#{
  part[
    $ x $
    - A
  ]
  part($ x $ + list[A])
  part($ x $ + list[ A ])
  part[
    $ x $

    - A
  ]
  part($ x $ + parbreak() + list[A])
  part($ x $ + parbreak() + parbreak() + list[A])
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (block
      (call
        (ident)
        (content
          (math
            (formula
              (letter)))
          (item
            (text))))
      (call
        (ident)
        (group
          (add
            (math
              (formula
                (letter)))
            (call
              (ident)
              (content
                (text))))))
      (call
        (ident)
        (group
          (add
            (math
              (formula
                (letter)))
            (call
              (ident)
              (content
                (text))))))
      (call
        (ident)
        (content
          (math
            (formula
              (letter)))
          (parbreak)
          (item
            (text))))
      (call
        (ident)
        (group
          (add
            (add
              (math
                (formula
                  (letter)))
              (call
                (ident)
                (group)))
            (call
              (ident)
              (content
                (text))))))
      (call
        (ident)
        (group
          (add
            (add
              (add
                (math
                  (formula
                    (letter)))
                (call
                  (ident)
                  (group)))
              (call
                (ident)
                (group)))
            (call
              (ident)
              (content
                (text))))))))
  (parbreak))

====================
typst/list/issue-5503-list-interrupted-by-par-align
====================

// `align` is block-level and should interrupt a list
// but not a `par`
#show list: [List]
- a
- b
#par(leading: 5em)[- c]
- d
- e
#par[- f]
- g
- h
#align(right)[- i]
- j
--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (content
        (text))))
  (item
    (text))
  (item
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (item
          (text)))))
  (item
    (text))
  (item
    (text))
  (code
    (call
      (ident)
      (content
        (item
          (text)))))
  (item
    (text))
  (item
    (text))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (item
          (text)))))
  (item
    (text)))

====================
typst/outline/outline
====================

#set page(height: 200pt, margin: (bottom: 20pt), numbering: "1")
#set heading(numbering: "(1/a)")
#show heading.where(level: 1): set text(12pt)
#show heading.where(level: 2): set text(10pt)

#outline(fill: none)

= A
= B
#lines(3)

// This heading is right at the start of the page, so that we can test
// whether the tag migrates properly.
#[
  #set heading(outlined: false)
  == C
]

A

== D
== F
==== G


--------------------

====================
typst/outline/outline-styled-text
====================

#outline(title: none)

= #text(blue)[He]llo


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (set
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (set
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none)))))
  (parbreak)
  (section
    (heading
      (text))
    (content))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (number))))
      (parbreak)
      (comment)
      (comment)
      (code
        (content
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (bool))))))
          (section
            (heading
              (text))
            (content))))
      (parbreak)
      (text)
      (parbreak)
      (section
        (heading
          (text))
        (content))
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (parbreak)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (parbreak)
              (section
                (heading)
                (content
                  (text)))
              (section
                (heading)
                (content
                  (parbreak)
                  (code
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (none)))))
                  (parbreak)))))))))
  (section
    (heading
      (code
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text))))
      (text))
    (content
      (parbreak))))

====================
typst/outline/outline-bookmark
====================

#outline(title: none, fill: none)

// Ensure 'bookmarked' option doesn't affect the outline
#set heading(numbering: "(I)", bookmarked: false)
= A


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none))
        (tagged
          (ident)
          (none)))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/outline/outline-indent-numbering
====================

// With heading numbering
#set page(width: 200pt)
#set heading(numbering: "1.a.")
#show heading: none
#set outline(fill: none)

#context test(outline.indent, none)
#outline(indent: none)
#outline(indent: auto)
#outline(indent: 2em)
#outline(indent: n => ([-], [], [==], [====]).at(n))

= A
== B
== C
=== D
==== E


--------------------

====================
typst/outline/outline-indent-no-numbering
====================

// Without heading numbering
#set page(width: 200pt)
#show heading: none
#set outline(fill: none)

#outline(indent: none)
#outline(indent: auto)
#outline(indent: n => 2em * n)

= About
== History


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (none)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (parbreak)
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (none)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (lambda
            (ident)
            (call
              (field
                (group
                  (content
                    (text))
                  (content)
                  (content
                    (text))
                  (content
                    (text)))
                (ident))
              (group
                (ident))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content))
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (section
                (heading
                  (text))
                (content
                  (parbreak)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (parbreak)
                  (section
                    (heading)
                    (content
                      (text)))
                  (section
                    (heading)
                    (content
                      (parbreak)
                      (comment)
                      (code
                        (set
                          (call
                            (ident)
                            (group
                              (tagged
                                (ident)
                                (number
                                  (unit)))))))
                      (code
                        (show
                          (ident)
                          (none)))
                      (code
                        (set
                          (call
                            (ident)
                            (group
                              (tagged
                                (ident)
                                (none))))))
                      (parbreak)
                      (code
                        (call
                          (ident)
                          (group
                            (tagged
                              (ident)
                              (none)))))
                      (code
                        (call
                          (ident)
                          (group
                            (tagged
                              (ident)
                              (auto)))))
                      (code
                        (call
                          (ident)
                          (group
                            (tagged
                              (ident)
                              (lambda
                                (ident)
                                (mul
                                  (number
                                    (unit))
                                  (ident)))))))
                      (parbreak)))))))))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (parbreak))))))

====================
typst/outline/outline-indent-bad-type
====================

// Error: 2-35 expected relative length or content, found dictionary
#outline(indent: n => (a: "dict"))

= Heading


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (lambda
            (ident)
            (group
              (tagged
                (ident)
                (string))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/outline/outline-first-line-indent
====================

#set par(first-line-indent: 1.5em)
#set heading(numbering: "1.1.a.")
#show outline.entry.where(level: 1): it => {
  v(0.5em, weak: true)
  strong(it)
}

#outline()

= Introduction
= Background
== History
== State of the Art
= Analysis
== Setup


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (number
                (unit))
              (tagged
                (ident)
                (bool))))
          (call
            (ident)
            (group
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (section
    (heading
      (text))
    (content))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content))
      (section
        (heading
          (text))
        (content))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (parbreak))))))

====================
typst/outline/outline-entry
====================

#set page(width: 150pt)
#set heading(numbering: "1.")

#show outline.entry.where(
  level: 1
): it => {
  v(12pt, weak: true)
  strong(it)
}

#outline(indent: auto)
#v(1.2em, weak: true)

#set text(8pt)
#show heading: set block(spacing: 0.65em)

= Introduction
= Background
== History
== State of the Art
= Analysis
== Setup


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (show
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (number
                (unit))
              (tagged
                (ident)
                (bool))))
          (call
            (ident)
            (group
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto)))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content))
      (section
        (heading
          (text))
        (content))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (parbreak))))))

====================
typst/outline/outline-entry-complex
====================

#set page(width: 150pt, numbering: "I", margin: (bottom: 20pt))
#set heading(numbering: "1.")
#show outline.entry.where(level: 1): it => [
  #let loc = it.element.location()
  #let num = numbering(loc.page-numbering(), ..counter(page).at(loc))
  #emph(link(loc, it.body))
  #text(luma(100), box(width: 1fr, repeat[#it.fill.body;·]))
  #link(loc, num)
]

#counter(page).update(3)
#outline(indent: auto, fill: repeat[--])
#v(1.2em, weak: true)

#set text(8pt)
#show heading: set block(spacing: 0.65em)

= Top heading
== Not top heading
=== Lower heading
=== Lower too
== Also not top

#pagebreak()
#set page(numbering: "1")

= Another top heading
== Middle heading
=== Lower heading


--------------------

====================
typst/outline/outline-bad-element
====================

// Error: 2-27 cannot outline metadata
#outline(target: metadata)
#metadata("hello")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (lambda
        (ident)
        (content
          (code
            (let
              (ident)
              (call
                (field
                  (field
                    (ident)
                    (ident))
                  (ident))
                (group))))
          (code
            (let
              (ident)
              (call
                (ident)
                (group
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (elude
                    (call
                      (field
                        (call
                          (ident)
                          (group
                            (ident)))
                        (ident))
                      (group
                        (ident))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (ident)
                    (field
                      (ident)
                      (ident)))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (call
                      (ident)
                      (content
                        (code
                          (field
                            (field
                              (ident)
                              (ident))
                            (ident)))
                        (text))))))))
          (code
            (call
              (ident)
              (group
                (ident)
                (ident))))))))
  (parbreak)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (call
            (ident)
            (content
              (shorthand)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content))
          (section
            (heading
              (text))
            (content))))
      (section
        (heading
          (text))
        (content
          (parbreak)
          (code
            (call
              (ident)
              (group)))
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))))))
          (parbreak)))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (parbreak)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (parbreak)
              (section
                (heading)
                (content
                  (text)))
              (section
                (heading)
                (content
                  (parbreak)
                  (comment)
                  (code
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (ident)))))
                  (code
                    (call
                      (ident)
                      (group
                        (string))))
                  (parbreak))))))))))

====================
typst/outline/issue-2530-outline-entry-panic-text
====================

// Outline entry (pre-emptive)
// Error: 2-48 cannot outline text
#outline.entry(1, [Hello], [World!], none, [1])


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (content
          (text))
        (content
          (text))
        (none)
        (content
          (text)))))
  (parbreak))

====================
typst/outline/issue-2530-outline-entry-panic-heading
====================

// Outline entry (pre-emptive, improved error)
// Error: 2-55 heading must have a location
// Hint: 2-55 try using a query or a show rule to customize the outline.entry instead
#outline.entry(1, heading[Hello], [World!], none, [1])


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (call
          (ident)
          (content
            (text)))
        (content
          (text))
        (none)
        (content
          (text)))))
  (parbreak))

====================
typst/outline/issue-4476-rtl-title-ending-in-ltr-text
====================

#set text(lang: "he")
#outline()

= הוקוס Pocus
= זוהי כותרת שתורגמה על ידי מחשב


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (section
    (heading
      (text))
    (content))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/outline/issue-5176-cjk-title
====================

#set text(font: "Noto Serif CJK SC")
#show heading: none

#outline(title: none)

= 测
= 很
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (none)))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none)))))
  (parbreak)
  (section
    (heading
      (text))
    (content))
  (section
    (heading
      (text))
    (content)))

====================
typst/figure/figure-basic
====================

#set page(width: 150pt)
#set figure(numbering: "I")

We can clearly see that @fig-cylinder and
@tab-complex are relevant in this context.

#figure(
  table(columns: 2)[a][b],
  caption: [The basic table.],
) <tab-basic>

#figure(
  pad(y: -6pt, image("/assets/images/cylinder.svg", height: 2cm)),
  caption: [The basic shapes.],
  numbering: "I",
) <fig-cylinder>

#figure(
  table(columns: 3)[a][b][c][d][e][f],
  caption: [The complex table.],
) <tab-complex>


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (ref)
  (text)
  (ref)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))))
            (content
              (text)))
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (label)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (sign
                (number
                  (unit))))
            (call
              (ident)
              (group
                (string)
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (string)))))
  (label)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (call
                (call
                  (call
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (content
                      (text)))
                  (content
                    (text)))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (label)
  (parbreak))

====================
typst/figure/figure-align
====================

#show figure: set align(start)
#figure(
  rect[This is \ left],
  caption: [Start-aligned]
)


--------------------

(source_file
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)
            (linebreak)
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-table
====================

// Testing figures with tables.
#figure(
  table(
    columns: 2,
    [Second cylinder],
    image("/assets/images/cylinder.svg"),
  ),
  caption: "A table containing images."
) <fig-image-in-table>


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (content
              (text))
            (call
              (ident)
              (group
                (string)))))
        (tagged
          (ident)
          (string)))))
  (label)
  (parbreak))

====================
typst/figure/figure-placement
====================

#set page(height: 160pt, columns: 2)
#set place(clearance: 10pt)

#lines(4)

#figure(
  placement: auto,
  scope: "parent",
  caption: [I],
  rect(height: 15pt, width: 80%),
)

#figure(
  placement: bottom,
  caption: [II],
  rect(height: 15pt, width: 80%),
)

#lines(2)

#figure(
  placement: bottom,
  caption: [III],
  rect(height: 25pt, width: 80%),
)

#figure(
  placement: auto,
  scope: "parent",
  caption: [IV],
  rect(width: 80%),
)

#lines(15)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (content
            (text)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (content
            (text)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (content
            (text)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (content
            (text)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/figure/figure-scope-without-placement
====================

// Error: 2-27 parent-scoped placement is only available for floating figures
// Hint: 2-27 you can enable floating placement with `figure(placement: auto, ..)`
#figure(scope: "parent")[]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content)))
  (parbreak))

====================
typst/figure/figure-theorem
====================

// Testing show rules with figures with a simple theorem display
#show figure.where(kind: "theorem"): it => {
  set align(start)
  let name = none
  if not it.caption == none {
    name = [ #emph(it.caption.body)]
  } else {
    name = []
  }

  let title = none
  if not it.numbering == none {
    title = it.supplement
    if not it.numbering == none {
      title += " " +  it.counter.display(it.numbering)
    }
  }
  title = strong(title)
  pad(
    top: 0em, bottom: 0em,
    block(
      fill: green.lighten(90%),
      stroke: 1pt + green,
      inset: 10pt,
      width: 100%,
      radius: 5pt,
      breakable: false,
      [#title#name#h(0.1em):#h(0.2em)#it.body#v(0.5em)]
    )
  )
}

#set page(width: 150pt)
#figure(
  $a^2 + b^2 = c^2$,
  supplement: "Theorem",
  kind: "theorem",
  caption: "Pythagoras' theorem.",
  numbering: "1",
) <fig-formula>

#figure(
  $a^2 + b^2 = c^2$,
  supplement: "Theorem",
  kind: "theorem",
  caption: "Another Pythagoras' theorem.",
  numbering: none,
) <fig-formula>

#figure(
  ```rust
  fn main() {
    println!("Hello!");
  }
  ```,
  caption: [Hello world in _rust_],
)


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (ident))))
          (let
            (ident)
            (none))
          (branch
            (not
              (cmp
                (field
                  (ident)
                  (ident))
                (none)))
            (block
              (assign
                (ident)
                (content
                  (code
                    (call
                      (ident)
                      (group
                        (field
                          (field
                            (ident)
                            (ident))
                          (ident))))))))
            (block
              (assign
                (ident)
                (content))))
          (let
            (ident)
            (none))
          (branch
            (not
              (cmp
                (field
                  (ident)
                  (ident))
                (none)))
            (block
              (assign
                (ident)
                (field
                  (ident)
                  (ident)))
              (branch
                (not
                  (cmp
                    (field
                      (ident)
                      (ident))
                    (none)))
                (block
                  (assign
                    (ident)
                    (add
                      (string)
                      (call
                        (field
                          (field
                            (ident)
                            (ident))
                          (ident))
                        (group
                          (field
                            (ident)
                            (ident))))))))))
          (assign
            (ident)
            (call
              (ident)
              (group
                (ident))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (number
                          (unit)))))
                  (tagged
                    (ident)
                    (add
                      (number
                        (unit))
                      (ident)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (bool))
                  (content
                    (code
                      (ident))
                    (code
                      (ident))
                    (code
                      (call
                        (ident)
                        (group
                          (number
                            (unit)))))
                    (text)
                    (code
                      (call
                        (ident)
                        (group
                          (number
                            (unit)))))
                    (code
                      (field
                        (ident)
                        (ident)))
                    (code
                      (call
                        (ident)
                        (group
                          (number
                            (unit))))))))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (attach
              (letter)
              (number))
            (symbol)
            (attach
              (letter)
              (number))
            (symbol)
            (attach
              (letter)
              (number))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string)))))
  (label)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (attach
              (letter)
              (number))
            (symbol)
            (attach
              (letter)
              (number))
            (symbol)
            (attach
              (letter)
              (number))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (none)))))
  (label)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (raw_blck
          (ident)
          (blob))
        (tagged
          (ident)
          (content
            (text)
            (emph
              (text)))))))
  (parbreak))

====================
typst/figure/figure-breakable
====================

// Test breakable figures
#set page(height: 6em)
#show figure: set block(breakable: true)

#figure(table[a][b][c][d][e], caption: [A table])


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (call
                (call
                  (ident)
                  (content
                    (text)))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-caption-separator
====================

// Test custom separator for figure caption
#set figure.caption(separator: [ 
--------------------



====================
typst/figure/figure-caption-show
====================

// Test figure.caption element
#show figure.caption: emph

#figure(
  [Not italicized],
  caption: [Italicized],
)


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-caption-where-selector
====================

// Test figure.caption element for specific figure kinds
#show figure.caption.where(kind: table): underline

#figure(
  [Not a table],
  caption: [Not underlined],
)

#figure(
  table[A table],
  caption: [Underlined],
)


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (ident))))
      (ident)))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-and-caption-show
====================

// Test creating custom figure and custom caption

#let gap = 0.7em
#show figure.where(kind: "custom"): it => rect(inset: gap, {
  align(center, it.body)
  v(gap, weak: true)
  line(length: 100%)
  v(gap, weak: true)
  align(center, it.caption)
})

#figure(
  [A figure],
  kind: "custom",
  caption: [Hi],
  supplement: [A],
)

#show figure.caption: it => emph[
  #it.body
  (#it.supplement
   #context it.counter.display(it.numbering))
]

#figure(
  [Another figure],
  kind: "custom",
  caption: [Hi],
  supplement: [B],
)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (number
        (unit))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))
      (lambda
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (block
              (call
                (ident)
                (group
                  (ident)
                  (field
                    (ident)
                    (ident))))
              (call
                (ident)
                (group
                  (ident)
                  (tagged
                    (ident)
                    (bool))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (call
                (ident)
                (group
                  (ident)
                  (tagged
                    (ident)
                    (bool))))
              (call
                (ident)
                (group
                  (ident)
                  (field
                    (ident)
                    (ident))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (call
          (ident)
          (content
            (code
              (field
                (ident)
                (ident)))
            (text)
            (code
              (field
                (ident)
                (ident)))
            (code
              (context
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (field
                      (ident)
                      (ident))))))
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-caption-position
====================

#set figure.caption(position: top)


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/figure/figure-caption-position-bad
====================

// Error: 31-38 expected `top` or `bottom`, found horizon
#set figure.caption(position: horizon)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/figure/figure-localization-fr
====================

// Test French
#set text(lang: "fr")
#figure(
  circle(),
  caption: [Un cercle.],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-localization-zh
====================

// Test Chinese
#set text(lang: "zh")
#figure(
  rect(),
  caption: [一个矩形],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-localization-ru
====================

// Test Russian
#set text(lang: "ru")

#figure(
    polygon.regular(size: 1cm, vertices: 8),
    caption: [Пятиугольник],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number))))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/figure-localization-el
====================

// Test Greek
#set text(lang: "el")
#figure(
  circle(),
  caption: [Ένας κύκλος.],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/issue-2165-figure-caption-panic
====================

#figure.caption[]


--------------------

(source_file
  (code
    (call
      (field
        (ident)
        (ident))
      (content)))
  (parbreak))

====================
typst/figure/issue-2328-figure-entry-panic
====================

// Error: 4-43 footnote entry must have a location
// Hint: 4-43 try using a query or a show rule to customize the footnote instead
HI#footnote.entry(clearance: 2.5em)[There]


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (code
    (call
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/figure/issue-2530-figure-caption-panic
====================

#figure(caption: [test])[].caption


--------------------

(source_file
  (code
    (field
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (content
                (text)))))
        (content))
      (ident)))
  (parbreak))

====================
typst/figure/issue-3586-figure-caption-separator
====================

// Test that figure caption separator is synthesized correctly.
#show figure.caption: c => test(c.separator, [#": "])
#figure(table[], caption: [This is a test caption])


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))
            (content
              (code
                (string))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/figure/issue-4966-figure-float-counter
====================

#let c = context counter(figure.where(kind: image)).display()
#set align(center)

#c

#figure(
  square(c),
  placement: bottom,
  caption: [A]
)

#c

#figure(
  circle(c),
  placement: top,
  caption: [B]
)

#c


--------------------

(source_file
  (code
    (let
      (ident)
      (context
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (ident))))))
            (ident))
          (group)))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (parbreak)
  (code
    (ident))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (ident))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (ident))
  (parbreak))

====================
typst/figure/issue-5370-figure-caption-separator-outline
====================

// Test that language-dependant caption separator is respected in outline.
#outline(title: none, target: figure)
#set text(lang: "ru")
#figure(rect(), caption: [Rectangle])
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none))
        (tagged
          (ident)
          (ident)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (content
            (text)))))))

====================
typst/document/document-set-title
====================

#set document(title: [Hello])
What's up?


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))))
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/document/document-set-author-date
====================

#set document(author: ("A", "B"), date: datetime.today())


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group)))))))
  (parbreak))

====================
typst/document/document-date-bad
====================

// Error: 21-28 expected datetime, none, or auto, found string
#set document(date: "today")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/document/document-author-bad
====================

// Error: 23-29 expected string, found integer
#set document(author: (123,))
What's up?


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number)))))))
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/document/document-set-after-content
====================

// Document set rules can appear anywhere in top-level realization, also after
// content.
Hello
#set document(title: [Hello])


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))))
  (parbreak))

====================
typst/document/document-constructor
====================

// Error: 2-12 can only be used in set rules
#document()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/document/document-set-in-container
====================

#box[
  // Error: 4-32 document set rules are not allowed inside of containers
  #set document(title: [Hello])
]


--------------------

(source_file
  (code
    (call
      (ident)
      (content
        (comment)
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (content
                    (text))))))))))
  (parbreak))

====================
typst/document/issue-4065-document-context
====================

// Test that we can set document properties based on context.
#show: body => context {
  let all = query(heading)
  let title = if all.len() > 0 { all.first().body }
  set document(title: title)
  body
}

#show heading: none
= Top level


--------------------

(source_file
  (comment)
  (code
    (show
      (lambda
        (ident)
        (context
          (block
            (let
              (ident)
              (call
                (ident)
                (group
                  (ident))))
            (let
              (ident)
              (branch
                (cmp
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (number))
                (block
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))
                    (ident)))))
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident)))))
            (ident))))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/document/issue-4769-document-context-conditional
====================

// Test that document set rule can be conditional on document information
// itself.
#set document(author: "Normal", title: "Alternative")
#context {
  set document(author: "Changed") if "Normal" in document.author
  set document(title: "Changed") if document.title ==  "Normal"
}
--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (context
      (block
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (in
            (string)
            (field
              (ident)
              (ident))))
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (cmp
            (field
              (ident)
              (ident))
            (string)))))))

====================
typst/link/link-basic
====================

// Link syntax.
https://example.com/

// Link with body.
#link("https://typst.org/")[Some text text text]

// With line break.
This link appears #link("https://google.com/")[in the middle of] a paragraph.

// Certain prefixes are trimmed when using the `link` function.
Contact #link("mailto:hi@typst.app") or
call #link("tel:123") for more information.


--------------------

(source_file
  (comment)
  (url)
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (string)))
      (content
        (text))))
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (string)))
      (content
        (text))))
  (text)
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (string))))
  (text)
  (text)
  (code
    (call
      (ident)
      (group
        (string))))
  (text)
  (parbreak))

====================
typst/link/link-trailing-period
====================

// Test that the period is trimmed.
#show link: underline
https://a.b.?q=%10#. \
Wahttp://link \
Nohttps:\//link \
Nohttp\://comment


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (ident)))
  (url)
  (linebreak)
  (text)
  (url)
  (linebreak)
  (text
    (escape))
  (linebreak)
  (text
    (escape))
  (comment)
  (parbreak))

====================
typst/link/link-bracket-balanced
====================

// Verify that brackets are included in links.
https://[::1]:8080/ \
https://example.com/(paren) \
https://example.com/#(((nested))) \


--------------------

(source_file
  (comment)
  (url)
  (linebreak)
  (url)
  (linebreak)
  (url)
  (linebreak)
  (parbreak))

====================
typst/link/link-bracket-unbalanced-closing
====================

// Check that unbalanced brackets are not included in links.
#[https://example.com/] \
https://example.com/)


--------------------

(source_file
  (comment)
  (code
    (content
      (url)))
  (linebreak)
  (url)
  (text)
  (parbreak))

====================
typst/link/link-bracket-unbalanced-opening
====================

// Verify that opening brackets without closing brackets throw an error.
// Error: 1-22 automatic links cannot contain unbalanced brackets, use the `link` function instead
https://exam(ple.com/


--------------------

(source_file
  (comment)
  (comment)
  (url)
  (parbreak))

====================
typst/link/link-show
====================

// Styled with underline and color.
#show link: it => underline(text(fill: rgb("283663"), it))
You could also make the
#link("https://html5zombo.com/")[link look way more typical.]


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (string))))
                (ident))))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (string)))
      (content
        (text))))
  (parbreak))

====================
typst/link/link-transformed
====================

// Transformed link.
#set page(height: 60pt)
#let mylink = link("https://typst.org/")[LINK]
My cool #box(move(dx: 0.7cm, dy: 0.7cm, rotate(10deg, scale(200%, mylink))))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (call
          (ident)
          (group
            (string)))
        (content
          (text)))))
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (group
                (number
                  (unit))
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (ident))))))))))
  (parbreak))

====================
typst/link/link-on-block
====================

// Link containing a block.
#link("https://example.com/", block[
  My cool rhino
  #box(move(dx: 10pt, image("/assets/images/rhino.png", width: 1cm)))
])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (group
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (number
                          (unit)))
                      (call
                        (ident)
                        (group
                          (string)
                          (tagged
                            (ident)
                            (number
                              (unit)))))))))))))))
  (parbreak))

====================
typst/link/link-to-page
====================

// Link to page one.
#link((page: 1, x: 10pt, y: 20pt))[Back to the start]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))
      (content
        (text))))
  (parbreak))

====================
typst/link/link-to-label
====================

// Test link to label.
Text <hey>
#link(<hey>)[Go to text.]


--------------------

(source_file
  (comment)
  (text)
  (label)
  (code
    (call
      (call
        (ident)
        (group
          (label)))
      (content
        (text))))
  (parbreak))

====================
typst/link/link-to-label-missing
====================

// Error: 2-20 label `<hey>` does not exist in the document
#link(<hey>)[Nope.]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (label)))
      (content
        (text))))
  (parbreak))

====================
typst/link/link-to-label-duplicate
====================

Text <hey>
Text <hey>
// Error: 2-20 label `<hey>` occurs multiple times in the document
#link(<hey>)[Nope.]
--------------------

(source_file
  (text)
  (label)
  (text)
  (label)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (label)))
      (content
        (text)))))

====================
typst/bibliography/bibliography-basic
====================

#set page(width: 200pt)

= Details
See also @arrgh #cite(<distress>, supplement: [p.~22]), @arrgh[p.~4], and @distress[p.~5].
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (text)
      (ref)
      (code
        (call
          (ident)
          (group
            (label)
            (tagged
              (ident)
              (content
                (text)
                (shorthand)
                (text))))))
      (text)
      (ref
        (content
          (text)
          (shorthand)
          (text)))
      (text)
      (ref
        (content
          (text)
          (shorthand)
          (text)))
      (text)
      (code
        (call
          (ident)
          (group
            (string))))
      (parbreak))))

====================
typst/bibliography/bibliography-before-content
====================

// Test unconventional order.
#set page(width: 200pt)
#bibliography(
  "/assets/bib/works.bib",
  title: [Works to be cited],
  style: "chicago-author-date",
)
#line(length: 100%)

As described by #cite(<netwok>, form: "prose"),
the net-work is a creature of its own.
This is close to piratery! @arrgh
And quark! @quark


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (string)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (label)
        (tagged
          (ident)
          (string)))))
  (text)
  (text)
  (text)
  (ref)
  (text)
  (ref)
  (parbreak))

====================
typst/bibliography/bibliography-multiple-files
====================

#set page(width: 200pt)
#set heading(numbering: "1.")
#show bibliography: set heading(numbering: "1.")

= Multiple Bibs
Now we have multiple bibliographies containing @glacier-melt @keshav2007read
#bibliography(("/assets/bib/works.bib", "/assets/bib/works_too.bib"))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (text)
      (ref)
      (ref)
      (code
        (call
          (ident)
          (group
            (group
              (string)
              (string)))))
      (parbreak))))

====================
typst/bibliography/bibliography-duplicate-key
====================

// Error: 15-65 duplicate bibliography keys: netwok, issue201, arrgh, quark, distress, glacier-melt, tolkien54, DBLP:books/lib/Knuth86a, sharing, restful, mcintosh_anxiety, psychology25
#bibliography(("/assets/bib/works.bib", "/assets/bib/works.bib"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/bibliography/bibliography-ordering
====================

#set page(width: 300pt)

@mcintosh_anxiety
@psychology25

#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (ref)
  (ref)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/bibliography/bibliography-full
====================

#set page(paper: "a6", height: auto)
#bibliography("/assets/bib/works_too.bib", full: true)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/bibliography/bibliography-math
====================

#set page(width: 200pt)

@Zee04
#bibliography("/assets/bib/works_too.bib", style: "mla")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (ref)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/bibliography/issue-4618-bibliography-set-heading-level
====================

// Test that the bibliography block's heading is set to 2 by the show rule,
// and therefore should be rendered like a level-2 heading. Notably, this
// bibliography heading should not be underlined.
#show heading.where(level: 1): it => [ #underline(it.body) ]
#show bibliography: set heading(level: 2)

= Level 1
== Level 2
@Zee04

#bibliography("/assets/bib/works_too.bib")
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (lambda
        (ident)
        (content
          (code
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident)))))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (ref)
          (parbreak)
          (code
            (call
              (ident)
              (group
                (string)))))))))

====================
typst/numbering/numbering
====================

#let t(pat: "1", step: 1, ..vals) = {
  let num = 0
  for val in vals.pos() {
    if type(val) == int {
      num = val
    } else {
      test(numbering(pat, num), val)
      num += step
    }
  }
}

// Arabic.
#t(pat: "1", "0", "1", "2", "3", "4", "5", "6", 107, "107", "108")

// Greek.
#t(
  pat: "α",
  "𐆊", "αʹ", "βʹ", "γʹ", "δʹ", "εʹ", "ϛʹ", "ζʹ", "ηʹ", "θʹ", "ιʹ",
  "ιαʹ", "ιβʹ", "ιγʹ", "ιδʹ", "ιεʹ", "ιϛʹ", "ιζʹ", "ιηʹ", "ιθʹ", "κʹ",
  241, "σμαʹ",
  999, "ϡϙθʹ",
  1005, "͵αε",
  1999, "͵αϡϙθ",
  2999, "͵βϡϙθ",
  3000, "͵γ",
  3398, "͵γτϙη",
  4444, "͵δυμδ",
  5683, "͵εχπγ",
  9184, "͵θρπδ",
  9999, "͵θϡϙθ",
  20000, "αΜβʹ",
  20001, "αΜβʹ, αʹ",
  97554, "αΜθʹ, ͵ζφνδ",
  99999, "αΜθʹ, ͵θϡϙθ",
  1000000, "αΜρʹ",
  1000001, "αΜρʹ, αʹ",
  1999999, "αΜρϙθʹ, ͵θϡϙθ",
  2345678, "αΜσλδʹ, ͵εχοη",
  9999999, "αΜϡϙθʹ, ͵θϡϙθ",
  10000000, "αΜ͵α",
  90000001, "αΜ͵θ, αʹ",
  100000000, "βΜαʹ",
  1000000000, "βΜιʹ",
  2000000000, "βΜκʹ",
  2000000001, "βΜκʹ, αʹ",
  2000010001, "βΜκʹ, αΜαʹ, αʹ",
  2056839184, "βΜκʹ, αΜ͵εχπγ, ͵θρπδ",
  12312398676, "βΜρκγʹ, αΜ͵ασλθ, ͵ηχοϛ",
)
#t(
  pat: sym.Alpha,
  "𐆊", "Αʹ", "Βʹ", "Γʹ", "Δʹ", "Εʹ", "Ϛʹ", "Ζʹ", "Ηʹ", "Θʹ", "Ιʹ",
  "ΙΑʹ", "ΙΒʹ", "ΙΓʹ", "ΙΔʹ", "ΙΕʹ", "ΙϚʹ", "ΙΖʹ", "ΙΗʹ", "ΙΘʹ", "Κʹ",
  241, "ΣΜΑʹ",
)

// Symbols.
#t(pat: "*", "-", "*", "†", "‡", "§", "¶", "‖", "**")

// Hebrew.
#t(pat: "א", step: 2, 9, "ט׳", "י״א", "י״ג")

// Chinese.
#t(pat: "一", step: 2, 9, "九", "十一", "十三", "十五", "十七", "十九")
#t(pat: "壹", step: 2, 9, "玖", "拾壹", "拾叁", "拾伍", "拾柒", "拾玖")

// Japanese.
#t(pat: "イ", "-", "イ", "ロ", "ハ", 47, "ス", "イイ", "イロ", "イハ", 2256, "スス", "イイイ")
#t(pat: "い", "-", "い", "ろ", "は", 47, "す", "いい", "いろ", "いは")
#t(pat: "あ", "-", "あ", "い", "う", "え", "お", "か", "き", "く")
#t(pat: "ア", "-", "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク")

// Korean.
#t(pat: "가", "-", "가", "나", "다", 47, "다마", "다바", "다사", "다아")
#t(pat: "ㄱ", "-", "ㄱ", "ㄴ", "ㄷ", 47, "ㄷㅁ")

// Arabic Indic.
#t(pat: "\u{0661}", 1475, "١٤٧٥")
#t(pat: "\u{06F1}", 1475, "۱۴۷۵")

// Devanagari.
#t(pat: "\u{0967}", 1, "१")
#t(pat: "\u{0967}", 10, "१०")
#t(pat: "\u{0967}", 123456789, "१२३४५६७८९")

// Bengali.
#t(pat: "\u{09E7}", 1, "১")
#t(pat: "\u{09E7}", 10, "১০")
#t(pat: "\u{09E7}", 123456789, "১২৩৪৫৬৭৮৯")

// Bengali Consonants.
#t(pat: "\u{0995}", 1, "ক")
#t(pat: "\u{0995}", 32, "হ")
#t(pat: "\u{0995}", 32*2 , "কহ")

// Circled number.
#t(pat: "①", 1, "①")
#t(pat: "①", 50, "㊿")

// Double-circled number.
#t(pat: "⓵", 1, "⓵")
#t(pat: "⓵", 10, "⓾")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number))
          (elude
            (ident))))
      (block
        (let
          (ident)
          (number))
        (for
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group))
          (block
            (branch
              (cmp
                (call
                  (ident)
                  (group
                    (ident)))
                (ident))
              (block
                (assign
                  (ident)
                  (ident)))
              (block
                (call
                  (ident)
                  (group
                    (call
                      (ident)
                      (group
                        (ident)
                        (ident)))
                    (ident)))
                (assign
                  (ident)
                  (ident)))))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (number)
        (string)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string)
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (field
            (ident)
            (ident)))
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number))
        (number)
        (string)
        (string)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number))
        (number)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number))
        (number)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (number)
        (string)
        (string)
        (string)
        (string)
        (number)
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (number)
        (string)
        (string)
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (number)
        (string)
        (string)
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string)
        (string)
        (string)
        (string)
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string
            (escape)))
        (mul
          (number)
          (number))
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (number)
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (number)
        (string))))
  (parbreak))

====================
typst/numbering/numbering-negative
====================

// Error: 17-19 number must be at least zero
#numbering("1", -1)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (sign
          (number))))))

====================
typst/par/par-basic
====================

#set page(width: 250pt, height: 120pt)

But, soft! what light through yonder window breaks? It is the east, and Juliet
is the sun. Arise, fair sun, and kill the envious moon, Who is already sick and
pale with grief, That thou her maid art far more fair than she: Be not her maid,
since she is envious; Her vestal livery is but sick and green And none but fools
do wear it; cast it off. It is my lady, O, it is my love! O, that she knew she
were! She speaks yet she says nothing: what of that? Her eye discourses; I will
answer it.

I am too bold, 'tis not to me she speaks: Two of the fairest stars in all the
heaven, Having some business, do entreat her eyes To twinkle in their spheres
till they return. What if her eyes were there, they in her head? The brightness
of her cheek would shame those stars, As daylight doth a lamp; her eyes in
heaven Would through the airy region stream so bright That birds would sing and
think it were not night. See, how she leans her cheek upon her hand! O, that I
were a glove upon that hand, That I might touch that cheek!


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (text)
  (text)
  (text)
  (text)
  (text)
  (text)
  (parbreak)
  (text)
  (quote)
  (text)
  (text)
  (text)
  (text)
  (text)
  (text)
  (text)
  (parbreak))

====================
typst/par/par-leading-and-spacing
====================

// Test changing leading and spacing.
#set par(spacing: 1em, leading: 2pt)
But, soft! what light through yonder window breaks?

It is the east, and Juliet is the sun.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (parbreak)
  (text)
  (parbreak))

====================
typst/par/par-spacing-context
====================

#set par(spacing: 10pt)
#context test(par.spacing, 10pt)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (number
            (unit))))))
  (parbreak))

====================
typst/par/par-first-line-indent
====================

#set par(first-line-indent: 12pt, spacing: 5pt, leading: 5pt)
#show heading: set text(size: 10pt)

The first paragraph has no indent.

But the second one does.

#box(image("/assets/images/tiger.jpg", height: 6pt))
starts a paragraph, also with indent.

#align(center, image("/assets/images/rhino.png", width: 1cm))

= Headings
- And lists.
- Have no indent.

  Except if you have another paragraph in them.

#set text(8pt, lang: "ar", font: ("Noto Sans Arabic", "Libertinus Serif"))
#set par(leading: 8pt)

= Arabic
دع النص يمطر عليك

ثم يصبح النص رطبًا وقابل للطرق ويبدو المستند رائعًا.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (item
        (text))
      (item
        (text)
        (parbreak)
        (text))
      (parbreak)
      (code
        (set
          (call
            (ident)
            (group
              (number
                (unit))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (group
                  (string)
                  (string)))))))
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (parbreak)))
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak)
      (text)
      (parbreak))))

====================
typst/par/par-spacing-and-first-line-indent
====================

// This is madness.
#set par(first-line-indent: 12pt)
Why would anybody ever ...

... want spacing and indent?


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (shorthand)
  (parbreak)
  (shorthand)
  (text)
  (parbreak))

====================
typst/par/par-hanging-indent
====================

// Test hanging indent.
#set par(hanging-indent: 15pt, justify: true)
#lorem(10)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/par/par-hanging-indent-manual-linebreak
====================

#set par(hanging-indent: 1em)
Welcome \ here. Does this work well?


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/par/par-hanging-indent-rtl
====================

#set par(hanging-indent: 2em)
#set text(dir: rtl)
لآن وقد أظلم الليل وبدأت النجوم
تنضخ وجه الطبيعة التي أعْيَتْ من طول ما انبعثت في النهار


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (text)
  (parbreak))

====================
typst/par/par-trailing-whitespace
====================

// Ensure that trailing whitespace layouts as intended.
#box(fill: aqua, " ")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/par/par-empty-metadata
====================

// Check that metadata still works in a zero length paragraph.
#block(height: 0pt)[#""#metadata(false)<hi>]
#context test(query(<hi>).first().value, false)


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (string))
        (code
          (call
            (ident)
            (group
              (bool))))
        (label))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (call
              (field
                (call
                  (ident)
                  (group
                    (label)))
                (ident))
              (group))
            (ident))
          (bool)))))
  (parbreak))

====================
typst/par/par-metadata-after-trimmed-space
====================

// Ensure that metadata doesn't prevent trailing spaces from being trimmed.
#set par(justify: true, linebreaks: "simple")
#set text(hyphenate: false)
Lorem ipsum dolor #metadata(none) nonumy eirmod tempor.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (group
        (none))))
  (text)
  (parbreak))

====================
typst/par/issue-4278-par-trim-before-equation
====================

#set par(justify: true)
#lorem(6) aa $a = c + b$


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (text)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/par/issue-4938-par-bad-ratio
====================

#set par(justify: true)
#box($k in NN_0$)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (letter)
            (ident)
            (attach
              (ident)
              (number)))))))
  (parbreak))

====================
typst/par/issue-4770-par-tag-at-start
====================

#h(0pt) #box[] <a>

#context test(query(<a>).len(), 1)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (content)))
  (label)
  (parbreak)
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (call
                (ident)
                (group
                  (label)))
              (ident))
            (group))
          (number)))))
  (parbreak))

====================
typst/par/show-par-set-block-hint
====================

// Warning: 2-36 `show par: set block(spacing: ..)` has no effect anymore
// Hint: 2-36 this is specific to paragraphs as they are not considered blocks anymore
// Hint: 2-36 write `set par(spacing: ..)` instead
#show par: set block(spacing: 12pt)
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))))))

====================
typst/cite/cite-footnote
====================

Hello @netwok
And again: @netwok

#pagebreak()
#bibliography("/assets/bib/works.bib", style: "chicago-notes")


--------------------

(source_file
  (text)
  (ref)
  (text)
  (ref)
  (parbreak)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/cite/cite-form
====================

#set page(width: 200pt)

Nothing: #cite(<arrgh>, form: none)

#cite(<netwok>, form: "prose") say stuff.

#bibliography("/assets/bib/works.bib", style: "apa")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (label)
        (tagged
          (ident)
          (none)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (label)
        (tagged
          (ident)
          (string)))))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/cite/cite-group
====================

A#[@netwok@arrgh]B \
A@netwok@arrgh B \
A@netwok @arrgh B \
A@netwok @arrgh. B \

A @netwok#[@arrgh]B \
A @netwok@arrgh, B \
A @netwok @arrgh, B \
A @netwok @arrgh. B \

A#[@netwok @arrgh @quark]B. \
A @netwok @arrgh @quark B. \
A @netwok @arrgh @quark, B.

#set text(0pt)
#bibliography("/assets/bib/works.bib", style: "american-physics-society")


--------------------

(source_file
  (text)
  (code
    (content
      (ref)
      (ref)))
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (text)
  (linebreak)
  (parbreak)
  (text)
  (ref)
  (code
    (content
      (ref)))
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (text)
  (linebreak)
  (parbreak)
  (text)
  (code
    (content
      (ref)
      (ref)
      (ref)))
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (ref)
  (text)
  (linebreak)
  (text)
  (ref)
  (ref)
  (ref)
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/cite/cite-grouping-and-ordering
====================

@mcintosh_anxiety
@psychology25
@netwok
@issue201
@arrgh
@quark
@distress,
@glacier-melt
@issue201
@tolkien54
@sharing
@restful

#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "american-physics-society")


--------------------

(source_file
  (ref)
  (ref)
  (ref)
  (ref)
  (ref)
  (ref)
  (ref)
  (text)
  (ref)
  (ref)
  (ref)
  (ref)
  (ref)
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/cite/issue-785-cite-locate
====================

// Test citation in other introspection.
#set page(width: 180pt)
#set heading(numbering: "1.")

#outline(
  title: [Figures],
  target: figure.where(kind: image),
)

#pagebreak()

= Introduction <intro>
#figure(
  rect(height: 10pt),
  caption: [A pirate @arrgh in @intro],
)

#context [Citation @distress on page #here().page()]

#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "chicago-notes")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (content
                (text)
                (ref)
                (text)
                (ref))))))
      (parbreak)
      (code
        (context
          (content
            (text)
            (ref)
            (text)
            (code
              (call
                (field
                  (call
                    (ident)
                    (group))
                  (ident))
                (group))))))
      (parbreak)
      (code
        (show
          (ident)
          (none)))
      (code
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (string)))))
      (parbreak))))

====================
typst/cite/issue-1597-cite-footnote
====================

// Tests that when a citation footnote is pushed to next page, things still
// work as expected.
#set page(height: 60pt)
A

#footnote[@netwok]
#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (content
        (ref))))
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/cite/issue-2531-cite-show-set
====================

// Test show set rules on citations.
#show cite: set text(red)
A @netwok @arrgh.
B #cite(<netwok>) #cite(<arrgh>).

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (ref)
  (ref)
  (text)
  (text)
  (code
    (call
      (ident)
      (group
        (label))))
  (code
    (call
      (ident)
      (group
        (label))))
  (text)
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/cite/issue-3481-cite-location
====================

// The locator was cloned in the wrong location, leading to inconsistent
// citation group locations in the second footnote attempt.
#set page(height: 60pt)

// First page shouldn't be empty because otherwise we won't skip the first
// region which causes the bug in the first place.
#v(10pt)

// Everything moves to the second page because we want to keep the line and
// its footnotes together.
#footnote[@netwok \ A]

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (content
        (ref)
        (linebreak)
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/cite/issue-3699-cite-twice-et-al
====================

// Citing a second time showed all authors instead of "et al".
@mcintosh_anxiety \
@mcintosh_anxiety
#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "chicago-author-date")


--------------------

(source_file
  (comment)
  (ref)
  (linebreak)
  (ref)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/cite/issue-5503-cite-in-align
====================

// The two aligned elements should be displayed in separate lines.
#align(right)[@netwok]
#align(right)[b]

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (ref))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/cite/issue-5503-cite-group-interrupted-by-par-align
====================

// `par` and `align` are block-level and should interrupt a cite group
@netwok
@arrgh
#par(leading: 5em)[@netwok]
#par[@arrgh]
@netwok
@arrgh
#align(right)[@netwok]
@arrgh

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (ref)
  (ref)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (ref))))
  (code
    (call
      (ident)
      (content
        (ref))))
  (ref)
  (ref)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (ref))))
  (ref)
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/cite/cite-type-error-hint
====================

// Test hint for cast error from str to label
// Error: 7-15 expected label, found string
// Hint: 7-15 use `<netwok>` or `label("netwok")` to create a label
#cite("netwok")


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/cite/cite-type-error-hint-invalid-literal
====================

// Test hint for cast error from str to label
// Error: 7-17 expected label, found string
// Hint: 7-17 use `label("%@&#*!\\")` to create a label
#cite("%@&#*!\\")
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string
          (escape))))))

====================
typst/quote/quote-dir-author-pos
====================

// Text direction affects author positioning
And I quote: #quote(attribution: [René Descartes])[cogito, ergo sum].

#set text(lang: "ar")
#quote(attribution: [عالم])[مرحبًا]


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))
      (content
        (text))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))
      (content
        (text))))
  (parbreak))

====================
typst/quote/quote-dir-align
====================

// Text direction affects block alignment
#set quote(block: true)
#quote(attribution: [René Descartes])[cogito, ergo sum]

#set text(lang: "ar")
#quote(attribution: [عالم])[مرحبًا]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))
      (content
        (text))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))
      (content
        (text))))
  (parbreak))

====================
typst/quote/quote-block-spacing
====================

// Spacing with other blocks
#set quote(block: true)
#set text(8pt)

#lines(3)
#quote(lines(3))
#lines(3)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/quote/quote-inline
====================

// Inline citation
#set text(8pt)
#quote(attribution: <tolkien54>)[In a hole in the ground there lived a hobbit.]

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (label))))
      (content
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/quote/quote-cite-format-label-or-numeric
====================

// Citation-format: label or numeric
#set text(8pt)
#set quote(block: true)
#quote(attribution: <tolkien54>)[In a hole in the ground there lived a hobbit.]

#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "ieee")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (label))))
      (content
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/quote/quote-cite-format-note
====================

// Citation-format: note
#set text(8pt)
#set quote(block: true)
#quote(attribution: <tolkien54>)[In a hole in the ground there lived a hobbit.]

#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "chicago-notes")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (label))))
      (content
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/quote/quote-cite-format-author-date
====================

// Citation-format: author-date or author
#set text(8pt)
#set quote(block: true)
#quote(attribution: <tolkien54>)[In a hole in the ground there lived a hobbit.]

#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "apa")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (label))))
      (content
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/quote/quote-nesting
====================

// Test quote selection.
#set page(width: auto)
#set text(lang: "en")
=== EN
#quote[An apostroph'] \
#quote[A #quote[nested] quote] \
#quote[A #quote[very #quote[nested]] quote]

#set text(lang: "de")
=== DE
#quote[Satz mit Apostroph'] \
#quote[Satz mit #quote[Zitat]] \
#quote[A #quote[very #quote[nested]] quote]

#set smartquote(alternative: true)
=== DE Alternative
#quote[Satz mit Apostroph'] \
#quote[Satz mit #quote[Zitat]] \
#quote[A #quote[very #quote[nested]] quote]


--------------------

====================
typst/quote/quote-nesting-custom
====================

// With custom quotes.
#set smartquote(quotes: (single: ("<", ">"), double: ("(", ")")))
#quote[A #quote[nested] quote]
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (content
            (text)
            (quote))))
      (linebreak)
      (code
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text))))
            (text))))
      (linebreak)
      (code
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text)
                  (code
                    (call
                      (ident)
                      (content
                        (text)))))))
            (text))))
      (parbreak)
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))))))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (content
            (text)
            (quote))))
      (linebreak)
      (code
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text)))))))
      (linebreak)
      (code
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text)
                  (code
                    (call
                      (ident)
                      (content
                        (text)))))))
            (text))))
      (parbreak)
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (bool))))))))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (content
            (text)
            (quote))))
      (linebreak)
      (code
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text)))))))
      (linebreak)
      (code
        (call
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text)
                  (code
                    (call
                      (ident)
                      (content
                        (text)))))))
            (text))))
      (parbreak)
      (shorthand)
      (shorthand)
      (shorthand)
      (shorthand)
      (shorthand)
      (shorthand)
      (shorthand)
      (parbreak)
      (section
        (heading)
        (content
          (text)))
      (section
        (heading)
        (content
          (parbreak)
          (comment)
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (group
                          (string)
                          (string)))
                      (tagged
                        (ident)
                        (group
                          (string)
                          (string)))))))))
          (code
            (call
              (ident)
              (content
                (text)
                (code
                  (call
                    (ident)
                    (content
                      (text))))
                (text)))))))))

====================
typst/ref/ref-basic
====================

#set heading(numbering: "1.")

= Introduction <intro>
See @setup.

== Setup <setup>
As seen in @intro, we proceed.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (text)
      (ref)
      (text)
      (parbreak)
      (section
        (heading
          (text)
          (label))
        (content
          (text)
          (ref)
          (text)
          (parbreak))))))

====================
typst/ref/ref-label-missing
====================

// Error: 1-5 label `<foo>` does not exist in the document
@foo


--------------------

(source_file
  (comment)
  (ref)
  (parbreak))

====================
typst/ref/ref-label-duplicate
====================

= First <foo>
= Second <foo>

// Error: 1-5 label `<foo>` occurs multiple times in the document
@foo


--------------------

(source_file
  (section
    (heading
      (text)
      (label))
    (content))
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (ref)
      (parbreak))))

====================
typst/ref/ref-supplements
====================

#set heading(numbering: "1.", supplement: [Chapter])
#set math.equation(numbering: "(1)", supplement: [Eq.])

= Intro
#figure(
  image("/assets/images/cylinder.svg", height: 1cm),
  caption: [A cylinder.],
  supplement: "Fig",
) <fig1>

#figure(
  image("/assets/images/tiger.jpg", height: 1cm),
  caption: [A tiger.],
  supplement: "Tig",
) <fig2>

$ A = 1 $ <eq1>

#set math.equation(supplement: none)
$ A = 1 $ <eq2>

@fig1, @fig2, @eq1, (@eq2)

#set ref(supplement: none)
@fig1, @fig2, @eq1, @eq2


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (content
              (text)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (content
              (text)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (content
                (text)))
            (tagged
              (ident)
              (string)))))
      (label)
      (parbreak)
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (content
                (text)))
            (tagged
              (ident)
              (string)))))
      (label)
      (parbreak)
      (math
        (formula
          (letter)
          (symbol)
          (number)))
      (label)
      (parbreak)
      (code
        (set
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (none))))))
      (math
        (formula
          (letter)
          (symbol)
          (number)))
      (label)
      (parbreak)
      (ref)
      (text)
      (ref)
      (text)
      (ref)
      (text)
      (ref)
      (text)
      (parbreak)
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (none))))))
      (ref)
      (text)
      (ref)
      (text)
      (ref)
      (text)
      (ref)
      (parbreak))))

====================
typst/ref/ref-ambiguous
====================

// Test ambiguous reference.
= Introduction <arrgh>

// Error: 1-7 label occurs in the document and its bibliography
@arrgh
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (ref)
      (code
        (call
          (ident)
          (group
            (string))))
      (parbreak))))

====================
typst/ref/ref-form-page
====================

#set page(numbering: "1")

Text <text> is on #ref(<text>, form: "page").
See #ref(<setup>, form: "page").

#set page(supplement: [p.])

== Setup <setup>
Text seen on #ref(<text>, form: "page").
Text seen on #ref(<text>, form: "page", supplement: "Page").


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (label)
  (text)
  (code
    (call
      (ident)
      (group
        (label)
        (tagged
          (ident)
          (string)))))
  (text)
  (text)
  (code
    (call
      (ident)
      (group
        (label)
        (tagged
          (ident)
          (string)))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (text)
      (code
        (call
          (ident)
          (group
            (label)
            (tagged
              (ident)
              (string)))))
      (text)
      (text)
      (code
        (call
          (ident)
          (group
            (label)
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (string)))))
      (text)
      (parbreak))))

====================
typst/ref/ref-form-page-unambiguous
====================

// Test that page reference is not ambiguous.
#set page(numbering: "1")

= Introduction <arrgh>

#ref(<arrgh>, form: "page")
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (code
        (call
          (ident)
          (group
            (label)
            (tagged
              (ident)
              (string)))))
      (code
        (call
          (ident)
          (group
            (string))))
      (parbreak))))

====================
typst/ref/ref-form-page-bibliography
====================

// Error: 2-28 label `<quark>` does not exist in the document
#ref(<quark>, form: "page")
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (label)
        (tagged
          (ident)
          (string)))))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/ref/issue-4536-non-whitespace-before-ref
====================

// Test reference with non-whitespace before it.
#figure[] <1>
#test([(#ref(<1>))], [(@1)])
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content)))
  (label)
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (code
            (call
              (ident)
              (group
                (label))))
          (text))
        (content
          (text)
          (ref)
          (text))))))

====================
typst/heading/heading-basic
====================

// Different number of equals signs.

= Level 1
== Level 2
=== Level 3

// After three, it stops shrinking.
=========== Level 11


--------------------

(source_file
  (comment)
  (parbreak)
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (parbreak)
              (comment)
              (section
                (heading
                  (text))
                (content
                  (parbreak))))))))))

====================
typst/heading/heading-syntax-at-start
====================

// Heading vs. no heading.

// Parsed as headings if at start of the context.
/**/ = Level 1
#[== Level 2]
#box[=== Level 3]

// Not at the start of the context.
No = heading

// Escaped.
\= No heading


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (comment)
  (section
    (heading
      (text))
    (content
      (code
        (content
          (section
            (heading
              (text))
            (content))))
      (code
        (call
          (ident)
          (content
            (section
              (heading
                (text))
              (content)))))
      (parbreak)
      (comment)
      (text)
      (parbreak)
      (comment)
      (text
        (escape))
      (parbreak))))

====================
typst/heading/heading-block
====================

// Blocks can continue the heading.

= #[This
is
multiline.
]

= This
  is not.


--------------------

(source_file
  (comment)
  (parbreak)
  (section
    (heading
      (code
        (content
          (text)
          (text)
          (text))))
    (content
      (parbreak)))
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak))))

====================
typst/heading/heading-trailing-whitespace
====================

// Whether headings contain trailing whitespace with or without comments/labels.
// Labels are special cased to immediately end headings in the parser, but also
// #strike[have unique whitespace behavior] Now their behavior is consistent!

#let join(..xs) = xs.pos().join()
#let head(h) = heading(depth: 1, h)

// No whitespace.
#test(head[h], [= h])
#test(head[h], [= h/**/])
#test(head[h], [= h<a>])
#test(head[h], [= h/**/<b>])

// #strike[Label behaves differently than normal trailing space and comment.]
// Now they behave the same!
#test(join(head[h])[ ], [= h  ])
#test(join(head[h])[ ], [= h  /**/])
#test(join(head[h])[ ], [= h  <c>])

// Combinations.
#test(join(head[h])[ ][ ], [= h  /**/  ])
#test(join(head[h])[ ][ ], [= h  <d>  ])
#test(join(head[h])[ ], [= h  /**/<e>])
#test(join(head[h])[ ], [= h/**/  <f>])

// #strike[The first space attaches, but not the second] Now neither attaches!
#test(join(head(join[h]))[ ][ ], [= h  /**/  <g>])


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (field
          (call
            (field
              (ident)
              (ident))
            (group))
          (ident))
        (group))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (ident)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)))
        (content
          (section
            (heading
              (text))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)))
        (content
          (section
            (heading
              (text)
              (comment))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)))
        (content
          (section
            (heading
              (text)
              (label))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)))
        (content
          (section
            (heading
              (text)
              (comment)
              (label))
            (content))))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (call
                (ident)
                (content
                  (text)))))
          (content))
        (content
          (section
            (heading
              (text))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (call
                (ident)
                (content
                  (text)))))
          (content))
        (content
          (section
            (heading
              (text)
              (comment))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (call
                (ident)
                (content
                  (text)))))
          (content))
        (content
          (section
            (heading
              (text)
              (label))
            (content))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (ident)
              (group
                (call
                  (ident)
                  (content
                    (text)))))
            (content))
          (content))
        (content
          (section
            (heading
              (text)
              (comment))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (ident)
              (group
                (call
                  (ident)
                  (content
                    (text)))))
            (content))
          (content))
        (content
          (section
            (heading
              (text)
              (label))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (call
                (ident)
                (content
                  (text)))))
          (content))
        (content
          (section
            (heading
              (text)
              (comment)
              (label))
            (content))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (call
                (ident)
                (content
                  (text)))))
          (content))
        (content
          (section
            (heading
              (text)
              (comment)
              (label))
            (content))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (call
                      (ident)
                      (content
                        (text)))))))
            (content))
          (content))
        (content
          (section
            (heading
              (text)
              (comment)
              (label))
            (content))))))
  (parbreak))

====================
typst/heading/heading-leading-whitespace
====================

// Test that leading whitespace and comments don't matter.
#test[= h][=        h]
#test[= h][=   /**/  /**/   h]
#test[= h][=   /*
comment spans lines
*/   h]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (content
          (section
            (heading
              (text))
            (content))))
      (content
        (section
          (heading
            (text))
          (content)))))
  (code
    (call
      (call
        (ident)
        (content
          (section
            (heading
              (text))
            (content))))
      (content
        (section
          (heading
            (comment)
            (comment)
            (text))
          (content)))))
  (code
    (call
      (call
        (ident)
        (content
          (section
            (heading
              (text))
            (content))))
      (content
        (section
          (heading
            (comment)
            (text))
          (content)))))
  (parbreak))

====================
typst/heading/heading-show-where
====================

// Test styling.
#show heading.where(level: 5): it => block(
  text(font: "Roboto", fill: eastern, it.body + [!])
)

= Heading
===== Heading 🌍
#heading(level: 5)[Heading]


--------------------

====================
typst/heading/heading-offset
====================

// Test setting the starting offset.
#set heading(numbering: "1.1")
#show heading.where(level: 2): set text(blue)
= Level 1

#heading(depth: 1)[We're twins]
#heading(level: 1)[We're twins]

== Real level 2

#set heading(offset: 1)
= Fake level 2
== Fake level 3


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (lambda
        (ident)
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (ident))
                (add
                  (field
                    (ident)
                    (ident))
                  (content
                    (text))))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (code
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (text))))
          (parbreak)
          (shorthand)
          (shorthand)
          (shorthand)
          (shorthand)
          (shorthand)
          (shorthand)
          (shorthand)
          (parbreak)
          (section
            (heading)
            (content
              (text)))
          (section
            (heading)
            (content
              (parbreak)
              (comment)
              (code
                (set
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (string))))))
              (code
                (show
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (tagged
                        (ident)
                        (number))))
                  (set
                    (call
                      (ident)
                      (group
                        (ident))))))))))))
  (section
    (heading
      (text))
    (content
      (parbreak)
      (code
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (quote)
            (text))))
      (code
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (quote)
            (text))))
      (parbreak)
      (section
        (heading
          (text))
        (content
          (parbreak)
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number))))))))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (parbreak))))))

====================
typst/heading/heading-offset-and-level
====================

// Passing level directly still overrides all other set values
#set heading(numbering: "1.1", offset: 1)
#heading(level: 1)[Still level 1]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (content
        (text))))
  (parbreak))

====================
typst/heading/heading-syntax-edge-cases
====================

// Edge cases.
#set heading(numbering: "1.")
=
Not in heading
=Nope


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (section
    (heading)
    (content
      (text)
      (text)
      (parbreak))))

====================
typst/heading/heading-numbering-hint
====================

= Heading <intro>

// Error: 1:19-1:25 cannot reference heading without numbering
// Hint: 1:19-1:25 you can enable heading numbering with `#set heading(numbering: "1.")`
Cannot be used as @intro


--------------------

(source_file
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (comment)
      (text)
      (ref)
      (parbreak))))

====================
typst/heading/heading-html-basic
====================

// level 1 => h2
// ...
// level 5 => h6
// level 6 => div with role=heading and aria-level=7
//  ...

= Level 1
== Level 2
=== Level 3
==== Level 4
===== Level 5
// Warning: 1-15 heading of level 6 was transformed to <div role="heading" aria-level="7">, which is not supported by all assistive technology
// Hint: 1-15 HTML only supports <h1> to <h6>, not <h7>
// Hint: 1-15 you may want to restructure your document so that it doesn't contain deep headings
====== Level 6
// Warning: 1-16 heading of level 7 was transformed to <div role="heading" aria-level="8">, which is not supported by all assistive technology
// Hint: 1-16 HTML only supports <h1> to <h6>, not <h8>
// Hint: 1-16 you may want to restructure your document so that it doesn't contain deep headings
======= Level 7
--------------------

====================
typst/line/line-basic
====================

#set page(height: 60pt)
#box({
  set line(stroke: 0.75pt)
  place(line(end: (0.4em, 0pt)))
  place(line(start: (0pt, 0.4em), end: (0pt, 0pt)))
  line(end: (0.6em, 0.6em))
}) Hello #box(line(length: 1cm))!

#line(end: (70%, 50%))


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (parbreak)
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (section
                (heading
                  (text))
                (content
                  (section
                    (heading
                      (text))
                    (content
                      (comment)
                      (comment)
                      (comment)
                      (section
                        (heading
                          (text))
                        (content
                          (comment)
                          (comment)
                          (comment)
                          (section
                            (heading
                              (text))
                            (content
                              (shorthand)
                              (shorthand)
                              (shorthand)
                              (shorthand)
                              (shorthand)
                              (shorthand)
                              (shorthand)
                              (parbreak)
                              (section
                                (heading)
                                (content
                                  (text)))
                              (section
                                (heading)
                                (content
                                  (parbreak)
                                  (code
                                    (set
                                      (call
                                        (ident)
                                        (group
                                          (tagged
                                            (ident)
                                            (number
                                              (unit)))))))
                                  (code
                                    (call
                                      (ident)
                                      (group
                                        (block
                                          (set
                                            (call
                                              (ident)
                                              (group
                                                (tagged
                                                  (ident)
                                                  (number
                                                    (unit))))))
                                          (call
                                            (ident)
                                            (group
                                              (call
                                                (ident)
                                                (group
                                                  (tagged
                                                    (ident)
                                                    (group
                                                      (number
                                                        (unit))
                                                      (number
                                                        (unit))))))))
                                          (call
                                            (ident)
                                            (group
                                              (call
                                                (ident)
                                                (group
                                                  (tagged
                                                    (ident)
                                                    (group
                                                      (number
                                                        (unit))
                                                      (number
                                                        (unit))))
                                                  (tagged
                                                    (ident)
                                                    (group
                                                      (number
                                                        (unit))
                                                      (number
                                                        (unit))))))))
                                          (call
                                            (ident)
                                            (group
                                              (tagged
                                                (ident)
                                                (group
                                                  (number
                                                    (unit))
                                                  (number
                                                    (unit))))))))))
                                  (text)
                                  (code
                                    (call
                                      (ident)
                                      (group
                                        (call
                                          (ident)
                                          (group
                                            (tagged
                                              (ident)
                                              (number
                                                (unit))))))))
                                  (text)
                                  (parbreak)
                                  (code
                                    (call
                                      (ident)
                                      (group
                                        (tagged
                                          (ident)
                                          (group
                                            (number
                                              (unit))
                                            (number
                                              (unit)))))))
                                  (parbreak))))))))))))))))))

====================
typst/line/line-positioning
====================

// Test the angle argument and positioning.

#set page(fill: rgb("0B1026"))
#set line(stroke: white)

#let star(size, ..args) = box(width: size, height: size)[
  #set text(spacing: 0%)
  #set line(..args)
  #set align(left)
  #v(30%)
  #place(line(length: +30%, start: (09.0%, 02%)))
  #place(line(length: +30%, start: (38.7%, 02%), angle: -72deg))
  #place(line(length: +30%, start: (57.5%, 02%), angle: 252deg))
  #place(line(length: +30%, start: (57.3%, 02%)))
  #place(line(length: -30%, start: (88.0%, 02%), angle: -36deg))
  #place(line(length: +30%, start: (73.3%, 48%), angle: 252deg))
  #place(line(length: -30%, start: (73.5%, 48%), angle: 36deg))
  #place(line(length: +30%, start: (25.4%, 48%), angle: -36deg))
  #place(line(length: +30%, start: (25.6%, 48%), angle: -72deg))
  #place(line(length: +32%, start: (8.50%, 02%), angle: 34deg))
]

#align(center, grid(
  columns: 3,
  column-gutter: 10pt,
  ..((star(20pt, stroke: 0.5pt),) * 9)
))


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (elude
            (ident))))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (code
            (set
              (call
                (ident)
                (group
                  (elude
                    (ident))))))
          (code
            (set
              (call
                (ident)
                (group
                  (ident)))))
          (code
            (call
              (ident)
              (group
                (number
                  (unit)))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit)))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit)))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit)))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit)))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit)))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit)))))))))
          (code
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number
                (unit)))
            (elude
              (group
                (mul
                  (group
                    (call
                      (ident)
                      (group
                        (number
                          (unit))
                        (tagged
                          (ident)
                          (number
                            (unit))))))
                  (number)))))))))
  (parbreak))

====================
typst/line/line-stroke
====================

// Some simple test lines
#line(length: 60pt, stroke: red)
#v(3pt)
#line(length: 60pt, stroke: 2pt)
#v(3pt)
#line(length: 60pt, stroke: blue + 1.5pt)
#v(3pt)
#line(length: 60pt, stroke: (paint: red, thickness: 1pt, dash: "dashed"))
#v(3pt)
#line(length: 60pt, stroke: (paint: red, thickness: 4pt, cap: "round"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/line/line-stroke-set
====================

// Set rules with stroke
#set line(stroke: (paint: red, thickness: 1pt, cap: "butt", dash: "dash-dotted"))
#line(length: 60pt)
#v(3pt)
#line(length: 60pt, stroke: blue)
#v(3pt)
#line(length: 60pt, stroke: (dash: none))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (string))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (none)))))))
  (parbreak))

====================
typst/line/line-stroke-dash
====================

// Dashing
#line(length: 60pt, stroke: (paint: red, thickness: 1pt, dash: ("dot", 1pt)))
#v(3pt)
#line(length: 60pt, stroke: (paint: red, thickness: 1pt, dash: ("dot", 1pt, 4pt, 2pt)))
#v(3pt)
#line(length: 60pt, stroke: (paint: red, thickness: 1pt, dash: (array: ("dot", 1pt, 4pt, 2pt), phase: 5pt)))
#v(3pt)
#line(length: 60pt, stroke: (paint: red, thickness: 1pt, dash: ()))
#v(3pt)
#line(length: 60pt, stroke: (paint: red, thickness: 1pt, dash: (1pt, 3pt, 9pt)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (string)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (string)
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (group
                    (string)
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/line/line-stroke-field-typo
====================

// Error: 29-56 unexpected key "thicknes", valid keys are "paint", "thickness", "cap", "join", "dash", and "miter-limit"
#line(length: 60pt, stroke: (paint: red, thicknes: 1pt))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/line/line-stroke-bad-dash-kind
====================

// Error: 29-55 expected "solid", "dotted", "densely-dotted", "loosely-dotted", "dashed", "densely-dashed", "loosely-dashed", "dash-dotted", "densely-dash-dotted", "loosely-dash-dotted", array, dictionary, none, or auto
#line(length: 60pt, stroke: (paint: red, dash: "dash"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/line/line-bad-point-array
====================

// Test errors.

// Error: 12-19 point array must contain exactly two entries
#line(end: (50pt,))


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit)))))))
  (parbreak))

====================
typst/line/line-bad-point-component-type
====================

// Error: 14-26 expected relative length, found angle
#line(start: (3deg, 10pt), length: 5cm)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/line/line-infinite-length
====================

// Error: 2-54 cannot create line with infinite length
#line(start: (0pt, 0pt), end: (float.inf * 1pt, 0pt))
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (mul
              (field
                (ident)
                (ident))
              (number
                (unit)))
            (number
              (unit))))))))

====================
typst/color/color-mix
====================

// Compare both ways.
#test-repr(rgb(0%, 30.2%, 70.2%), rgb("004db3"))

// Alpha channel.
#test(rgb(255, 0, 0, 50%), rgb("ff000080"))

// Test color modification methods.
#test(rgb(25, 35, 45).lighten(10%), rgb(48, 57, 66))
#test(rgb(40, 30, 20).darken(10%), rgb(36, 27, 18))
#test(rgb("#133337").negate(space: rgb), rgb(236, 204, 200))
#test(white.lighten(100%), white)

// Color mixing, in Oklab space by default.
#test(rgb(color.mix(rgb("#ff0000"), rgb("#00ff00"))), rgb("#d0a800"))
#test(rgb(color.mix(rgb("#ff0000"), rgb("#00ff00"), space: oklab)), rgb("#d0a800"))
#test(rgb(color.mix(rgb("#ff0000"), rgb("#00ff00"), space: rgb)), rgb("#808000"))

#test(rgb(color.mix(red, green, blue)), rgb("#909282"))
#test(rgb(color.mix(red, blue, green)), rgb("#909282"))
#test(rgb(color.mix(blue, red, green)), rgb("#909282"))

// Mix with weights.
#test(rgb(color.mix((red, 50%), (green, 50%))), rgb("#c0983b"))
#test(rgb(color.mix((red, 0.5), (green, 0.5))), rgb("#c0983b"))
#test(rgb(color.mix((red, 5), (green, 5))), rgb("#c0983b"))
#test(rgb(color.mix((green, 5), (white, 0), (red, 5))), rgb("#c0983b"))
#test(color.mix((rgb("#aaff00"), 25%), (rgb("#aa00ff"), 75%), space: rgb), rgb("#aa40bf"))
#test(color.mix((rgb("#aaff00"), 50%), (rgb("#aa00ff"), 50%), space: rgb), rgb("#aa8080"))
#test(color.mix((rgb("#aaff00"), 75%), (rgb("#aa00ff"), 25%), space: rgb), rgb("#aabf40"))

// Mix in hue-based space.
#test(rgb(color.mix(red, blue, space: color.hsl)), rgb("#c408ff"))
#test(rgb(color.mix((red, 50%), (blue, 100%), space: color.hsl)), rgb("#5100f8"))
// Error: 6-51 cannot mix more than two colors in a hue-based space
#rgb(color.mix(red, blue, white, space: color.hsl))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (number)
            (number
              (unit))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))))
        (ident))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (string)))
                (call
                  (ident)
                  (group
                    (string)))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (string)))
                (call
                  (ident)
                  (group
                    (string)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (string)))
                (call
                  (ident)
                  (group
                    (string)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (ident)
                  (number
                    (unit)))
                (group
                  (ident)
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (ident)
                  (number))
                (group
                  (ident)
                  (number))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (ident)
                  (number))
                (group
                  (ident)
                  (number))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (ident)
                  (number))
                (group
                  (ident)
                  (number))
                (group
                  (ident)
                  (number))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (call
                (ident)
                (group
                  (string)))
              (number
                (unit)))
            (group
              (call
                (ident)
                (group
                  (string)))
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (call
                (ident)
                (group
                  (string)))
              (number
                (unit)))
            (group
              (call
                (ident)
                (group
                  (string)))
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (call
                (ident)
                (group
                  (string)))
              (number
                (unit)))
            (group
              (call
                (ident)
                (group
                  (string)))
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (ident)
                  (number
                    (unit)))
                (group
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))))
        (call
          (ident)
          (group
            (string))))))
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)
            (ident)
            (ident)
            (tagged
              (ident)
              (field
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/color/color-conversion
====================

// Test color conversion method kinds
#test(rgb(rgb(10, 20, 30)).space(), rgb)
#test(color.linear-rgb(rgb(10, 20, 30)).space(), color.linear-rgb)
#test(oklab(rgb(10, 20, 30)).space(), oklab)
#test(oklch(rgb(10, 20, 30)).space(), oklch)
#test(color.hsl(rgb(10, 20, 30)).space(), color.hsl)
#test(color.hsv(rgb(10, 20, 30)).space(), color.hsv)
#test(cmyk(rgb(10, 20, 30)).space(), cmyk)
#test(luma(rgb(10, 20, 30)).space(), luma)

#test(rgb(color.linear-rgb(10, 20, 30)).space(), rgb)
#test(color.linear-rgb(color.linear-rgb(10, 20, 30)).space(), color.linear-rgb)
#test(oklab(color.linear-rgb(10, 20, 30)).space(), oklab)
#test(oklch(color.linear-rgb(10, 20, 30)).space(), oklch)
#test(color.hsl(color.linear-rgb(10, 20, 30)).space(), color.hsl)
#test(color.hsv(color.linear-rgb(10, 20, 30)).space(), color.hsv)
#test(cmyk(color.linear-rgb(10, 20, 30)).space(), cmyk)
#test(luma(color.linear-rgb(10, 20, 30)).space(), luma)

#test(rgb(oklab(10%, 20%, 30%)).space(), rgb)
#test(color.linear-rgb(oklab(10%, 20%, 30%)).space(), color.linear-rgb)
#test(oklab(oklab(10%, 20%, 30%)).space(), oklab)
#test(oklch(oklab(10%, 20%, 30%)).space(), oklch)
#test(color.hsl(oklab(10%, 20%, 30%)).space(), color.hsl)
#test(color.hsv(oklab(10%, 20%, 30%)).space(), color.hsv)
#test(cmyk(oklab(10%, 20%, 30%)).space(), cmyk)
#test(luma(oklab(10%, 20%, 30%)).space(), luma)

#test(rgb(oklch(60%, 40%, 0deg)).space(), rgb)
#test(color.linear-rgb(oklch(60%, 40%, 0deg)).space(), color.linear-rgb)
#test(oklab(oklch(60%, 40%, 0deg)).space(), oklab)
#test(oklch(oklch(60%, 40%, 0deg)).space(), oklch)
#test(color.hsl(oklch(60%, 40%, 0deg)).space(), color.hsl)
#test(color.hsv(oklch(60%, 40%, 0deg)).space(), color.hsv)
#test(cmyk(oklch(60%, 40%, 0deg)).space(), cmyk)
#test(luma(oklch(60%, 40%, 0deg)).space(), luma)

#test(rgb(color.hsl(10deg, 20%, 30%)).space(), rgb)
#test(color.linear-rgb(color.hsl(10deg, 20%, 30%)).space(), color.linear-rgb)
#test(oklab(color.hsl(10deg, 20%, 30%)).space(), oklab)
#test(oklch(color.hsl(10deg, 20%, 30%)).space(), oklch)
#test(color.hsl(color.hsl(10deg, 20%, 30%)).space(), color.hsl)
#test(color.hsv(color.hsl(10deg, 20%, 30%)).space(), color.hsv)
#test(cmyk(color.hsl(10deg, 20%, 30%)).space(), cmyk)
#test(luma(color.hsl(10deg, 20%, 30%)).space(), luma)

#test(rgb(color.hsv(10deg, 20%, 30%)).space(), rgb)
#test(color.linear-rgb(color.hsv(10deg, 20%, 30%)).space(), color.linear-rgb)
#test(oklab(color.hsv(10deg, 20%, 30%)).space(), oklab)
#test(oklch(color.hsv(10deg, 20%, 30%)).space(), oklch)
#test(color.hsl(color.hsv(10deg, 20%, 30%)).space(), color.hsl)
#test(color.hsv(color.hsv(10deg, 20%, 30%)).space(), color.hsv)
#test(cmyk(color.hsv(10deg, 20%, 30%)).space(), cmyk)
#test(luma(color.hsv(10deg, 20%, 30%)).space(), luma)

#test(rgb(cmyk(10%, 20%, 30%, 40%)).space(), rgb)
#test(color.linear-rgb(cmyk(10%, 20%, 30%, 40%)).space(), color.linear-rgb)
#test(oklab(cmyk(10%, 20%, 30%, 40%)).space(), oklab)
#test(oklch(cmyk(10%, 20%, 30%, 40%)).space(), oklch)
#test(color.hsl(cmyk(10%, 20%, 30%, 40%)).space(), color.hsl)
#test(color.hsv(cmyk(10%, 20%, 30%, 40%)).space(), color.hsv)
#test(cmyk(cmyk(10%, 20%, 30%, 40%)).space(), cmyk)
#test(luma(cmyk(10%, 20%, 30%, 40%)).space(), luma)

#test(rgb(luma(10%)).space(), rgb)
#test(color.linear-rgb(luma(10%)).space(), color.linear-rgb)
#test(oklab(luma(10%)).space(), oklab)
#test(oklch(luma(10%)).space(), oklch)
#test(color.hsl(luma(10%)).space(), color.hsl)
#test(color.hsv(luma(10%)).space(), color.hsv)
#test(cmyk(luma(10%)).space(), cmyk)
#test(luma(luma(10%)).space(), luma)

#test(rgb(1, 2, 3).to-hex(), "#010203")
#test(rgb(1, 2, 3, 4).to-hex(), "#01020304")
#test(luma(40).to-hex(), "#282828")
#test-repr(cmyk(4%, 5%, 6%, 7%).to-hex(), "#e0dcda")
#test-repr(rgb(cmyk(4%, 5%, 6%, 7%)), rgb(87.84%, 86.27%, 85.49%, 100%))
#test-repr(rgb(luma(40%)), rgb(40%, 40%, 40%))
#test-repr(cmyk(luma(40)), cmyk(63.24%, 57.33%, 56.49%, 75.88%))
#test-repr(cmyk(rgb(1, 2, 3)), cmyk(66.67%, 33.33%, 0%, 98.82%))
#test-repr(luma(rgb(1, 2, 3)), luma(0.73%))
#test-repr(color.hsl(luma(40)), color.hsl(0deg, 0%, 15.69%))
#test-repr(color.hsv(luma(40)), color.hsv(0deg, 0%, 15.69%))
#test-repr(color.linear-rgb(luma(40)), color.linear-rgb(2.12%, 2.12%, 2.12%))
#test-repr(color.linear-rgb(rgb(1, 2, 3)), color.linear-rgb(0.03%, 0.06%, 0.09%))
#test-repr(color.hsl(rgb(1, 2, 3)), color.hsl(-150deg, 50%, 0.78%))
#test-repr(color.hsv(rgb(1, 2, 3)), color.hsv(-150deg, 66.67%, 1.18%))
#test-repr(oklab(luma(40)), oklab(27.68%, 0.0, 0.0, 100%))
#test-repr(oklab(rgb(1, 2, 3)), oklab(8.23%, -0.004, -0.007, 100%))
#test-repr(oklch(oklab(40%, 0.2, 0.2)), oklch(40%, 0.283, 45deg, 100%))
#test-repr(oklch(luma(40)), oklch(27.68%, 0.0, 72.49deg, 100%))
#test-repr(oklch(rgb(1, 2, 3)), oklch(8.23%, 0.008, 240.75deg, 100%))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)
                    (number)))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (ident))
          (group))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)
                (number)
                (number)))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit))))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number
                  (unit))))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number
                (unit)))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number
                (unit)))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number)
            (number)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (sign
              (number))
            (sign
              (number))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number
                  (unit))
                (number)
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number)
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number)
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)
                (number)
                (number)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number)
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/color/color-spaces
====================

// The different color spaces
#let col = rgb(50%, 64%, 16%)
#box(square(size: 9pt, fill: col))
#box(square(size: 9pt, fill: rgb(col)))
#box(square(size: 9pt, fill: oklab(col)))
#box(square(size: 9pt, fill: oklch(col)))
#box(square(size: 9pt, fill: luma(col)))
#box(square(size: 9pt, fill: cmyk(col)))
#box(square(size: 9pt, fill: color.linear-rgb(col)))
#box(square(size: 9pt, fill: color.hsl(col)))
#box(square(size: 9pt, fill: color.hsv(col)))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)))))))))
  (parbreak))

====================
typst/color/color-space
====================

// Test color kind method.
#test(rgb(1, 2, 3, 4).space(), rgb)
#test(cmyk(4%, 5%, 6%, 7%).space(), cmyk)
#test(luma(40).space(), luma)
#test(rgb(1, 2, 3, 4).space() != luma, true)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)
                (number)
                (number)))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (field
              (call
                (ident)
                (group
                  (number)
                  (number)
                  (number)
                  (number)))
              (ident))
            (group))
          (ident))
        (bool))))
  (parbreak))

====================
typst/color/color-components
====================

// Test color '.components()' without conversions

#let test-components(col, ref, has-alpha: true) = {
  // Perform an approximate scalar comparison.
  let are-equal((a, b)) = {
    let to-float(x) = if type(x) == angle { x.rad() } else { float(x) }
    let epsilon = 1e-4 // The maximum error between both numbers
    test(type(a), type(b))
    calc.abs(to-float(a) - to-float(b)) < epsilon
  }

  let ref-without-alpha = if has-alpha { ref.slice(0, -1) } else { ref }
  test(col.components().len(), ref.len())
  assert(col.components().zip(ref).all(are-equal))
  assert(col.components(alpha: false).zip(ref-without-alpha).all(are-equal))
}
#test-components(rgb(1, 2, 3, 4), (0.39%, 0.78%, 1.18%, 1.57%))
#test-components(luma(40), (15.69%, 100%))
#test-components(luma(40, 50%), (15.69%, 50%))
#test-components(cmyk(4%, 5%, 6%, 7%), (4%, 5%, 6%, 7%), has-alpha: false)
#test-components(oklab(10%, 0.2, 0.4), (10%, 0.2, 0.4, 100%))
#test-components(oklch(10%, 0.2, 90deg), (10%, 0.2, 90deg, 100%))
#test-components(oklab(10%, 50%, 200%), (10%, 0.2, 0.8, 100%))
#test-components(oklch(10%, 50%, 90deg), (10%, 0.2, 90deg, 100%))
#test-components(color.linear-rgb(10%, 20%, 30%), (10%, 20%, 30%, 100%))
#test-components(color.hsv(10deg, 20%, 30%), (10deg, 20%, 30%, 100%))
#test-components(color.hsl(10deg, 20%, 30%), (10deg, 20%, 30%, 100%))


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)
          (tagged
            (ident)
            (bool))))
      (block
        (comment)
        (let
          (call
            (ident)
            (group
              (group
                (ident)
                (ident))))
          (block
            (let
              (call
                (ident)
                (group
                  (ident)))
              (branch
                (cmp
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (block
                  (call
                    (field
                      (ident)
                      (ident))
                    (group)))
                (block
                  (call
                    (ident)
                    (group
                      (ident))))))
            (let
              (ident)
              (number))
            (comment)
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (ident)))
                (call
                  (ident)
                  (group
                    (ident)))))
            (cmp
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (sub
                    (call
                      (ident)
                      (group
                        (ident)))
                    (call
                      (ident)
                      (group
                        (ident))))))
              (ident))))
        (let
          (ident)
          (branch
            (ident)
            (block
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (number)
                  (sign
                    (number)))))
            (block
              (ident))))
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group))
                (ident))
              (group))
            (call
              (field
                (ident)
                (ident))
              (group))))
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))
                    (ident))
                  (group
                    (ident)))
                (ident))
              (group
                (ident)))))
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (bool))))
                    (ident))
                  (group
                    (ident)))
                (ident))
              (group
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (number)
            (number)))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number
              (unit))))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit)))
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number
              (unit))
            (number)
            (number)))
        (group
          (number
            (unit))
          (number)
          (number)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number
              (unit))
            (number)
            (number
              (unit))))
        (group
          (number
            (unit))
          (number)
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (group
          (number
            (unit))
          (number)
          (number)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (group
          (number
            (unit))
          (number)
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (parbreak))

====================
typst/color/color-luma
====================

// Test gray color conversion.
#stack(dir: ltr, rect(fill: luma(0)), rect(fill: luma(80%)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/color/color-rgb-out-of-range
====================

// Error for values that are out of range.
// Error: 11-14 number must be between 0 and 255
#test(rgb(-30, 15, 50))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))
            (number)
            (number))))))
  (parbreak))

====================
typst/color/color-rgb-bad-string
====================

// Error: 6-11 color string contains non-hexadecimal letters
#rgb("lol")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/color/color-rgb-missing-argument-red
====================

// Error: 2-7 missing argument: red component
#rgb()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/color/color-rgb-missing-argument-blue
====================

// Error: 2-11 missing argument: blue component
#rgb(0, 1)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/color/color-rgb-bad-type
====================

// Error: 21-26 expected integer or ratio, found boolean
#rgb(10%, 20%, 30%, false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (bool))))
  (parbreak))

====================
typst/color/color-luma-unexpected-argument
====================

// Error: 10-20 unexpected argument: key
#luma(1, key: "val")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/color/color-mix-bad-amount-type
====================

// Error: 12-24 expected float or ratio, found string
// Error: 26-39 expected float or ratio, found string
#color.mix((red, "yes"), (green, "no"), (green, 10%))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (group
          (ident)
          (string))
        (group
          (ident)
          (string))
        (group
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/color/color-mix-bad-value
====================

// Error: 12-23 expected a color or color-weight pair
#color.mix((red, 1, 2))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (group
          (ident)
          (number)
          (number)))))
  (parbreak))

====================
typst/color/color-mix-bad-space-type
====================

// Error: 31-38 expected `rgb`, `luma`, `cmyk`, `oklab`, `oklch`, `color.linear-rgb`, `color.hsl`, or `color.hsv`, found string
#color.mix(red, green, space: "cyber")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (ident)
        (ident)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/color/color-mix-bad-space-value-1
====================

// Error: 31-36 expected `rgb`, `luma`, `cmyk`, `oklab`, `oklch`, `color.linear-rgb`, `color.hsl`, or `color.hsv`
#color.mix(red, green, space: image)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (ident)
        (ident)
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/color/color-mix-bad-space-value-2
====================

// Error: 31-41 expected `rgb`, `luma`, `cmyk`, `oklab`, `oklch`, `color.linear-rgb`, `color.hsl`, or `color.hsv`
#color.mix(red, green, space: calc.round)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (ident)
        (ident)
        (tagged
          (ident)
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/color/color-cmyk-ops
====================

// Test CMYK color conversion.
#let c = cmyk(50%, 64%, 16%, 17%)
#stack(
  dir: ltr,
  spacing: 1fr,
  rect(width: 1cm, fill: cmyk(69%, 11%, 69%, 41%)),
  rect(width: 1cm, fill: c),
  rect(width: 1cm, fill: c.negate(space: cmyk)),
)

#for x in range(0, 11) {
  box(square(size: 9pt, fill: c.lighten(x * 10%)))
}
#for x in range(0, 11) {
  box(square(size: 9pt, fill: c.darken(x * 10%)))
}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))))))
  (parbreak)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak))

====================
typst/color/color-outside-srgb-gamut
====================

// Colors outside the sRGB gamut.
#box(square(size: 9pt, fill: oklab(90%, -0.2, -0.1)))
#box(square(size: 9pt, fill: oklch(50%, 0.5, 0deg)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (number
                    (unit))
                  (sign
                    (number))
                  (sign
                    (number))))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (number
                    (unit))
                  (number)
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/color/color-rotate-hue
====================

// Test hue rotation
#let col = rgb(50%, 64%, 16%)

// Oklch
#for x in range(0, 11) {
  box(square(size: 9pt, fill: rgb(col).rotate(x * 36deg)))
}

// HSL
#for x in range(0, 11) {
  box(square(size: 9pt, fill: rgb(col).rotate(x * 36deg, space: color.hsl)))
}

// HSV
#for x in range(0, 11) {
  box(square(size: 9pt, fill: rgb(col).rotate(x * 36deg, space: color.hsv)))
}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (ident)))
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (ident)))
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))
                      (tagged
                        (ident)
                        (field
                          (ident)
                          (ident)))))))))))))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (ident)))
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))
                      (tagged
                        (ident)
                        (field
                          (ident)
                          (ident)))))))))))))
  (parbreak))

====================
typst/color/color-saturation
====================

// Test saturation
#let col = color.hsl(180deg, 0%, 50%)
#for x in range(0, 11) {
  box(square(size: 9pt, fill: col.saturate(x * 10%)))
}

#let col = color.hsl(180deg, 100%, 50%)
#for x in range(0, 11) {
  box(square(size: 9pt, fill: col.desaturate(x * 10%)))
}

#let col = color.hsv(180deg, 0%, 50%)
#for x in range(0, 11) {
  box(square(size: 9pt, fill: col.saturate(x * 10%)))
}

#let col = color.hsv(180deg, 100%, 50%)
#for x in range(0, 11) {
  box(square(size: 9pt, fill: col.desaturate(x * 10%)))
}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (mul
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak))

====================
typst/color/color-luma-ops
====================

// Test gray color modification.
#test-repr(luma(20%).lighten(50%), luma(60%))
#test-repr(luma(80%).darken(20%), luma(64%))
#test-repr(luma(80%).negate(space: luma), luma(20%))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))))
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (parbreak))

====================
typst/color/color-transparentize
====================

// Test alpha modification.
#test-repr(luma(100%, 100%).transparentize(50%), luma(100%, 50%))
#test-repr(luma(100%, 100%).transparentize(75%), luma(100%, 25%))
#test-repr(luma(100%, 50%).transparentize(50%), luma(100%, 25%))
#test-repr(luma(100%, 10%).transparentize(250%), luma(100%, 0%))
#test-repr(luma(100%, 40%).transparentize(-50%), luma(100%, 70%))
#test-repr(luma(100%, 0%).transparentize(-100%), luma(100%, 100%))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (sign
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (sign
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/color/color-opacify
====================

#test-repr(luma(100%, 50%).opacify(50%), luma(100%, 75%))
#test-repr(luma(100%, 20%).opacify(100%), luma(100%, 100%))
#test-repr(luma(100%, 100%).opacify(250%), luma(100%, 100%))
#test-repr(luma(100%, 50%).opacify(-50%), luma(100%, 25%))
#test-repr(luma(100%, 0%).opacify(0%), luma(100%, 0%))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (sign
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/color/issue-color-mix-luma
====================

// When mixing luma colors, we accidentally used the wrong component.
#rect(fill: gradient.linear(black, silver, space: luma))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (ident)
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/color/issue-4361-transparency-leak
====================

// Ensure that transparency doesn't leak from shapes to images in PDF. The PNG
// test doesn't validate it, but at least we can discover regressions on the PDF
// output with a PDF comparison script.
#rect(fill: red.transparentize(50%))
#image("/assets/images/tiger.jpg", width: 45pt)
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (number
            (unit)))))))

====================
typst/polygon/polygon
====================

#set page(width: 50pt)
#set polygon(stroke: 0.75pt, fill: blue)

// These are not visible, but should also not give an error
#polygon()
#polygon((0em, 0pt))
#polygon((0pt, 0pt), (10pt, 0pt))
#polygon.regular(size: 0pt, vertices: 9)

#polygon((5pt, 0pt), (0pt, 10pt), (10pt, 10pt))
#polygon(
  (0pt, 0pt), (5pt, 5pt), (10pt, 0pt),
  (15pt, 5pt),
  (5pt, 10pt)
)
#polygon(stroke: none, (5pt, 0pt), (0pt, 10pt), (10pt, 10pt))
#polygon(stroke: 3pt, fill: none, (5pt, 0pt), (0pt, 10pt), (10pt, 10pt))

// Relative size
#polygon((0pt, 0pt), (100%, 5pt), (50%, 10pt))

// Antiparallelogram
#polygon((0pt, 5pt), (5pt, 0pt), (0pt, 10pt), (5pt, 15pt))

// Self-intersections
#polygon((0pt, 10pt), (30pt, 20pt), (0pt, 30pt), (20pt, 0pt), (20pt, 35pt))
#polygon(fill-rule: "non-zero", (0pt, 10pt), (30pt, 20pt), (0pt, 30pt), (20pt, 0pt), (20pt, 35pt))
#polygon(fill-rule: "even-odd", (0pt, 10pt), (30pt, 20pt), (0pt, 30pt), (20pt, 0pt), (20pt, 35pt))

// Regular polygon; should have equal side lengths
#for k in range(3, 9) {polygon.regular(size: 30pt, vertices: k,)}


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (none))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/polygon/polygon-line-join
====================

// Line joins
#stack(
  dir: ltr,
  spacing: 1em,
  polygon(stroke: (thickness: 4pt, paint: blue, join: "round"),
    (0pt, 20pt), (15pt, 0pt), (0pt, 40pt), (15pt, 45pt)),
  polygon(stroke: (thickness: 4pt, paint: blue, join: "bevel"),
    (0pt, 20pt), (15pt, 0pt), (0pt, 40pt), (15pt, 45pt)),
  polygon(stroke: (thickness: 4pt, paint: blue, join: "miter"),
    (0pt, 20pt), (15pt, 0pt), (0pt, 40pt), (15pt, 45pt)),
  polygon(stroke: (thickness: 4pt, paint: blue, join: "miter", miter-limit: 20.0),
    (0pt, 20pt), (15pt, 0pt), (0pt, 40pt), (15pt, 45pt)),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (string))))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (string))))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (string))))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (number))))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit))))))))
  (parbreak))

====================
typst/polygon/polygon-bad-point-array
====================

// Error: 10-17 point array must contain exactly two entries
#polygon((50pt,))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))))))
  (parbreak))

====================
typst/polygon/polygon-infinite-size
====================

// Error: 2-57 cannot create polygon with infinite size
#polygon((0pt, 0pt), (0pt, 1pt), (float.inf * 1pt, 0pt))
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (mul
            (field
              (ident)
              (ident))
            (number
              (unit)))
          (number
            (unit)))))))

====================
typst/square/square
====================

// Default square.
#box(square())
#box(square[hey!])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/square/square-auto-sized
====================

// Test auto-sized square.
#square(fill: eastern)[
  #set text(fill: white, weight: "bold")
  Typst
]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (string))))))
        (text))))
  (parbreak))

====================
typst/square/square-relatively-sized-child
====================

// Test relative-sized child.
#square(fill: eastern)[
  #rect(width: 10pt, height: 5pt, fill: conifer)
  #rect(width: 40%, height: 5pt, stroke: conifer)
]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident)))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/square/square-contents-overflow
====================

// Test text overflowing height.
#set page(width: 75pt, height: 100pt)
#square(fill: conifer)[
  But, soft! what light through yonder window breaks?
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak))

====================
typst/square/square-height-limited
====================

// Test that square does not overflow page.
#set page(width: 100pt, height: 75pt)
#square(fill: conifer)[
  But, soft! what light through yonder window breaks?
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak))

====================
typst/square/square-size-width-and-height
====================

// Size wins over width and height.
// Error: 09-20 unexpected argument: width
#square(width: 10cm, height: 20cm, size: 1cm, fill: rgb("eb5278"))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (string)))))))
  (parbreak))

====================
typst/square/square-relative-size
====================

// Test relative width and height and size that is smaller
// than default size.
#set page(width: 120pt, height: 70pt)
#set align(bottom)
#let centered = align.with(center + horizon)
#stack(
  dir: ltr,
  spacing: 1fr,
  square(width: 50%, centered[A]),
  square(height: 50%),
  stack(
    square(size: 10pt),
    square(size: 20pt, centered[B])
  ),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (content
                (text)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (call
                  (ident)
                  (content
                    (text))))))))))
  (parbreak))

====================
typst/square/square-circle-alignment
====================

// Test alignment in automatically sized square and circle.
#set text(8pt)
#box(square(inset: 4pt)[
  Hey there, #align(center + bottom, rotate(180deg, [you!]))
])
#box(circle(align(center + horizon, [Hey.])))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text)
            (code
              (call
                (ident)
                (group
                  (add
                    (ident)
                    (ident))
                  (call
                    (ident)
                    (group
                      (number
                        (unit))
                      (content
                        (text))))))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (content
                  (text)))))))))
  (parbreak))

====================
typst/square/square-circle-overspecified
====================

// Test that minimum wins if both width and height are given.
#stack(
  dir: ltr,
  spacing: 2pt,
  square(width: 20pt, height: 40pt),
  circle(width: 20%, height: 40pt),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/square/square-height-limited-stack
====================

// Test square that is limited by region size.
#set page(width: 20pt, height: 10pt, margin: 0pt)
#stack(dir: ltr, square(fill: forest), square(fill: conifer))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/square/square-no-overflow
====================

// Test that square doesn't overflow due to its aspect ratio.
#set page(width: 40pt, height: 25pt, margin: 5pt)
#square()
#square[Hello there]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/square/square-overflow-forced-width
====================

// Test that a width-overflowing square is laid out regardless of the
// presence of inner content.
#set page(width: 60pt, height: 100pt)
#square(width: 150%)
#square(width: 150%)[Hello there]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/square/square-overflow-forced-height
====================

// Test that a height-overflowing square is laid out regardless of the
// presence of inner content.
#set page(width: 120pt, height: 60pt)
#square(height: 150%)
#square(height: 150%)[Hello there]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/square/square-size-relative-invalid
====================

// Size cannot be relative because we wouldn't know
// relative to which axis.
// Error: 15-18 expected length or auto, found ratio
#square(size: 50%)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/square/square-rect-rounded
====================

#set square(size: 20pt, stroke: 4pt)

// no radius for non-rounded corners
#stack(
  dir: ltr,
  square(),
  h(10pt),
  square(radius: 0pt),
  h(10pt),
  square(radius: -10pt),
)

#stack(
  dir: ltr,
  square(),
  h(10pt),
  square(radius: 0%),
  h(10pt),
  square(radius: -10%),
)

// small values for small radius
#stack(
  dir: ltr,
  square(radius: 1pt),
  h(10pt),
  square(radius: 5%),
  h(10pt),
  square(radius: 2pt),
)

// large values for large radius or circle
#stack(
  dir: ltr,
  square(radius: 8pt),
  h(10pt),
  square(radius: 10pt),
  h(10pt),
  square(radius: 12pt),
)

#stack(
  dir: ltr,
  square(radius: 45%),
  h(10pt),
  square(radius: 50%),
  h(10pt),
  square(radius: 55%),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (sign
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (sign
                (number
                  (unit)))))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/square/square-base
====================

// Test that square sets correct base for its content.
#set page(height: 80pt)
#square(width: 40%, rect(width: 60%, height: 80%))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/square/square-size-beyond-default
====================

// Test that setting a square's height beyond its default sizes it correctly.
#square()
#square(height: 60pt)
#square(width: 60pt)
#square(size: 60pt)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))))))

====================
typst/rect/rect
====================

// Default rectangle.
#rect()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/rect/rect-customization
====================

#set page(width: 150pt)

// Fit to text.
#rect(fill: conifer)[Textbox]

// Empty with fixed width and height.
#block(rect(
  height: 15pt,
  fill: rgb("46b3c2"),
  stroke: 2pt + rgb("234994"),
))

// Fixed width, text height.
#rect(width: 2cm, fill: rgb("9650d6"))[Fixed and padded]

// Page width, fixed height.
#rect(height: 1cm, width: 100%, fill: rgb("734ced"))[Topleft]

// These are inline with text.
{#box(rect(width: 0.5in, height: 7pt, fill: rgb("d6cd67")))
 #box(rect(width: 0.5in, height: 7pt, fill: rgb("edd466")))
 #box(rect(width: 0.5in, height: 7pt, fill: rgb("e3be62")))}

// Rounded corners.
#stack(
  dir: ltr,
  spacing: 1fr,
  rect(width: 2cm, radius: 30%),
  rect(width: 1cm, radius: (left: 10pt, right: 5pt)),
  rect(width: 1.25cm, radius: (
    top-left: 2pt,
    top-right: 5pt,
    bottom-right: 8pt,
    bottom-left: 11pt
  )),
)

// Different strokes.
#set rect(stroke: (right: red))
#rect(width: 100%, fill: lime, stroke: (x: 5pt, y: 1pt))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (string))))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (call
                  (ident)
                  (group
                    (string))))))))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))
      (content
        (text))))
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (string)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (string)))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (string)))))))))
  (text)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/rect/rect-stroke
====================

// Rectangle strokes
#rect(width: 20pt, height: 20pt, stroke: red)
#v(3pt)
#rect(width: 20pt, height: 20pt, stroke: (rest: red, top: (paint: blue, dash: "dashed")))
#v(3pt)
#rect(width: 20pt, height: 20pt, stroke: (thickness: 5pt, join: "round"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (string)))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/rect/red-stroke-bad-type
====================

// Error: 15-21 expected length, color, gradient, tiling, dictionary, stroke, none, or auto, found array
#rect(stroke: (1, 2))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number)
            (number))))))
  (parbreak))

====================
typst/rect/rect-fill-stroke
====================

#let variant = rect.with(width: 20pt, height: 10pt)
#let items = for (i, item) in (
  variant(stroke: none),
  variant(),
  variant(fill: none),
  variant(stroke: 2pt),
  variant(stroke: eastern),
  variant(stroke: eastern + 2pt),
  variant(fill: eastern),
  variant(fill: eastern, stroke: none),
  variant(fill: forest, stroke: none),
  variant(fill: forest, stroke: conifer),
  variant(fill: forest, stroke: black + 2pt),
  variant(fill: forest, stroke: conifer + 2pt),
).enumerate() {
  (align(horizon)[#(i + 1).], item, [])
}

#grid(
  columns: (auto, auto, 1fr, auto, auto, 0fr),
  gutter: 5pt,
  ..items,
)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (for
        (group
          (ident)
          (ident))
        (call
          (field
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (none))))
              (call
                (ident)
                (group))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (none))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (add
                      (ident)
                      (number
                        (unit))))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (none))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (none))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (add
                      (ident)
                      (number
                        (unit))))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (add
                      (ident)
                      (number
                        (unit)))))))
            (ident))
          (group))
        (block
          (group
            (call
              (call
                (ident)
                (group
                  (ident)))
              (content
                (code
                  (group
                    (add
                      (ident)
                      (number))))
                (text)))
            (ident)
            (content))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (auto)
            (number
              (unit))
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (elude
          (ident)))))
  (parbreak))

====================
typst/rect/rect-radius-bad-key
====================

// Error: 15-38 unexpected key "cake", valid keys are "top-left", "top-right", "bottom-right", "bottom-left", "left", "top", "right", "bottom", and "rest"
#rect(radius: (left: 10pt, cake: 5pt))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/rect/issue-1825-rect-overflow
====================

#set page(width: 17.8cm)
#set par(justify: true)
#rect(lorem(70))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number))))))
  (parbreak))

====================
typst/rect/issue-3264-rect-negative-dimensions
====================

// Negative dimensions
#rect(width: -1cm, fill: gradient.linear(red, blue))[Reverse left]

#rect(width: 1cm, fill: gradient.linear(red, blue))[Left]

#align(center, rect(width: -1cm, fill: gradient.linear(red, blue))[Reverse center])

#align(center, rect(width: 1cm, fill: gradient.linear(red, blue))[Center])

#align(right, rect(width: -1cm, fill: gradient.linear(red, blue))[Reverse right])

#align(right, rect(width: 1cm, fill: gradient.linear(red, blue))[Right])


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))
      (content
        (text))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))
      (content
        (text))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident))))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident))))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident))))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident))))))
          (content
            (text))))))
  (parbreak))

====================
typst/rect/rect-size-beyond-default
====================

// Test that setting a rectangle's height beyond its default sizes it correctly.
#rect()
#rect(height: 60pt)
#rect(width: 60pt)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))))))

====================
typst/ellipse/ellipse
====================

// Default ellipse.
#ellipse()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/ellipse/ellipse-auto-sizing
====================

#set rect(inset: 0pt)
#set ellipse(inset: 0pt)

Rect in ellipse in fixed rect.
#rect(width: 3cm, height: 2cm, fill: rgb("2a631a"),
  ellipse(fill: forest, width: 100%, height: 100%,
    rect(fill: conifer, width: 100%, height: 100%,
      align(center + horizon)[
        Stuff inside an ellipse!
      ]
    )
  )
)

Auto-sized ellipse.
#ellipse(fill: conifer, stroke: 3pt + forest, inset: 3pt)[
  #set text(8pt)
  But, soft! what light through yonder window breaks?
]


An inline
#box(ellipse(width: 8pt, height: 6pt, outset: (top: 3pt, rest: 5.5pt)))
ellipse.
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (call
                  (call
                    (ident)
                    (group
                      (add
                        (ident)
                        (ident))))
                  (content
                    (text))))))))))
  (parbreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (number
                  (unit))))))
        (text))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (text))

====================
typst/path/path
====================

#set page(height: 300pt, width: 200pt)
#table(
  columns: (1fr, 1fr),
  rows: (1fr, 1fr, 1fr),
  align: center + horizon,
  path(
    fill: red,
    closed: true,
    ((0%, 0%), (4%, -4%)),
    ((50%, 50%), (4%, -4%)),
    ((0%, 50%), (4%, 4%)),
    ((50%, 0%), (4%, 4%)),
  ),
  path(
    fill: purple,
    stroke: 1pt,
    (0pt, 0pt),
    (30pt, 30pt),
    (0pt, 30pt),
    (30pt, 0pt),
  ),
  path(
    fill: blue,
    stroke: 1pt,
    closed: true,
    ((30%, 0%), (35%, 30%), (-20%, 0%)),
    ((30%, 60%), (-20%, 0%), (0%, 0%)),
    ((50%, 30%), (60%, -30%), (60%, 0%)),
  ),
  path(
    stroke: 5pt,
    closed: true,
    (0pt,  30pt),
    (30pt, 30pt),
    (15pt, 0pt),
  ),
  path(
    fill: red,
    fill-rule: "non-zero",
    closed: true,
    (25pt, 0pt),
    (10pt, 50pt),
    (50pt, 20pt),
    (0pt, 20pt),
    (40pt, 50pt),
  ),
  path(
    fill: red,
    fill-rule: "even-odd",
    closed: true,
    (25pt, 0pt),
    (10pt, 50pt),
    (50pt, 20pt),
    (0pt, 20pt),
    (40pt, 50pt),
  ),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (bool))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (sign
                  (number
                    (unit)))))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (sign
                  (number
                    (unit)))))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (bool))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (sign
                  (number
                    (unit)))
                (number
                  (unit))))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (sign
                  (number
                    (unit)))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (sign
                  (number
                    (unit))))
              (group
                (number
                  (unit))
                (number
                  (unit))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (bool))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit))))))))
  (parbreak))

====================
typst/path/path-bad-vertex
====================

// Error: 7-9 path vertex must have 1, 2, or 3 points
#path(())


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group))))
  (parbreak))

====================
typst/path/path-bad-point-count
====================

// Error: 7-47 path vertex must have 1, 2, or 3 points
#path(((0%, 0%), (0%, 0%), (0%, 0%), (0%, 0%)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (group
            (number
              (unit))
            (number
              (unit)))
          (group
            (number
              (unit))
            (number
              (unit)))
          (group
            (number
              (unit))
            (number
              (unit)))
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/path/path-bad-point-array
====================

// Error: 7-31 point array must contain exactly two entries
#path(((0%, 0%), (0%, 0%, 0%)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (group
            (number
              (unit))
            (number
              (unit)))
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/path/path-infinite-length
====================

// Error: 2-42 cannot create path with infinite length
#path((0pt, 0pt), (float.inf * 1pt, 0pt))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (mul
            (field
              (ident)
              (ident))
            (number
              (unit)))
          (number
            (unit))))))
  (parbreak))

====================
typst/path/issue-path-in-sized-container
====================

// Paths used to implement `LayoutMultiple` rather than `LayoutSingle` without
// fulfilling the necessary contract of respecting region expansion.
#block(
  fill: aqua,
  width: 20pt,
  height: 15pt,
  path(
    (0pt, 0pt),
    (10pt, 10pt),
  ),
)
--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))))))

====================
typst/tiling/tiling-line
====================

// Tests that simple tilings work.
#set page(width: auto, height: auto, margin: 0pt)
#let t = tiling(size: (10pt, 10pt), line(stroke: 4pt, start: (0%, 0%), end: (100%, 100%)))
#rect(width: 50pt, height: 50pt, fill: t)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/tiling/tiling-lines
====================

#set page(width: auto, height: auto, margin: 0pt)

#let t = tiling(size: (10pt, 10pt), {
    place(line(stroke: 4pt, start: (0%, 0%), end: (100%, 100%)))
    place(line(stroke: 4pt, start: (100%,0%), end: (200%, 100%)))
    place(line(stroke: 4pt, start: (0%,100%), end: (100%, 200%)))
    place(line(stroke: 4pt, start: (-100%,0%), end: (0%, 100%)))
    place(line(stroke: 4pt, start: (0%,-100%), end: (100%, 0%)))
})
#rect(width: 50pt, height: 50pt, fill: t)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (block
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (sign
                          (number
                            (unit)))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (sign
                          (number
                            (unit)))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit)))))))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/tiling/tiling-relative-self
====================

// Test with relative set to `"self"`
#let t(..args) = tiling(size: (30pt, 30pt), ..args)[
  #set line(stroke: green)
  #place(top + left, line(start: (0%, 0%), end: (100%, 100%), stroke: 1pt))
  #place(top + left, line(start: (0%, 100%), end: (100%, 0%), stroke: 1pt))
]

#set page(fill: t(), width: 100pt, height: 100pt)
#rect(
  width: 100%,
  height: 100%,
  fill: t(relative: "self"),
  stroke: 1pt + green,
)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (elude
              (ident))))
        (content
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (code
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (ident)
              (group)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string)))))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/tiling/tiling-relative-parent
====================

// Test with relative set to `"parent"`
#let t(fill, ..args) = tiling(size: (30pt, 30pt), ..args)[
  #rect(width: 100%, height: 100%, fill: fill, stroke: none)
  #place(top + left, line(start: (0%, 0%), end: (100%, 100%), stroke: 1pt))
  #place(top + left, line(start: (0%, 100%), end: (100%, 0%), stroke: 1pt))
]

#set page(fill: t(white), width: 100pt, height: 100pt)

#rect(fill: t(none, relative: "parent"), width: 100%, height: 100%, stroke: 1pt)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (elude
            (ident))))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (elude
              (ident))))
        (content
          (code
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (none)))))
          (code
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (code
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (number
                        (unit))))))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (ident)
              (group
                (ident))))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (ident)
            (group
              (none)
              (tagged
                (ident)
                (string)))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/tiling/tiling-small
====================

// Tests small tilings for pixel accuracy.
#box(
  width: 8pt,
  height: 1pt,
  fill: tiling(size: (1pt, 1pt), square(size: 1pt, fill: black))
)
#v(-1em)
#box(
  width: 8pt,
  height: 1pt,
  fill: tiling(size: (2pt, 1pt), square(size: 1pt, fill: black))
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))))))))
  (code
    (call
      (ident)
      (group
        (sign
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/tiling/tiling-zero-sized
====================

// Error: 15-52 tile size must be non-zero
// Hint: 15-52 try setting the size manually
#line(stroke: tiling(curve(curve.move((1em, 0pt)))))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (group
                        (number
                          (unit))
                        (number
                          (unit)))))))))))))
  (parbreak))

====================
typst/tiling/tiling-spacing-negative
====================

// Test with spacing set to `(-10pt, -10pt)`
#let t(..args) = tiling(size: (30pt, 30pt), ..args)[
  #square(width: 100%, height: 100%, stroke: 1pt, fill: blue)
]

#set page(width: 100pt, height: 100pt)

#rect(fill: t(spacing: (-10pt, -10pt)), width: 100%, height: 100%, stroke: 1pt)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (elude
              (ident))))
        (content
          (code
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (sign
                    (number
                      (unit)))
                  (sign
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/tiling/tiling-spacing-zero
====================

// Test with spacing set to `(0pt, 0pt)`
#let t(..args) = tiling(size: (30pt, 30pt), ..args)[
  #square(width: 100%, height: 100%, stroke: 1pt, fill: blue)
]

#set page(width: 100pt, height: 100pt)

#rect(fill: t(spacing: (0pt, 0pt)), width: 100%, height: 100%, stroke: 1pt)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (elude
              (ident))))
        (content
          (code
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/tiling/tiling-spacing-positive
====================

// Test with spacing set to `(10pt, 10pt)`
#let t(..args) = tiling(size: (30pt, 30pt), ..args)[
  #square(width: 100%, height: 100%, stroke: 1pt, fill: blue)
]

#set page(width: 100pt, height: 100pt)

#rect(fill: t(spacing: (10pt, 10pt,)), width: 100%, height: 100%, stroke: 1pt)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))
            (elude
              (ident))))
        (content
          (code
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/tiling/tiling-stroke
====================

// Test tiling on strokes
#align(
  center + top,
  square(
    size: 50pt,
    fill: tiling(
      size: (5pt, 5pt),
      align(horizon + center, circle(fill: blue, radius: 2.5pt))
    ),
    stroke: 7.5pt + tiling(
      size: (5pt, 5pt),
      align(horizon + center, circle(fill: red, radius: 2.5pt))
    )
  )
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit))))
                  (call
                    (ident)
                    (group
                      (add
                        (ident)
                        (ident))
                      (call
                        (ident)
                        (group
                          (tagged
                            (ident)
                            (ident))
                          (tagged
                            (ident)
                            (number
                              (unit))))))))))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (call
                      (ident)
                      (group
                        (add
                          (ident)
                          (ident))
                        (call
                          (ident)
                          (group
                            (tagged
                              (ident)
                              (ident))
                            (tagged
                              (ident)
                              (number
                                (unit))))))))))))))))
  (parbreak))

====================
typst/tiling/tiling-stroke-relative-parent
====================

// Test tiling on strokes with relative set to `"parent"`
// The tiling on the circle should align with the tiling on the square.
#align(
  center + top,
  block(
    width: 50pt,
    height: 50pt,
    fill: tiling(size: (5pt, 5pt), circle(radius: 2.5pt, fill: blue)),
    align(center + horizon, circle(
      radius: 15pt,
      stroke: 7.5pt + tiling(
        size: (5pt, 5pt), circle(radius: 2.5pt, fill: red), relative: "parent"
      ),
    ))
  )
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit))))
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (number
                          (unit)))
                      (tagged
                        (ident)
                        (ident)))))))
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (add
                        (number
                          (unit))
                        (call
                          (ident)
                          (group
                            (tagged
                              (ident)
                              (group
                                (number
                                  (unit))
                                (number
                                  (unit))))
                            (call
                              (ident)
                              (group
                                (tagged
                                  (ident)
                                  (number
                                    (unit)))
                                (tagged
                                  (ident)
                                  (ident))))
                            (tagged
                              (ident)
                              (string)))))))))))))))
  (parbreak))

====================
typst/tiling/tiling-text
====================

// Test a tiling on some text. You shouldn't be able to see the text, if you can
// then that means that the transform matrices are not being applied to the text
// correctly.
#let t = tiling(
  size: (30pt, 30pt),
  relative: "parent",
  square(size: 30pt, fill: gradient.conic(..color.map.rainbow))
);

#set page(
  width: 140pt,
  height: 140pt,
  fill: t
)

#rotate(45deg, scale(x: 50%, y: 70%, rect(
  width: 100%,
  height: 100%,
  stroke: 1pt,
)[
  #lorem(10)

  #set text(fill: t)
  #lorem(10)
]))


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (tagged
            (ident)
            (string))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (elude
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident))))))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (code
                  (call
                    (ident)
                    (group
                      (number))))
                (parbreak)
                (code
                  (set
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (ident))))))
                (code
                  (call
                    (ident)
                    (group
                      (number)))))))))))
  (parbreak))

====================
typst/tiling/tiling-pattern-compatibility
====================

#set page(width: auto, height: auto, margin: 0pt)
#let t = pattern(size: (10pt, 10pt), line(stroke: 4pt, start: (0%, 0%), end: (100%, 100%)))
#rect(width: 50pt, height: 50pt, fill: t)
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))))))

====================
typst/gradient/gradient-linear-angled
====================

// Test gradients with direction.
#set page(width: 90pt)
#grid(
  gutter: 3pt,
  columns: 4,
  ..range(0, 360, step: 15).map(i => box(
    height: 15pt,
    width: 15pt,
    fill: gradient.linear(angle: i * 1deg, (red, 0%), (blue, 100%)),
  ))
)



--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (elude
          (call
            (field
              (call
                (ident)
                (group
                  (number)
                  (number)
                  (tagged
                    (ident)
                    (number))))
              (ident))
            (group
              (lambda
                (ident)
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (mul
                              (ident)
                              (number
                                (unit))))
                          (group
                            (ident)
                            (number
                              (unit)))
                          (group
                            (ident)
                            (number
                              (unit)))))))))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-oklab
====================

// The tests below test whether hue rotation works correctly.
// Here we test in Oklab space for reference.
#set page(
  width: 100pt,
  height: 30pt,
  fill: gradient.linear(red, purple, space: oklab)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-oklch
====================

// Test in OkLCH space.
#set page(
  width: 100pt,
  height: 30pt,
  fill: gradient.linear(red, purple, space: oklch)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-hsv
====================

// Test in HSV space.
#set page(
  width: 100pt,
  height: 30pt,
  fill: gradient.linear(red, purple, space: color.hsv)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-hsl
====================

// Test in HSL space.
#set page(
  width: 100pt,
  height: 30pt,
  fill: gradient.linear(red, purple, space: color.hsl)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-relative-parent
====================

// The image should look as if there is a single gradient that is being used for
// both the page and the rectangles.
#let grad = gradient.linear(red, blue, green, purple, relative: "parent")
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#place(top + right, my-rect)
#place(bottom + center, rotate(45deg, my-rect))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/gradient/gradient-linear-relative-self
====================

// The image should look as if there are multiple gradients, one for each
// rectangle.
#let grad = gradient.linear(red, blue, green, purple, relative: "self")
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#place(top + right, my-rect)
#place(bottom + center, rotate(45deg, my-rect))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/gradient/gradient-linear-relative-parent-block
====================

// The image should look as if there are two nested gradients, one for the page
// and one for a nested block. The rotated rectangles are not visible because
// they are relative to the block.
#let grad = gradient.linear(red, blue, green, purple, relative: "parent")
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#block(
  width: 40pt,
  height: 40pt,
  inset: 2.5pt,
  fill: grad,
)[
  #place(top + right, my-rect)
  #place(bottom + center, rotate(45deg, my-rect))
]


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (ident)
            (group
              (add
                (ident)
                (ident))
              (ident))))
        (code
          (call
            (ident)
            (group
              (add
                (ident)
                (ident))
              (call
                (ident)
                (group
                  (number
                    (unit))
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-repeat-and-mirror-1
====================

// Test repeated gradients.
#rect(
  height: 40pt,
  width: 100%,
  fill: gradient.linear(..color.map.inferno).repeat(2, mirror: true)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (bool))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-repeat-and-mirror-2
====================

#rect(
  height: 40pt,
  width: 100%,
  fill: gradient.linear(..color.map.rainbow).repeat(2, mirror: true),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (bool))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-repeat-and-mirror-3
====================

#rect(
  height: 40pt,
  width: 100%,
  fill: gradient.linear(..color.map.rainbow).repeat(5, mirror: true)
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (bool))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-sharp-and-repeat
====================

#rect(
  height: 40pt,
  width: 100%,
  fill: gradient.linear(..color.map.rainbow).sharp(10).repeat(5, mirror: false)
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (elude
                        (field
                          (field
                            (ident)
                            (ident))
                          (ident)))))
                  (ident))
                (group
                  (number)))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (bool))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-sharp-repeat-and-mirror
====================

#rect(
  height: 40pt,
  width: 100%,
  fill: gradient.linear(..color.map.rainbow).sharp(10).repeat(5, mirror: true)
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (elude
                        (field
                          (field
                            (ident)
                            (ident))
                          (ident)))))
                  (ident))
                (group
                  (number)))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (bool))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-sharp
====================

#square(
  size: 100pt,
  fill: gradient.linear(..color.map.rainbow, space: color.hsl).sharp(10),
)
#square(
  size: 100pt,
  fill: gradient.radial(..color.map.rainbow, space: color.hsl).sharp(10),
)
#square(
  size: 100pt,
  fill: gradient.conic(..color.map.rainbow, space: color.hsl).sharp(10),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))))
              (ident))
            (group
              (number)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))))
              (ident))
            (group
              (number)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))))
              (ident))
            (group
              (number)))))))
  (parbreak))

====================
typst/gradient/gradient-linear-sharp-and-smooth
====================

#square(
  size: 100pt,
  fill: gradient.linear(..color.map.rainbow, space: color.hsl).sharp(10, smoothness: 40%),
)
#square(
  size: 100pt,
  fill: gradient.radial(..color.map.rainbow, space: color.hsl).sharp(10, smoothness: 40%),
)
#square(
  size: 100pt,
  fill: gradient.conic(..color.map.rainbow, space: color.hsl).sharp(10, smoothness: 40%),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))))
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-stroke
====================

#align(center + top, square(size: 50pt, fill: black, stroke: 5pt + gradient.linear(red, blue)))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/gradient/gradient-fill-and-stroke
====================

#align(
  center + bottom,
  square(
    size: 50pt,
    fill: gradient.radial(red, blue, radius: 70.7%, focal-center: (10%, 10%)),
    stroke: 10pt + gradient.radial(red, blue, radius: 70.7%, focal-center: (10%, 10%))
  )
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)
                  (ident)
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit)))))))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident)
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit)))))))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-stroke-relative-parent
====================

// The image should look as if there is a single gradient that is being used for
// both the circle stroke and the block fill.
#align(
  center + horizon,
  block(
    width: 50pt,
    height: 50pt,
    fill: gradient.linear(red, blue).sharp(4),
    circle(
      radius: 18pt,
      stroke: 5pt + gradient.linear(red, blue, relative: "parent").sharp(4),
    )
  )
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (ident)
                      (ident)))
                  (ident))
                (group
                  (number))))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (add
                    (number
                      (unit))
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (ident)
                            (ident)
                            (tagged
                              (ident)
                              (string))))
                        (ident))
                      (group
                        (number))))))))))))
  (parbreak))

====================
typst/gradient/gradient-linear-line
====================

// Test gradient on lines
#set page(width: 100pt, height: 100pt)
#line(length: 100%, stroke: 1pt + gradient.linear(red, blue))
#line(length: 100%, angle: 10deg, stroke: 1pt + gradient.linear(red, blue))
#line(length: 100%, angle: 10deg, stroke: 1pt + gradient.linear(red, blue, relative: "parent"))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (string)))))))))
  (parbreak))

====================
typst/gradient/gradient-radial-hsl
====================

#square(
  size: 100pt,
  fill: gradient.radial(..color.map.rainbow, space: color.hsl),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-radial-center
====================

#grid(
  columns: 2,
  square(
    size: 50pt,
    fill: gradient.radial(..color.map.rainbow, space: color.hsl, center: (0%, 0%)),
  ),
  square(
    size: 50pt,
    fill: gradient.radial(..color.map.rainbow, space: color.hsl, center: (0%, 100%)),
  ),
  square(
    size: 50pt,
    fill: gradient.radial(..color.map.rainbow, space: color.hsl, center: (100%, 0%)),
  ),
  square(
    size: 50pt,
    fill: gradient.radial(..color.map.rainbow, space: color.hsl, center: (100%, 100%)),
  ),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit)))))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit)))))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit)))))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (field
                      (ident)
                      (ident)))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit))))))))))))
  (parbreak))

====================
typst/gradient/gradient-radial-radius
====================

#square(
  size: 50pt,
  fill: gradient.radial(..color.map.rainbow, space: color.hsl, radius: 10%),
)
#square(
  size: 50pt,
  fill: gradient.radial(..color.map.rainbow, space: color.hsl, radius: 72%),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/gradient/gradient-radial-focal-center-and-radius
====================

#circle(
  radius: 25pt,
  fill: gradient.radial(white, rgb("#8fbc8f"), focal-center: (35%, 35%), focal-radius: 5%),
)
#circle(
  radius: 25pt,
  fill: gradient.radial(white, rgb("#8fbc8f"), focal-center: (75%, 35%), focal-radius: 5%),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (call
                (ident)
                (group
                  (string)))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (call
                (ident)
                (group
                  (string)))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/gradient/gradient-radial-relative-parent
====================

// The image should look as if there is a single gradient that is being used for
// both the page and the rectangles.
#let grad = gradient.radial(red, blue, green, purple, relative: "parent");
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#place(top + right, my-rect)
#place(bottom + center, rotate(45deg, my-rect))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/gradient/gradient-radial-relative-self
====================

// The image should look as if there are multiple gradients, one for each
// rectangle.
#let grad = gradient.radial(red, blue, green, purple, relative: "self");
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#place(top + right, my-rect)
#place(bottom + center, rotate(45deg, my-rect))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/gradient/gradient-radial-text
====================

// Test that gradient fills on text.
// The solid bar gradients are used to make sure that all transforms are
// correct: if you can see the text through the bar, then the gradient is
// misaligned to its reference container.
#set page(width: 200pt, height: auto, margin: 10pt)
#set par(justify: true)
#set text(fill: gradient.radial(red, blue))
#lorem(30)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/gradient/gradient-conic
====================

#square(
  size: 50pt,
  fill: gradient.conic(..color.map.rainbow, space: color.hsv),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-center-shifted-1
====================

#square(
  size: 50pt,
  fill: gradient.conic(..color.map.rainbow, space: color.hsv, center: (10%, 10%)),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-center-shifted-2
====================

#square(
  size: 50pt,
  fill: gradient.conic(..color.map.rainbow, space: color.hsv, center: (90%, 90%)),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-angled
====================

#square(
  size: 50pt,
  fill: gradient.conic(..color.map.rainbow, space: color.hsv, angle: 90deg),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-oklab
====================

// Test in Oklab space for reference.
#set page(
  width: 100pt,
  height: 100pt,
  fill: gradient.conic(red, purple, space: oklab)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-oklch
====================

// Test in OkLCH space.
#set page(
  width: 100pt,
  height: 100pt,
  fill: gradient.conic(red, purple, space: oklch)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-hsv
====================

// Test in HSV space.
#set page(
  width: 100pt,
  height: 100pt,
  fill: gradient.conic(red, purple, space: color.hsv)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-hsl
====================

// Test in HSL space.
#set page(
  width: 100pt,
  height: 100pt,
  fill: gradient.conic(red, purple, space: color.hsl)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-relative-parent
====================

// The image should look as if there is a single gradient that is being used for
// both the page and the rectangles.
#let grad = gradient.conic(red, blue, green, purple, relative: "parent");
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#place(top + right, my-rect)
#place(bottom + center, rotate(45deg, my-rect))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/gradient/gradient-conic-relative-self
====================

// The image should look as if there are multiple gradients, one for each
// rectangle.
#let grad = gradient.conic(red, blue, green, purple, relative: "self");
#let my-rect = rect(width: 50%, height: 50%, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
  fill: grad,
  background: place(top + left, my-rect),
)
#place(top + right, my-rect)
#place(bottom + center, rotate(45deg, my-rect))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/gradient/gradient-conic-stroke
====================

#align(
  center + bottom,
  square(
    size: 50pt,
    fill: black,
    stroke: 10pt + gradient.conic(red, blue)
  )
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/gradient/gradient-conic-text
====================

#set page(width: 200pt, height: auto, margin: 10pt)
#set par(justify: true)
#set text(fill: gradient.conic(red, blue, angle: 45deg))
#lorem(30)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/gradient/gradient-text-bad-relative
====================

// Make sure they don't work when `relative: "self"`.
// Hint: 17-61 make sure to set `relative: auto` on your text fill
// Error: 17-61 gradients and tilings on text must be relative to the parent
#set text(fill: gradient.linear(red, blue, relative: "self"))


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (string)))))))))
  (parbreak))

====================
typst/gradient/gradient-text-global
====================

// Test that gradient fills on text work for globally defined gradients.
#set page(width: 200pt, height: auto, margin: 10pt, background: {
  rect(width: 100%, height: 30pt, fill: gradient.linear(red, blue))
})
#set par(justify: true)
#set text(fill: gradient.linear(red, blue))
#lorem(30)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (block
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (ident)
                        (ident))))))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/gradient/gradient-text-dir
====================

// Sanity check that the direction works on text.
#set page(width: 200pt, height: auto, margin: 10pt, background: {
  rect(height: 100%, width: 30pt, fill: gradient.linear(dir: btt, red, blue))
})
#set par(justify: true)
#set text(fill: gradient.linear(dir: btt, red, blue))
#lorem(30)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (block
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (ident))
                        (ident)
                        (ident))))))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/gradient/gradient-text-in-container
====================

// Test that gradient fills on text work for locally defined gradients.
#set page(width: auto, height: auto, margin: 10pt)
#show box: set text(fill: gradient.linear(..color.map.rainbow))
Hello, #box[World]!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/gradient/gradient-text-rotate
====================

// Test that gradients fills on text work with transforms.
#set page(width: auto, height: auto, margin: 10pt)
#show box: set text(fill: gradient.linear(..color.map.rainbow))
#rotate(45deg, box[World])


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/gradient/gradient-text-decoration
====================

#set text(fill: gradient.linear(red, blue))

Hello #underline[World]! \
Hello #overline[World]! \
Hello #strike[World]! \


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (linebreak)
  (parbreak))

====================
typst/gradient/gradient-transformed
====================

// Test whether gradients work well when they are contained within a transform.
#let grad = gradient.linear(red, blue, green, purple, relative: "parent");
#let my-rect = rect(width: 50pt, height: 50pt, fill: grad)
#set page(
  height: 50pt,
  width: 50pt,
  margin: 2.5pt,
)
#place(top + right, scale(x: 200%, y: 130%, my-rect))
#place(bottom + center, rotate(45deg, my-rect))
#place(horizon + center, scale(x: 200%, y: 130%, rotate(45deg, my-rect)))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (ident)
          (ident)
          (ident)
          (tagged
            (ident)
            (string))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (ident))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (group
                (number
                  (unit))
                (ident))))))))
  (parbreak))

====================
typst/gradient/gradient-presets
====================

// Test all gradient presets.
#set page(width: 100pt, height: auto, margin: 0pt)
#set text(fill: white, size: 18pt)
#set text(top-edge: "bounds", bottom-edge: "bounds")

#let presets = (
  ("turbo", color.map.turbo),
  ("cividis", color.map.cividis),
  ("rainbow", color.map.rainbow),
  ("spectral", color.map.spectral),
  ("viridis", color.map.viridis),
  ("inferno", color.map.inferno),
  ("magma", color.map.magma),
  ("plasma", color.map.plasma),
  ("rocket", color.map.rocket),
  ("mako", color.map.mako),
  ("vlag", color.map.vlag),
  ("icefire", color.map.icefire),
  ("flare", color.map.flare),
  ("crest", color.map.crest),
)

#stack(
  spacing: 3pt,
  ..presets.map(((name, preset)) => block(
    width: 100%,
    height: 20pt,
    fill: gradient.linear(..preset),
    align(center + horizon, smallcaps(name)),
  ))
)

// Test that gradients are applied correctly on equations.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident)))
        (group
          (string)
          (field
            (field
              (ident)
              (ident))
            (ident))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (elude
          (call
            (field
              (ident)
              (ident))
            (group
              (lambda
                (group
                  (group
                    (ident)
                    (ident)))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (elude
                            (ident)))))
                    (call
                      (ident)
                      (group
                        (add
                          (ident)
                          (ident))
                        (call
                          (ident)
                          (group
                            (ident))))))))))))))
  (parbreak)
  (comment)
  (parbreak))

====================
typst/gradient/gradient-math-cancel
====================

// Test on cancel
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow))
#show math.equation: box

$ a dot cancel(5) = cancel(25) 5 x + cancel(5) 1 $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (letter)
      (ident)
      (call
        (ident)
        (formula
          (number)))
      (symbol)
      (call
        (ident)
        (formula
          (number)))
      (number)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number)))
      (number)))
  (parbreak))

====================
typst/gradient/gradient-math-frac
====================

// Test on frac
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow))
#show math.equation: box

$ nabla dot bold(E) = frac(rho, epsilon_0) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (ident)
      (ident)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (attach
            (ident)
            (number))))))
  (parbreak))

====================
typst/gradient/gradient-math-root
====================

// Test on root
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow))
#show math.equation: box

$ x_"1,2" = frac(-b plus.minus sqrt(b^2 - 4 a c), 2 a) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (attach
        (letter)
        (string))
      (symbol)
      (call
        (ident)
        (formula
          (symbol)
          (letter)
          (field
            (ident)
            (ident))
          (call
            (ident)
            (formula
              (attach
                (letter)
                (number))
              (symbol)
              (number)
              (letter)
              (letter))))
        (formula
          (number)
          (letter)))))
  (parbreak))

====================
typst/gradient/gradient-math-mat
====================

// Test on matrix
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow))
#show math.equation: box

$ A = mat(
  1, 2, 3;
  4, 5, 6;
  7, 8, 9
) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/gradient/gradient-math-underover
====================

// Test on underover
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow))
#show math.equation: box

$ underline(X^2) $
$ overline("hello, world!") $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (string)))))
  (parbreak))

====================
typst/gradient/gradient-math-dir
====================

// Test a different direction
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow, dir: ttb))
#show math.equation: box

$ A = mat(
  1, 2, 3;
  4, 5, 6;
  7, 8, 9
) $

$ x_"1,2" = frac(-b plus.minus sqrt(b^2 - 4 a c), 2 a) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (ident))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (attach
        (letter)
        (string))
      (symbol)
      (call
        (ident)
        (formula
          (symbol)
          (letter)
          (field
            (ident)
            (ident))
          (call
            (ident)
            (formula
              (attach
                (letter)
                (number))
              (symbol)
              (number)
              (letter)
              (letter))))
        (formula
          (number)
          (letter)))))
  (parbreak))

====================
typst/gradient/gradient-math-misc
====================

// Test miscellaneous
#show math.equation: set text(fill: gradient.linear(..color.map.rainbow))
#show math.equation: box

$ hat(x) = bar x bar = vec(x, y, z) = tilde(x) = dot(x) $
$ x prime = vec(1, 2, delim: "[") $
$ sum_(i in NN) 1 + i $
$ attach(
  Pi, t: alpha, b: beta,
  tl: 1, tr: 2+3, bl: 4+5, br: 6,
) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (ident)
      (letter)
      (ident)
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))))
  (math
    (formula
      (letter)
      (ident)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (tagged
          (ident)
          (formula
            (string))))))
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (ident))))
      (number)
      (symbol)
      (letter)))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (ident)))
        (tagged
          (ident)
          (formula
            (ident)))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number)
            (symbol)
            (number)))
        (tagged
          (ident)
          (formula
            (number)
            (symbol)
            (number)))
        (tagged
          (ident)
          (formula
            (number))))))
  (parbreak))

====================
typst/gradient/gradient-math-radial
====================

// Test radial gradient
#show math.equation: set text(fill: gradient.radial(..color.map.rainbow, center: (30%, 30%)))
#show math.equation: box

$ A = mat(
  1, 2, 3;
  4, 5, 6;
  7, 8, 9
) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (elude
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident)))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit))))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/gradient/gradient-math-conic
====================

// Test conic gradient
#show math.equation: set text(fill: gradient.conic(red, blue, angle: 45deg))
#show math.equation: box

$ A = mat(
  1, 2, 3;
  4, 5, 6;
  7, 8, 9
) $



--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)
                  (ident)
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/gradient/gradient-kind
====================

// Test gradient functions.
#test(gradient.linear(red, green, blue).kind(), gradient.linear)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (parbreak))

====================
typst/gradient/gradient-stops
====================

#test(gradient.linear(red, green, blue).stops(), ((red, 0%), (green, 50%), (blue, 100%)))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))))))
  (parbreak))

====================
typst/gradient/gradient-sample
====================

#test(gradient.linear(red, green, blue, space: rgb).sample(0%), red)
#test(gradient.linear(red, green, blue, space: rgb).sample(25%), rgb("#97873b"))
#test(gradient.linear(red, green, blue, space: rgb).sample(50%), green)
#test(gradient.linear(red, green, blue, space: rgb).sample(75%), rgb("#17a08c"))
#test(gradient.linear(red, green, blue, space: rgb).sample(100%), blue)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group
            (number
              (unit))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group
            (number
              (unit))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group
            (number
              (unit))))
        (ident))))
  (parbreak))

====================
typst/gradient/gradient-space
====================

#test(gradient.linear(red, green, space: rgb).space(), rgb)
#test(gradient.linear(red, green, space: oklab).space(), oklab)
#test(gradient.linear(red, green, space: oklch).space(), oklch)
#test(gradient.linear(red, green, space: cmyk).space(), cmyk)
#test(gradient.linear(red, green, space: luma).space(), luma)
#test(gradient.linear(red, green, space: color.linear-rgb).space(), color.linear-rgb)
#test(gradient.linear(red, green, space: color.hsl).space(), color.hsl)
#test(gradient.linear(red, green, space: color.hsv).space(), color.hsv)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (parbreak))

====================
typst/gradient/gradient-relative
====================

#test(gradient.linear(red, green, relative: "self").relative(), "self")
#test(gradient.linear(red, green, relative: "parent").relative(), "parent")
#test(gradient.linear(red, green).relative(), auto)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (string))))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (string))))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)))
            (ident))
          (group))
        (auto))))
  (parbreak))

====================
typst/gradient/gradient-angle
====================

#test(gradient.linear(red, green).angle(), 0deg)
#test(gradient.linear(red, green, dir: ltr).angle(), 0deg)
#test(gradient.linear(red, green, dir: rtl).angle(), 180deg)
#test(gradient.linear(red, green, dir: ttb).angle(), 90deg)
#test(gradient.linear(red, green, dir: btt).angle(), 270deg)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)))
            (ident))
          (group))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (ident))
          (group))
        (number
          (unit)))))
  (parbreak))

====================
typst/gradient/gradient-repeat
====================

#test(
  gradient.linear(red, green, blue).repeat(2).stops(),
  ((red, 0%), (green, 25%), (blue, 50%), (red, 50%), (green, 75%), (blue, 100%))
)
#test(
  gradient.linear(red, green, blue).repeat(2, mirror: true).stops(),
  ((red, 0%), (green, 25%), (blue, 50%), (green, 75%), (red, 100%))
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident)
                    (ident)))
                (ident))
              (group
                (number)))
            (ident))
          (group))
        (group
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (ident)
                    (ident)))
                (ident))
              (group
                (number)
                (tagged
                  (ident)
                  (bool))))
            (ident))
          (group))
        (group
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))
          (group
            (ident)
            (number
              (unit)))))))
  (parbreak))

====================
typst/gradient/issue-2902-gradient-oklch-panic
====================

// Minimal reproduction of #2902
#set page(width: 15cm, height: auto, margin: 1em)
#set block(width: 100%, height: 1cm, above: 2pt)

// Oklch
#block(fill: gradient.linear(red, purple, space: oklch))
#block(fill: gradient.linear(..color.map.rainbow, space: oklch))
#block(fill: gradient.linear(..color.map.plasma, space: oklch))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (ident)
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/gradient/issue-2902-gradient-oklab-panic
====================

#set page(width: 15cm, height: auto, margin: 1em)
#set block(width: 100%, height: 1cm, above: 2pt)

// Oklab
#block(fill: gradient.linear(red, purple, space: oklab))
#block(fill: gradient.linear(..color.map.rainbow, space: oklab))
#block(fill: gradient.linear(..color.map.plasma, space: oklab))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (ident)
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (field
                  (field
                    (ident)
                    (ident))
                  (ident)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/gradient/issue-gradient-cmyk-encode
====================

// Test that CMYK works on gradients
#set page(margin: 0pt, width: 100pt, height: auto)

#let violet = cmyk(75%, 80%, 0%, 0%)
#let blue = cmyk(75%, 30%, 0%, 0%)

#rect(
  width: 100%,
  height: 10pt,
  fill: gradient.linear(violet, blue)
)

#rect(
  width: 100%,
  height: 10pt,
  fill: gradient.linear(rgb(violet), rgb(blue))
)

// In PDF format, this gradient can look different from the others.
// This is because PDF readers do weird things with CMYK.
#rect(
  width: 100%,
  height: 10pt,
  fill: gradient.linear(violet, blue, space: cmyk)
)
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))
          (number
            (unit))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (call
                (ident)
                (group
                  (ident)))
              (call
                (ident)
                (group
                  (ident)))))))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)
              (ident)
              (tagged
                (ident)
                (ident)))))))))

====================
typst/circle/circle
====================

// Default circle.
#box(circle())
#box(circle[Hey])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/circle/circle-auto-sizing
====================

// Test auto sizing.
#set circle(inset: 0pt)

Auto-sized circle.
#circle(fill: rgb("eb5278"), stroke: 2pt + black,
  align(center + horizon)[But, soft!]
)

Center-aligned rect in auto-sized circle.
#circle(fill: forest, stroke: conifer,
  align(center + horizon,
    rect(fill: conifer, inset: 5pt)[But, soft!]
  )
)

Rect in auto-sized circle.
#circle(fill: forest,
  rect(fill: conifer, stroke: white, inset: 4pt)[
    #set text(8pt)
    But, soft! what light through yonder window breaks?
  ]
)

Expanded by height.
#circle(stroke: black, align(center)[A \ B \ C])


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (ident)
            (group
              (string))))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (call
          (call
            (ident)
            (group
              (add
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (add
              (ident)
              (ident))
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (text))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (code
              (set
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))
            (text))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text))))))
  (parbreak))

====================
typst/circle/circle-directly-in-rect
====================

// Ensure circle directly in rect works.
#rect(width: 40pt, height: 30pt, fill: forest,
  circle(fill: conifer))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/circle/circle-relative-sizing
====================

// Test relative sizing.
#set text(fill: white)
#show: rect.with(width: 100pt, height: 50pt, inset: 0pt, fill: rgb("aaa"))
#set align(center + horizon)
#stack(
  dir: ltr,
  spacing: 1fr,
  1fr,
  circle(radius: 10pt, fill: eastern, [A]),      // D=20pt
  circle(height: 60%, fill: eastern, [B]),       // D=30pt
  circle(width: 20% + 20pt, fill: eastern, [C]), // D=40pt
  1fr,
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))))
  (code
    (set
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (number
          (unit))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))
            (content
              (text))))
        (comment)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))
            (content
              (text))))
        (comment)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (number
                  (unit))))
            (tagged
              (ident)
              (ident))
            (content
              (text))))
        (comment)
        (number
          (unit)))))
  (parbreak))

====================
typst/circle/circle-radius-width-and-height
====================

// Radius wins over width and height.
// Error: 23-34 unexpected argument: width
#circle(radius: 10pt, width: 50pt, height: 100pt, fill: eastern)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/circle/circle-sizing-options
====================

// Test different ways of sizing.
#set page(width: 120pt, height: 40pt)
#stack(
  dir: ltr,
  spacing: 2pt,
  circle(radius: 5pt),
  circle(width: 10%),
  circle(height: 50%),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/circle/circle-size-beyond-default
====================

// Test that setting a circle's height beyond its default sizes it correctly.
#circle()
#circle(height: 60pt)
#circle(width: 60pt)
#circle(radius: 30pt)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/circle/circle-beyond-page-width-overflows
====================

// Test that sizing a circle beyond the page width correctly overflows the page.
#set page(height: 100pt)
#circle(width: 150%)
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))))))

====================
typst/curve/curve-move-single
====================

#curve(
  stroke: 5pt,
  curve.move((0pt,  30pt)),
  curve.line((30pt, 30pt)),
  curve.line((15pt, 0pt)),
  curve.close()
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/curve/curve-move-multiple-even-odd
====================

#curve(
  fill: yellow,
  stroke: yellow.darken(20%),
  fill-rule: "even-odd",
  curve.move((10pt, 10pt)),
  curve.line((20pt, 10pt)),
  curve.line((20pt, 20pt)),
  curve.close(),
  curve.move((0pt, 5pt)),
  curve.line((25pt, 5pt)),
  curve.line((25pt, 30pt)),
  curve.close(mode: "smooth"),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (string))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/curve/curve-move-multiple-non-zero
====================

#curve(
  fill: yellow,
  stroke: yellow.darken(20%),
  curve.move((10pt, 10pt)),
  curve.line((20pt, 10pt)),
  curve.line((20pt, 20pt)),
  curve.close(),
  curve.move((0pt, 5pt)),
  curve.line((25pt, 5pt)),
  curve.line((25pt, 30pt)),
  curve.close(mode: "smooth"),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/curve/curve-line
====================

#curve(
  fill: purple,
  stroke: 3pt + purple.lighten(50%),
  curve.move((0pt, 0pt)),
  curve.line((30pt, 30pt)),
  curve.line((0pt, 30pt)),
  curve.line((30pt, 0pt)),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (field
                (ident)
                (ident))
              (group
                (number
                  (unit))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit))))))))
  (parbreak))

====================
typst/curve/curve-quad-mirror
====================

#curve(
  stroke: 2pt,
  curve.quad((20pt, 40pt), (40pt, 40pt), relative: true),
  curve.quad(auto, (40pt, -40pt), relative: true),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (tagged
              (ident)
              (bool))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (sign
                (number
                  (unit))))
            (tagged
              (ident)
              (bool)))))))
  (parbreak))

====================
typst/curve/curve-cubic-mirror
====================

#set page(height: 100pt)
#curve(
  fill: red,
  curve.move((0%, 0%)),
  curve.cubic((-4%, 4%), (54%, 46%), (50%, 50%)),
  curve.cubic(auto, (4%, 54%), (0%, 50%)),
  curve.cubic(auto, (54%, 4%), (50%, 0%)),
  curve.close(),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (sign
                (number
                  (unit)))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/curve/curve-cubic-inflection
====================

#set page(height: 120pt)
#curve(
  fill: blue.lighten(80%),
  stroke: blue,
  curve.move((30%, 0%)),
  curve.cubic((10%, 0%), (10%, 60%), (30%, 60%)),
  curve.cubic(none, (110%, 0%), (50%, 30%)),
  curve.cubic((110%, 30%), (65%, 30%), (30%, 0%)),
  curve.close(mode: "straight")
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (none)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/curve/curve-close-smooth
====================

#curve(
  fill: blue.lighten(80%),
  stroke: blue,
  curve.move((0pt, 40pt)),
  curve.cubic((0pt, 70pt), (10pt, 80pt), (40pt, 80pt)),
  curve.cubic(auto, (80pt, 70pt), (80pt, 40pt)),
  curve.cubic(auto, (70pt, 0pt), (40pt, 0pt)),
  curve.close(mode: "smooth")
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/curve/curve-close-straight
====================

#curve(
  fill: blue.lighten(80%),
  stroke: blue,
  curve.move((0pt, 40pt)),
  curve.cubic((0pt, 70pt), (10pt, 80pt), (40pt, 80pt)),
  curve.cubic(auto, (80pt, 70pt), (80pt, 40pt)),
  curve.cubic(auto, (70pt, 0pt), (40pt, 0pt)),
  curve.close(mode: "straight")
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/curve/curve-close-intersection
====================

#curve(
  fill: yellow,
  stroke: black,
  curve.move((10pt, 10pt)),
  curve.cubic((5pt, 20pt), (15pt, 20pt), (20pt, 0pt), relative: true),
  curve.cubic(auto, (15pt, -10pt), (20pt, 0pt), relative: true),
  curve.close(mode: "straight")
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (tagged
              (ident)
              (bool))))
        (call
          (field
            (ident)
            (ident))
          (group
            (auto)
            (group
              (number
                (unit))
              (sign
                (number
                  (unit))))
            (group
              (number
                (unit))
              (number
                (unit)))
            (tagged
              (ident)
              (bool))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/curve/curve-stroke-gradient
====================

#set page(width: auto)
#let down = curve.line((40pt, 40pt), relative: true)
#let up = curve.line((40pt, -40pt), relative: true)

#curve(
  stroke: 4pt + gradient.linear(red, blue),
  down, up, down, up, down,
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (group
            (number
              (unit))
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))))
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (group
            (number
              (unit))
            (sign
              (number
                (unit))))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (ident)))))
        (ident)
        (ident)
        (ident)
        (ident)
        (ident))))
  (parbreak))

====================
typst/curve/curve-fill-rule
====================

#stack(
  dir: ltr,
  curve(
  fill: red,
  fill-rule: "non-zero",
  curve.move((25pt, 0pt)),
  curve.line((10pt, 50pt)),
  curve.line((50pt, 20pt)),
  curve.line((0pt, 20pt)),
  curve.line((40pt, 50pt)),
  curve.close()
  ),
  curve(
    fill: red,
    fill-rule: "even-odd",
    curve.move((25pt, 0pt)),
    curve.line((10pt, 50pt)),
    curve.line((50pt, 20pt)),
    curve.line((0pt, 20pt)),
    curve.line((40pt, 50pt)),
    curve.close()
  )
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (string))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (string))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group)))))))
  (parbreak))

====================
typst/curve/curve-infinite-length
====================

// Error: 2-67 cannot create curve with infinite size
#curve(curve.move((0pt, 0pt)), curve.line((float.inf * 1pt, 0pt)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (mul
                (field
                  (ident)
                  (ident))
                (number
                  (unit)))
              (number
                (unit))))))))
  (parbreak))

====================
typst/curve/issue-curve-in-sized-container
====================

// Curves/Paths used to implement `LayoutMultiple` rather than `LayoutSingle`
// without fulfilling the necessary contract of respecting region expansion.
#block(
  fill: aqua,
  width: 20pt,
  height: 15pt,
  curve(
    curve.move((0pt, 0pt)),
    curve.line((10pt, 10pt)),
  ),
)
--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (group
                  (number
                    (unit))
                  (number
                    (unit)))))))))))

====================
typst/image/image-png
====================

// Load an RGBA PNG image.
#image("/assets/images/rhino.png")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-jpg
====================

// Load an RGB JPEG image.
#set page(height: 60pt)
#image("/assets/images/tiger.jpg")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-sizing
====================

// Test configuring the size and fitting behaviour of images.

// Set width and height explicitly.
#box(image("/assets/images/rhino.png", width: 30pt))
#box(image("/assets/images/rhino.png", height: 30pt))

// Set width and height explicitly and force stretching.
#image("/assets/images/monkey.svg", width: 100%, height: 20pt, fit: "stretch")

// Make sure the bounding-box of the image is correct.
#align(bottom + right, image("/assets/images/tiger.jpg", width: 40pt, alt: "A tiger"))


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/image/image-fit
====================

// Test all three fit modes.
#set page(height: 50pt, margin: 0pt)
#grid(
  columns: (1fr, 1fr, 1fr),
  rows: 100%,
  gutter: 3pt,
  image("/assets/images/tiger.jpg", width: 100%, height: 100%, fit: "contain"),
  image("/assets/images/tiger.jpg", width: 100%, height: 100%, fit: "cover"),
  image("/assets/images/monkey.svg", width: 100%, height: 100%, fit: "stretch"),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string))))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string))))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/image/image-jump-to-next-page
====================

// Does not fit to remaining height of page.
#set page(height: 60pt)
Stuff
#image("/assets/images/rhino.png")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-baseline-with-box
====================

// Test baseline.
A #box(image("/assets/images/tiger.jpg", height: 1cm, width: 80%)) B


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/image/image-svg-complex
====================

// Test advanced SVG features.
#image("/assets/images/pattern.svg")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-svg-text
====================

#set page(width: 250pt)

#figure(
  image("/assets/images/diagram.svg"),
  caption: [A textful diagram],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/image/image-svg-text-font
====================

#set page(width: 250pt)
#show image: set text(font: ("Roboto", "Noto Serif CJK SC"))

#figure(
  image("/assets/images/chinese.svg"),
  caption: [Bilingual text]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (string)
                (string))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/image/image-natural-dpi-sizing
====================

// Test that images aren't upscaled.
// Image is just 48x80 at 220dpi. It should not be scaled to fit the page
// width, but rather max out at its natural size.
#image("/assets/images/f2t.jpg")


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-file-not-found
====================

// Error: 8-29 file not found (searched at tests/suite/visualize/path/does/not/exist)
#image("path/does/not/exist")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-bad-format
====================

// Error: 2-22 unknown image format
#image("./image.typ")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-bad-svg
====================

// Error: 2-33 failed to parse SVG (found closing tag 'g' instead of 'style' in line 4)
#image("/assets/images/bad.svg")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/image-decode-svg
====================

// Test parsing from svg data
#image.decode(`<svg xmlns="http://www.w3.org/2000/svg" height="140" width="500"><ellipse cx="200" cy="80" rx="100" ry="50" style="fill:yellow;stroke:purple;stroke-width:2" /></svg>`.text, format: "svg")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (field
          (raw_span
            (blob))
          (ident))
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/image/image-decode-bad-svg
====================

// Error: 2-168 failed to parse SVG (missing root node)
#image.decode(`<svg height="140" width="500"><ellipse cx="200" cy="80" rx="100" ry="50" style="fill:yellow;stroke:purple;stroke-width:2" /></svg>`.text, format: "svg")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (field
          (raw_span
            (blob))
          (ident))
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/image/image-decode-detect-format
====================

// Test format auto detect
#image.decode(read("/assets/images/tiger.jpg", encoding: none), width: 80%)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (none))))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/image/image-decode-specify-format
====================

// Test format manual
#image.decode(read("/assets/images/tiger.jpg", encoding: none), format: "jpg", width: 80%)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (none))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/image/image-decode-specify-wrong-format
====================

// Error: 2-91 failed to decode image (Format error decoding Png: Invalid PNG signature.)
#image.decode(read("/assets/images/tiger.jpg", encoding: none), format: "png", width: 80%)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (none))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/image/issue-870-image-rotation
====================

// Ensure that EXIF rotation is applied.
// https://github.com/image-rs/image/issues/1045
// File is from https://magnushoff.com/articles/jpeg-orientation/
#image("/assets/images/f2t.jpg", width: 10pt)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/image/issue-measure-image
====================

// Test that image measurement doesn't turn `inf / some-value` into 0pt.
#context {
  let size = measure(image("/assets/images/tiger.jpg"))
  test(size, (width: 1024pt, height: 670pt))
}


--------------------

(source_file
  (comment)
  (code
    (context
      (block
        (let
          (ident)
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (string))))))
        (call
          (ident)
          (group
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/image/issue-2051-new-cm-svg
====================

#set text(font: "New Computer Modern")
#image("/assets/images/diagram.svg")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/image/issue-3733-dpi-svg
====================

#set page(width: 200pt, height: 200pt, margin: 0pt)
#image("/assets/images/relative.svg")
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (string)))))

====================
typst/stroke/stroke-constructor
====================

// Converting to stroke
#test(stroke(red).paint, red)
#test(stroke(red).thickness, auto)
#test(stroke(2pt).paint, auto)
#test(stroke((cap: "round", paint: blue)).cap, "round")
#test(stroke((cap: auto, paint: blue)).cap, auto)
#test(stroke((cap: auto, paint: blue)).thickness, auto)

// Constructing with named arguments
#test(stroke(paint: blue, thickness: 8pt), 8pt + blue)
#test(stroke(thickness: 2pt), stroke(2pt))
#test(stroke(cap: "round").thickness, auto)
#test(stroke(cap: "round", thickness: auto).thickness, auto)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (ident)))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (number
                (unit))))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (ident)))))
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (group
                (tagged
                  (ident)
                  (auto))
                (tagged
                  (ident)
                  (ident)))))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (group
                (tagged
                  (ident)
                  (auto))
                (tagged
                  (ident)
                  (ident)))))
          (ident))
        (auto))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))))
        (add
          (number
            (unit))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (auto))))
          (ident))
        (auto))))
  (parbreak))

====================
typst/stroke/stroke-constructor-unknown-key
====================

// Error: 9-21 unexpected key "foo", valid keys are "paint", "thickness", "cap", "join", "dash", and "miter-limit"
#stroke((foo: "bar"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/stroke/stroke-fields-simple
====================

// Test stroke fields for simple strokes.
#test((1em + blue).paint, blue)
#test((1em + blue).thickness, 1em)
#test((1em + blue).cap, auto)
#test((1em + blue).join, auto)
#test((1em + blue).dash, auto)
#test((1em + blue).miter-limit, auto)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (ident)))
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (ident)))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (ident)))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (ident)))
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (ident)))
          (ident))
        (auto))))
  (parbreak))

====================
typst/stroke/stroke-fields-complex
====================

// Test complex stroke fields.
#let r1 = rect(stroke: (paint: cmyk(1%, 2%, 3%, 4%), thickness: 4em + 2pt, cap: "round", join: "bevel", miter-limit: 5.0, dash: none))
#let r2 = rect(stroke: (paint: cmyk(1%, 2%, 3%, 4%), thickness: 4em + 2pt, cap: "round", join: "bevel", miter-limit: 5.0, dash: (3pt, "dot", 4em)))
#let r3 = rect(stroke: (paint: cmyk(1%, 2%, 3%, 4%), thickness: 4em + 2pt, cap: "round", join: "bevel", dash: (array: (3pt, "dot", 4em), phase: 5em)))
#let s1 = r1.stroke
#let s2 = r2.stroke
#let s3 = r3.stroke
#test(s1.paint, cmyk(1%, 2%, 3%, 4%))
#test(s1.thickness, 4em + 2pt)
#test(s1.cap, "round")
#test(s1.join, "bevel")
#test(s1.miter-limit, 5.0)
#test(s3.miter-limit, auto)
#test(s1.dash, none)
#test(s2.dash, (array: (3pt, "dot", 4em), phase: 0pt))
#test(s3.dash, (array: (3pt, "dot", 4em), phase: 5em))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit)))))
              (tagged
                (ident)
                (add
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (none))))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit)))))
              (tagged
                (ident)
                (add
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (string)
                  (number
                    (unit))))))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit))
                    (number
                      (unit)))))
              (tagged
                (ident)
                (add
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (string)
                      (number
                        (unit))))
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))))
  (code
    (let
      (ident)
      (field
        (ident)
        (ident))))
  (code
    (let
      (ident)
      (field
        (ident)
        (ident))))
  (code
    (let
      (ident)
      (field
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (add
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (auto))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (none))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (string)
              (number
                (unit))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (string)
              (number
                (unit))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak))

====================
typst/stroke/stroke-zero-thickness
====================

// 0pt strokes must function exactly like 'none' strokes and not draw anything
#rect(width: 10pt, height: 10pt, stroke: none)
#rect(width: 10pt, height: 10pt, stroke: 0pt)
#rect(width: 10pt, height: 10pt, stroke: none, fill: blue)
#rect(width: 10pt, height: 10pt, stroke: 0pt + red, fill: blue)

#line(length: 30pt, stroke: 0pt)
#line(length: 30pt, stroke: (paint: red, thickness: 0pt, dash: ("dot", 1pt)))

#table(columns: 2, stroke: none)[A][B]
#table(columns: 2, stroke: 0pt)[A][B]

#curve(
  stroke: none,
  curve.move((0pt,  30pt)),
  curve.line((30pt, 30pt)),
  curve.line((15pt, 0pt)),
  curve.close()
)

#curve(
  stroke: 0pt,
  curve.move((0pt,  30pt)),
  curve.line((30pt, 30pt)),
  curve.line((15pt, 0pt)),
  curve.close()
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (none)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (none))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (tagged
          (ident)
          (ident)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (group
                (string)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (none))))
        (content
          (text)))
      (content
        (text))))
  (code
    (call
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))
      (content
        (text))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (none))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (group
              (number
                (unit))
              (number
                (unit)))))
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/stroke/stroke-text
====================

#set text(size: 20pt)
#set page(width: auto)
#let v = [测试字体Test]

#text(stroke: 0.3pt + red, v)

#text(stroke: 0.7pt + red, v)

#text(stroke: 7pt + red, v)

#text(stroke: (paint: blue, thickness: 1pt, dash: "dashed"), v)

#text(stroke: 1pt + gradient.linear(..color.map.rainbow), v)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (let
      (ident)
      (content
        (text))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string))))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (field
                (ident)
                (ident))
              (group
                (elude
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident)))))))
        (ident))))
  (parbreak))

====================
typst/stroke/stroke-folding
====================

// Test stroke folding.
#let sq(..args) = box(square(size: 10pt, ..args))

#set square(stroke: none)
#sq()
#set square(stroke: auto)
#sq()
#sq(fill: teal)
#sq(stroke: 2pt)
#sq(stroke: blue)
#sq(fill: teal, stroke: blue)
#sq(fill: teal, stroke: 2pt + blue)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (elude
                (ident))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/stroke/stroke-composition
====================

// Test stroke composition.
#set square(stroke: 4pt)
#set text(font: "Roboto")
#stack(
  dir: ltr,
  square(
    stroke: (left: red, top: yellow, right: green, bottom: blue),
    radius: 50%, align(center+horizon)[*G*],
    inset: 8pt
  ),
  h(0.5cm),
  square(
    stroke: (left: red, top: yellow + 8pt, right: green, bottom: blue + 2pt),
    radius: 50%, align(center+horizon)[*G*],
    inset: 8pt
  ),
  h(0.5cm),
  square(
    stroke: (left: red, top: yellow, right: green, bottom: blue),
    radius: 100%, align(center+horizon)[*G*],
    inset: 8pt
  ),
)

// Join between different solid strokes
#set square(size: 20pt, stroke: 2pt)
#set square(stroke: (left: green + 4pt, top: black + 2pt, right: blue, bottom: black + 2pt))
#stack(
  dir: ltr,
  square(),
  h(0.2cm),
  square(radius: (top-left: 0pt, rest: 1pt)),
  h(0.2cm),
  square(radius: (top-left: 0pt, rest: 8pt)),
  h(0.2cm),
	square(radius: (top-left: 0pt, rest: 100pt)),
)

// Join between solid and dotted strokes
#set square(stroke: (left: green + 4pt, top: black + 2pt, right: (paint: blue, dash: "dotted"), bottom: (paint: black, dash: "dotted")))
#stack(
  dir: ltr,
  square(),
  h(0.2cm),
  square(radius: (top-left: 0pt, rest: 1pt)),
  h(0.2cm),
  square(radius: (top-left: 0pt, rest: 8pt)),
  h(0.2cm),
	square(radius: (top-left: 0pt, rest: 100pt)),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (call
                (ident)
                (group
                  (add
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (add
                    (ident)
                    (number
                      (unit))))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (add
                    (ident)
                    (number
                      (unit))))))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (call
                (ident)
                (group
                  (add
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (call
                (ident)
                (group
                  (add
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (add
                  (ident)
                  (number
                    (unit))))
              (tagged
                (ident)
                (add
                  (ident)
                  (number
                    (unit))))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (add
                  (ident)
                  (number
                    (unit))))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (add
                  (ident)
                  (number
                    (unit))))
              (tagged
                (ident)
                (add
                  (ident)
                  (number
                    (unit))))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (string))))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (string))))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/stroke/issue-3700-deformed-stroke
====================

// Test shape fill & stroke for specific values that used to make the stroke
// deformed.
#rect(
  radius: 1mm,
  width: 100%,
  height: 10pt,
  stroke: (left: rgb("46b3c2") + 16.0mm),
)
--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (add
                (call
                  (ident)
                  (group
                    (string)))
                (number
                  (unit))))))))))

====================
typst/copy-paste/text-copy-paste-ligatures
====================

The after fira 🏳️‍🌈!

#set text(lang: "ar", font: "Noto Sans Arabic")
مرحبًا
--------------------

(source_file
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text))

====================
typst/shift/sub-super
====================

#table(
  columns: 3,
  [Typo.], [Fallb.], [Synth],
  [x#super[1]], [x#super[5n]], [x#super[2 #box(square(size: 6pt))]],
  [x#sub[1]], [x#sub[5n]], [x#sub[2 #box(square(size: 6pt))]],
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text)))))
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text)))))
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text)
                (code
                  (call
                    (ident)
                    (group
                      (call
                        (ident)
                        (group
                          (tagged
                            (ident)
                            (number
                              (unit))))))))))))
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text)))))
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text)))))
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text)
                (code
                  (call
                    (ident)
                    (group
                      (call
                        (ident)
                        (group
                          (tagged
                            (ident)
                            (number
                              (unit)))))))))))))))
  (parbreak))

====================
typst/shift/sub-super-non-typographic
====================

#set super(typographic: false, baseline: -0.25em, size: 0.7em)
n#super[1], n#sub[2], ... n#super[N]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (sign
              (number
                (unit))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (shorthand)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/shift/super-underline
====================

#set underline(stroke: 0.5pt, offset: 0.15em)
#underline[The claim#super[\[4\]]] has been disputed. \
The claim#super[#underline[\[4\]]] has been disputed. \
It really has been#super(box(text(baseline: 0pt, underline[\[4\]]))) \
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (content
              (text
                (escape)
                (escape))))))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (content
              (text
                (escape)
                (escape))))))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (call
                  (ident)
                  (content
                    (text
                      (escape)
                      (escape)))))))))))
  (linebreak))

====================
typst/font/text-font-properties
====================

// Set same font size in three different ways.
#text(20pt)[A]
#text(2em)[A]
#text(size: 15pt + 0.5em)[A]

// Do nothing.
#text()[Normal]

// Set style (is available).
#text(style: "italic")[Italic]

// Set weight (is available).
#text(weight: "bold")[Bold]

// Set stretch (not available, matching closest).
#text(stretch: 50%)[Condensed]

// Set font family.
#text(font: "IBM Plex Serif")[Serif]

// Emoji.
Emoji: 🐪, 🌋, 🏞

// Colors.
#[
  #set text(fill: eastern)
  This is #text(rgb("FA644B"))[way more] colorful.
]

// Transparency.
#block(fill: green)[
  #set text(fill: rgb("FF000080"))
  This text is transparent.
]

// Disable font fallback beyond the user-specified list.
// Without disabling, New Computer Modern Math would come to the rescue.
#set text(font: ("PT Sans", "Twitter Color Emoji"), fallback: false)
2π = 𝛼 + 𝛽. ✅


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (number
            (unit))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (number
            (unit))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (number
                (unit))))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))
      (text)
      (code
        (call
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (string)))))
          (content
            (text))))
      (text)))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (string))))))))
        (text))))
  (parbreak)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))
          (tagged
            (ident)
            (bool))))))
  (text)
  (parbreak))

====================
typst/font/text-call-body
====================

// Test string body.
#text("Text") \
#text(red, "Text") \
#text(font: "Ubuntu", blue, "Text") \
#text([Text], teal, font: "IBM Plex Serif") \
#text(forest, font: "New Computer Modern", [Text]) \


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident)
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (ident)
        (tagged
          (ident)
          (string)))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (string))
        (content
          (text)))))
  (linebreak)
  (parbreak))

====================
typst/font/text-bad-argument
====================

// Error: 11-16 unexpected argument
#set text(false)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (bool)))))
  (parbreak))

====================
typst/font/text-style-bad
====================

// Error: 18-24 expected "normal", "italic", or "oblique"
#set text(style: "bold", weight: "thin")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/font/text-bad-extra-argument
====================

// Error: 23-27 unexpected argument
#set text(size: 10pt, 12pt)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (number
            (unit))))))
  (parbreak))

====================
typst/font/text-bad-named-argument
====================

// Error: 11-31 unexpected argument: something
#set text(something: "invalid")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/font/text-unknown-font-family-warning
====================

#text(font: "libertinus serif")[I exist,]
// Warning: 13-26 unknown font family: nonexistent
#text(font: "nonexistent")[but]
// Warning: 17-35 unknown font family: also-nonexistent
#set text(font: "also-nonexistent")
I
// Warning: 23-55 unknown font family: list-of
// Warning: 23-55 unknown font family: nonexistent-fonts
#let var = text(font: ("list-of", "nonexistent-fonts"))[don't]
#var


--------------------

(source_file
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (string)
                (string)))))
        (content
          (text)
          (quote)
          (text)))))
  (code
    (ident))
  (parbreak))

====================
typst/font/text-font-linux-libertine
====================

// Warning: 17-34 Typst's default font has changed from Linux Libertine to its successor Libertinus Serif
// Hint: 17-34 please set the font to `"Libertinus Serif"` instead
#set text(font: "Linux Libertine")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/font/issue-5499-text-fill-in-clip-block
====================


#let t = tiling(
  size: (30pt, 30pt),
  relative: "parent",
  square(
    size: 30pt,
    fill: gradient
      .conic(..color.map.rainbow),
  )
)

#block(clip: false, height: 2em, {
  text(fill: blue, "Hello")
  [ ]
  text(fill: blue.darken(20%).transparentize(50%), "Hello")
  [ ]
  text(fill: gradient.linear(..color.map.rainbow), "Hello")
  [ ]
  text(fill: t, "Hello")
})
#block(clip: true, height: 2em, {
  text(fill: blue, "Hello")
  [ ]
  text(fill: blue.darken(20%).transparentize(50%), "Hello")
  [ ]
  text(fill: gradient.linear(..color.map.rainbow), "Hello")
  [ ]
  text(fill: t, "Hello")
})


--------------------

(source_file
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (tagged
            (ident)
            (string))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (elude
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident))))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (number
            (unit)))
        (block
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (string)))
          (content)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (number
                          (unit))))
                    (ident))
                  (group
                    (number
                      (unit)))))
              (string)))
          (content)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (elude
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident))))))
              (string)))
          (content)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (string)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (number
            (unit)))
        (block
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (string)))
          (content)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (number
                          (unit))))
                    (ident))
                  (group
                    (number
                      (unit)))))
              (string)))
          (content)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (elude
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident))))))
              (string)))
          (content)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (string)))))))
  (parbreak))

====================
typst/font/text-font-types
====================

#let ubuntu = (name: "Ubuntu", covers: regex("[\u{20}-\u{FFFF}]"))
#set text(font: ubuntu)
#set text(font: (ubuntu, "Ubuntu"))


--------------------

(source_file
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (string
                (escape)
                (escape))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (ident)
              (string)))))))
  (parbreak))

====================
typst/font/text-font-covers-chinese
====================

// Without ranges, the quotation mark is using the Latin font.
#set text(font: ("Ubuntu", "Noto Serif CJK SC"))
分别设置“中文”和English字体

// With ranges, the quotation mark is using the Chinese font.
#set text(font: ((name: "Noto Serif CJK SC", covers: regex("[\u{00B7}-\u{3134F}]")), "Ubuntu"))
分别设置“中文”和English字体

// With "latin-in-cjk", the quotation mark is also using the Chinese font.
#set text(font: ((name: "Ubuntu", covers: "latin-in-cjk"), "Noto Serif CJK SC"))
分别设置“中文”和English字体


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (text)
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (string
                        (escape)
                        (escape))))))
              (string)))))))
  (text)
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (string)))
              (string)))))))
  (text)
  (parbreak))

====================
typst/font/text-font-covers-numbers
====================

// Change font only for numbers.
#set text(font: (
  (name: "PT Sans", covers: regex("[0-9]")),
  "Libertinus Serif"
))

The number 123.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (string)))))
              (string)))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/font/text-font-covers-bad-1
====================

// Error: 17-59 coverage regex may only use dot, letters, and character classes
// Hint: 17-59 the regex is applied to each letter individually
#set text(font: (name: "Ubuntu", covers: regex("20-FFFF")))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (string))))))))))
  (parbreak))

====================
typst/font/text-font-covers-bad-2
====================

// Error: 17-65 coverage regex may only use dot, letters, and character classes
// Hint: 17-65 the regex is applied to each letter individually
#set text(font: (name: "Ubuntu", covers: regex("\u{20}-\u{10}")))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (string
                      (escape)
                      (escape)))))))))))
  (parbreak))

====================
typst/font/issue-5262-text-negative-size
====================

#set text(-1pt)

a
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (sign
            (number
              (unit)))))))
  (parbreak)
  (text))

====================
typst/smallcaps/smallcaps
====================

// Test smallcaps.
#smallcaps[Smallcaps]


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/smallcaps/smallcaps-show-rule
====================

// There is no dedicated smallcaps font in typst-dev-assets, so we just use some
// other font to test this show rule.
#show smallcaps: set text(font: "PT Sans")
#smallcaps[Smallcaps]

#show smallcaps: set text(fill: red)
#smallcaps[Smallcaps]
--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (code
    (call
      (ident)
      (content
        (text)))))

====================
typst/raw/raw-empty
====================

// Empty raw block.
Empty raw block:``.


--------------------

(source_file
  (comment)
  (text)
  (raw_span
    (blob))
  (text)
  (parbreak))

====================
typst/raw/raw-consecutive-single-backticks
====================

// No extra space.
`A``B`


--------------------

(source_file
  (comment)
  (raw_span
    (blob))
  (raw_span
    (blob))
  (parbreak))

====================
typst/raw/raw-typst-lang
====================

// Typst syntax inside.
```typ #let x = 1``` \
```typ #f(1)```


--------------------

(source_file
  (comment)
  (raw_blck
    (ident)
    (blob))
  (linebreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-block-no-parbreaks
====================

// Multiline block splits paragraphs.

Text
```rust
fn code() {}
```
Text


--------------------

(source_file
  (comment)
  (parbreak)
  (text)
  (raw_blck
    (ident)
    (blob))
  (text)
  (parbreak))

====================
typst/raw/raw-more-backticks
====================

// Lots of backticks inside.
````
```backticks```
````


--------------------

(source_file
  (comment)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/raw/raw-trimming
====================

// Trimming.

// Space between "rust" and "let" is trimmed.
The keyword ```rust let```.

// Trimming depends on number backticks.
(``) \
(` untrimmed `) \
(``` trimmed` ```) \
(``` trimmed ```) \
(``` trimmed```) \


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (text)
  (raw_blck
    (ident)
    (blob))
  (text)
  (parbreak)
  (comment)
  (text)
  (raw_span
    (blob))
  (text)
  (linebreak)
  (text)
  (raw_span
    (blob))
  (text)
  (linebreak)
  (text)
  (raw_blck
    (blob))
  (text)
  (linebreak)
  (text)
  (raw_blck
    (blob))
  (text)
  (linebreak)
  (text)
  (raw_blck
    (blob))
  (text)
  (linebreak)
  (parbreak))

====================
typst/raw/raw-single-backtick-lang
====================

// Single ticks should not have a language.
`rust let`


--------------------

(source_file
  (comment)
  (raw_span
    (blob))
  (parbreak))

====================
typst/raw/raw-dedent-first-line
====================

// First line is not dedented and leading space is still possible.
     ```   A
        B
       C
     ```


--------------------

(source_file
  (comment)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/raw/raw-dedent-empty-line
====================

// Do not take empty lines into account when computing dedent.
```
        A

        B
```


--------------------

(source_file
  (comment)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/raw/raw-dedent-last-line
====================

// Take last line into account when computing dedent.
```
        A

        B
    ```


--------------------

(source_file
  (comment)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/raw/raw-tab-size
====================

#set raw(tab-size: 8)

```tsv
Year	Month	Day
2000	2	3
2001	2	1
2002	3	10
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-syntaxes
====================

#set page(width: 180pt)
#set text(6pt)
#set raw(syntaxes: "/assets/syntaxes/SExpressions.sublime-syntax")

```sexp
(defun factorial (x)
  (if (zerop x)
    ; with a comment
    1
    (* x (factorial (- x 1)))))
```



--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-theme
====================

// Test code highlighting with custom theme.
#set page(width: 180pt)
#set text(6pt)
#set raw(theme: "/assets/themes/halcyon.tmTheme")
#show raw: it => {
  set text(fill: rgb("a2aabc"))
  rect(
    width: 100%,
    inset: (x: 4pt, y: 5pt),
    radius: 4pt,
    fill: rgb("1d2433"),
    place(right, text(luma(240), it.lang)) + it,
  )
}

```typ
= Chapter 1
#lorem(100)

#let hi = "Hello World"
#show heading: emph
```


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (string)))))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (string))))
              (add
                (call
                  (ident)
                  (group
                    (ident)
                    (call
                      (ident)
                      (group
                        (call
                          (ident)
                          (group
                            (number)))
                        (field
                          (ident)
                          (ident))))))
                (ident))))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-show-set
====================

// Text show rule
#show raw: set text(font: "Roboto")
`Roboto`


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (raw_span
    (blob))
  (parbreak))

====================
typst/raw/raw-align-default
====================

// Text inside raw block should be unaffected by outer alignment by default.
#set align(center)
#set page(width: 180pt)
#set text(6pt)

```py
def something(x):
  return x

a = 342395823859823958329
b = 324923
```


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-align-specified
====================

// Text inside raw block should follow the specified alignment.
#set page(width: 180pt)
#set text(6pt)

#align(center, raw(
  lang: "typ",
  block: true,
  align: right,
  "#let f(x) = x\n#align(center, line(length: 1em))",
))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))
            (tagged
              (ident)
              (ident))
            (string
              (escape)))))))
  (parbreak))

====================
typst/raw/raw-align-invalid
====================

// Error: 17-20 expected `start`, `left`, `center`, `right`, or `end`, found top
#set raw(align: top)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/raw/raw-inline-multiline
====================

#set page(width: 180pt)
#set text(6pt)
#set raw(lang:"python")

Inline raws, multiline e.g. `for i in range(10):
  # Only this line is a comment.
  print(i)` or otherwise e.g. `print(j)`, are colored properly.

Inline raws, multiline e.g. `
# Appears blocky due to linebreaks at the boundary.
for i in range(10):
  print(i)
` or otherwise e.g. `print(j)`, are colored properly.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (raw_span
    (blob))
  (text)
  (raw_span
    (blob))
  (text)
  (parbreak)
  (text)
  (raw_span
    (blob))
  (text)
  (raw_span
    (blob))
  (text)
  (parbreak))

====================
typst/raw/raw-highlight-typ
====================

```typ
= Chapter 1
#lorem(100)

#let hi = "Hello World"
#show heading: emph
```


--------------------

(source_file
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-highlight-typc
====================

#set page(width: auto)

```typ
#set hello()
#set hello()
#set hello.world()
#set hello.my.world()
#let foo(x) = x * 2
#show heading: func
#show module.func: func
#show module.func: it => {}
#foo(ident: ident)
#hello
#hello()
#box[]
#hello.world
#hello.world()
#hello().world()
#hello.my.world
#hello.my.world()
#hello.my().world
#hello.my().world()
#{ hello }
#{ hello() }
#{ hello.world() }
#if foo []
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-highlight-typm
====================

#set page(width: auto)
```typm
1 + 2/3
a^b
hello
hello()
box[]
hello.world
hello.world()
hello.my.world()
f_zeta(x), f_zeta(x)/1
emph(hello.my.world())
emph(hello.my().world)
emph(hello.my().world())
#hello
#hello()
#hello.world
#hello.world()
#box[]
```

--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (raw_blck
    (ident)
    (blob)))

====================
typst/raw/raw-highlight-rust
====================

#set page(width: auto)

```rust
/// A state machine.
#[derive(Debug)]
enum State<'a> { A(u8), B(&'a str) }

fn advance(state: State<'_>) -> State<'_> {
    unimplemented!("state machine")
}
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-highlight-py
====================

#set page(width: auto)

```py
import this

def hi():
  print("Hi!")
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-highlight-cpp
====================

#set page(width: auto)

```cpp
#include <iostream>

int main() {
  std::cout << "Hello, world!";
}
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-highlight-html
====================

#set page(width: auto)

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
  </head>
  <body>
    <h1>Topic</h1>
    <p>The Hypertext Markup Language.</p>
    <script>
      function foo(a, b) {
        return a + b + "string";
      }
    </script>
  </body>
</html>
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-blocky
====================

// Test various raw parsing edge cases.

#let empty = (
  name: "empty",
  input: ``,
  text: "",
  block: false,
)

#let empty-spaces = (
  name: "empty-spaces",
  input: ```   ```,
  text: "",
  block: false,
)

#let empty-newlines = (
  name: "empty-newlines",
  input: ```


```,
  text: "\n",
  block: true,
)

#let newlines-backtick = (
  name: "newlines-backtick",
  input: ```

`

```,
  text: "\n`\n",
  block: true,
)

#let backtick = (
  name: "backtick",
  input: ``` ` ```,
  text: "`",
  block: false,
)

#let lang-backtick = (
  name: "lang-backtick",
  input: ```js ` ```,
  lang: "js",
  text: "`",
  block: false,
)

// The language tag stops on space
#let lang-space = (
  name: "lang-space",
  input: ```js test ```,
  lang: "js",
  text: "test ",
  block: false,
)

// The language tag stops on newline
#let lang-newline = (
  name: "lang-newline",
  input: ```js
test
```,
  lang: "js",
  text: "test",
  block: true,
)

// The first line and the last line are ignored
#let blocky = (
  name: "blocky",
  input: {
```
test
```
},
  text: "test",
  block: true,
)

// A blocky raw should handle dedents
#let blocky-dedent = (
  name: "blocky-dedent",
  input: {
```
 test
 ```
  },
  text: "test",
  block: true,
)

// When there is content in the first line, it should exactly eat a whitespace char.
#let blocky-dedent-firstline = (
  name: "blocky-dedent-firstline",
  input: ``` test
  ```,
  text: "test",
  block: true,
)

// When there is content in the first line, it should exactly eat a whitespace char.
#let blocky-dedent-firstline2 = (
  name: "blocky-dedent-firstline2",
  input: ``` test
```,
  text: "test",
  block: true,
)

// The first line is not affected by dedent, and the middle lines don't consider the whitespace prefix of the first line.
#let blocky-dedent-firstline3 = (
  name: "blocky-dedent-firstline3",
  input: ``` test
     test2
  ```,
  text: "test\n   test2",
  block: true,
)

// The first line is not affected by dedent, and the middle lines don't consider the whitespace prefix of the first line.
#let blocky-dedent-firstline4 = (
  name: "blocky-dedent-firstline4",
  input: ```     test
  test2
  ```,
  text: "    test\ntest2",
  block: true,
)

#let blocky-dedent-lastline = (
  name: "blocky-dedent-lastline",
  input: ```
  test
 ```,
  text: " test",
  block: true,
)

#let blocky-dedent-lastline2 = (
  name: "blocky-dedent-lastline2",
  input: ```
  test
   ```,
  text: "test",
  block: true,
)

#let blocky-tab = (
  name: "blocky-tab",
  input: {
```
	test
```
},
  text: "\ttest",
  block: true,
)

// This one is a bit problematic because there is a trailing tab below "test"
// which the editor constantly wants to remove.
#let blocky-tab-dedent = (
  name: "blocky-tab-dedent",
  input: eval("```\n\ttest\n  \n ```"),
  text: "test\n ",
  block: true,
)

#let extra-first-line-ws = (
  name: "extra-first-line-ws",
  input: eval("```   \n```"),
  text: "",
  block: true,
)

#let cases = (
  empty,
  empty-spaces,
  empty-newlines,
  newlines-backtick,
  backtick,
  lang-backtick,
  lang-space,
  lang-newline,
  blocky,
  blocky-dedent,
  blocky-dedent-firstline,
  blocky-dedent-firstline2,
  blocky-dedent-firstline3,
  blocky-dedent-lastline,
  blocky-dedent-lastline2,
  blocky-tab,
  blocky-tab-dedent,
  extra-first-line-ws,
)

#for c in cases {
  let block = c.block
  assert.eq(c.text, c.input.text, message: "in point " + c.name + ", expect " + repr(c.text) + ", got " + repr(c.input.text) + "")
  assert.eq(block, c.input.block, message: "in point " + c.name + ", expect " + repr(block) + ", got " + repr(c.input.block) + "")
}


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_span
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string
            (escape)))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string
            (escape)
            (escape)))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (ident)
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (ident)
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (ident)
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (block
            (raw_blck
              (blob))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (block
            (raw_blck
              (blob))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string
            (escape)))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string
            (escape)))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (raw_blck
            (blob)))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (block
            (raw_blck
              (blob))))
        (tagged
          (ident)
          (string
            (escape)))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (string
                (escape)
                (escape)
                (escape)
                (escape)))))
        (tagged
          (ident)
          (string
            (escape)))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (string
                (escape)))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident))))
  (parbreak)
  (code
    (for
      (ident)
      (ident)
      (block
        (let
          (ident)
          (field
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (field
              (ident)
              (ident))
            (field
              (field
                (ident)
                (ident))
              (ident))
            (tagged
              (ident)
              (add
                (add
                  (add
                    (add
                      (add
                        (add
                          (string)
                          (field
                            (ident)
                            (ident)))
                        (string))
                      (call
                        (ident)
                        (group
                          (field
                            (ident)
                            (ident)))))
                    (string))
                  (call
                    (ident)
                    (group
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident)))))
                (string)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)
            (field
              (field
                (ident)
                (ident))
              (ident))
            (tagged
              (ident)
              (add
                (add
                  (add
                    (add
                      (add
                        (add
                          (string)
                          (field
                            (ident)
                            (ident)))
                        (string))
                      (call
                        (ident)
                        (group
                          (ident))))
                    (string))
                  (call
                    (ident)
                    (group
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident)))))
                (string))))))))
  (parbreak))

====================
typst/raw/raw-line
====================

#set page(width: 200pt)

```rs
fn main() {
    println!("Hello, world!");
}
```

#show raw.line: it => {
  box(stack(
    dir: ltr,
    box(width: 15pt)[#it.number],
    it.body,
  ))
  linebreak()
}

```rs
fn main() {
    println!("Hello, world!");
}
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (call
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (number
                            (unit)))))
                    (content
                      (code
                        (field
                          (ident)
                          (ident)))))
                  (field
                    (ident)
                    (ident))))))
          (call
            (ident)
            (group))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-line-alternating-fill
====================

#set page(width: 200pt)
#show raw: it => stack(dir: ttb, ..it.lines)
#show raw.line: it => {
  box(
    width: 100%,
    height: 1.75em,
    inset: 0.25em,
    fill: if calc.rem(it.number, 2) == 0 {
      luma(90%)
    } else {
      white
    },
    align(horizon, stack(
      dir: ltr,
      box(width: 15pt)[#it.number],
      it.body,
    ))
  )
}

```typ
#show raw.line: block.with(
  fill: luma(60%)
);

Hello, world!

= A heading for good measure
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (elude
              (field
                (ident)
                (ident))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (branch
                  (cmp
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (field
                          (ident)
                          (ident))
                        (number)))
                    (number))
                  (block
                    (call
                      (ident)
                      (group
                        (number
                          (unit)))))
                  (block
                    (ident))))
              (call
                (ident)
                (group
                  (ident)
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (ident))
                      (call
                        (call
                          (ident)
                          (group
                            (tagged
                              (ident)
                              (number
                                (unit)))))
                        (content
                          (code
                            (field
                              (ident)
                              (ident)))))
                      (field
                        (ident)
                        (ident))))))))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-line-text-fill
====================

#set page(width: 200pt)
#show raw.line: set text(fill: red)

```py
import numpy as np

def f(x):
    return x**2

x = np.linspace(0, 10, 100)
y = f(x)

print(x)
print(y)
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-line-scripting
====================


// Test line extraction works.

#show raw: code => {
  for i in code.lines {
    test(i.count, 10)
  }

  test(code.lines.at(0).text, "import numpy as np")
  test(code.lines.at(1).text, "")
  test(code.lines.at(2).text, "def f(x):")
  test(code.lines.at(3).text, "    return x**2")
  test(code.lines.at(4).text, "")
  test(code.lines.at(5).text, "x = np.linspace(0, 10, 100)")
  test(code.lines.at(6).text, "y = f(x)")
  test(code.lines.at(7).text, "")
  test(code.lines.at(8).text, "print(x)")
  test(code.lines.at(9).text, "print(y)")
  test(code.lines.at(10, default: none), none)
}

```py
import numpy as np

def f(x):
    return x**2

x = np.linspace(0, 10, 100)
y = f(x)

print(x)
print(y)
```


--------------------

(source_file
  (parbreak)
  (comment)
  (parbreak)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (for
            (ident)
            (field
              (ident)
              (ident))
            (block
              (call
                (ident)
                (group
                  (field
                    (ident)
                    (ident))
                  (number)))))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (number)))
                (ident))
              (string)))
          (call
            (ident)
            (group
              (call
                (field
                  (field
                    (ident)
                    (ident))
                  (ident))
                (group
                  (number)
                  (tagged
                    (ident)
                    (none))))
              (none)))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/issue-3601-empty-raw
====================

// Test that empty raw block with `typ` language doesn't cause a crash.
```typ
```


--------------------

(source_file
  (comment)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-empty-lines
====================

// Test raw with multiple empty lines.

#show raw: block.with(width: 100%, fill: gray)

```




```


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (show
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/raw/issue-3841-tabs-in-raw-type-code
====================

// Tab chars were not rendered in raw blocks with lang: "typ(c)"
#raw("#if true {\n\tf()\t// typ\n}", lang: "typ")

#raw("if true {\n\tf()\t// typc\n}", lang: "typc")

```typ
#if true {
	// tabs around f()
	f()	// typ
}
```

```typc
if true {
	// tabs around f()
	f()	// typc
}
```


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string
          (escape)
          (escape)
          (escape)
          (escape))
        (tagged
          (ident)
          (string)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (string
          (escape)
          (escape)
          (escape)
          (escape))
        (tagged
          (ident)
          (string)))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/issue-4662-math-mode-language-for-raw
====================

// Test lang: "typm" syntax highlighting without enclosing dollar signs
#raw("pi^2", lang: "typm")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/raw/issue-2259-raw-color-overwrite
====================

// Test that the color of a raw block is not overwritten
#show raw: set text(fill: blue)

`Hello, World!`

```rs
fn main() {
    println!("Hello, World!");
}
```


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (raw_span
    (blob))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/issue-3191-raw-justify
====================

// Raw blocks should not be justified by default.
```
a b c 
--------------------



====================
typst/raw/issue-3191-raw-normal-paragraphs-still-shrink
====================

// In normal paragraphs, spaces should still be shrunk.
// The first line here serves as a reference, while the second
// uses non-breaking spaces to create an overflowing line
// (which should shrink).
~~~~No shrinking here

~~~~The~spaces~on~this~line~shrink


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (shorthand)
  (shorthand)
  (shorthand)
  (shorthand)
  (text)
  (parbreak)
  (shorthand)
  (shorthand)
  (shorthand)
  (shorthand)
  (text)
  (shorthand)
  (text)
  (shorthand)
  (text)
  (shorthand)
  (text)
  (shorthand)
  (text)
  (shorthand)
  (text)
  (parbreak))

====================
typst/raw/issue-3820-raw-space-when-end-with-backtick
====================

```typ
`code`
```

  ```typ
  `code`
  ```


--------------------

(source_file
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-theme-set-to-auto
====================

```typ
#let hi = "Hello World"
```

#set raw(theme: "/assets/themes/halcyon.tmTheme")
```typ
#let hi = "Hello World"
```

#set raw(theme: auto)
```typ
#let hi = "Hello World"
```


--------------------

(source_file
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-theme-set-to-none
====================

#set raw(theme: none)
```typ
#let foo = "bar"
```


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/raw/raw-unclosed
====================

// Test unterminated raw text.
//
// Note: This test should be the final one in the file because it messes up
// syntax highlighting.
//
// Error: 1-2:1 unclosed raw text
`endless
--------------------



====================
typst/smartquote/smartquote
====================

#set text(lang: "en")
"The horse eats no cucumber salad" was the first sentence ever uttered on the 'telephone.'


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-de
====================

#set text(lang: "de")
"Das Pferd frisst keinen Gurkensalat" war der erste jemals am 'Fernsprecher' gesagte Satz.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-de-ch
====================

#set text(lang: "de", region: "CH")
"Das Pferd frisst keinen Gurkensalat" war der erste jemals am 'Fernsprecher' gesagte Satz.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-es
====================

#set text(lang: "es", region: none)
"El caballo no come ensalada de pepino" fue la primera frase pronunciada por 'teléfono'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (none))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-es-mx
====================

#set text(lang: "es", region: "MX")
"El caballo no come ensalada de pepino" fue la primera frase pronunciada por 'teléfono'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-fr
====================

#set text(lang: "fr")
"Le cheval ne mange pas de salade de concombres" est la première phrase jamais prononcée au 'téléphone'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-fr-ch
====================

#set text(lang: "fr", region: "CH")
"Le cheval ne mange pas de salade de concombres" est la première phrase jamais prononcée au 'téléphone'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-fi
====================

#set text(lang: "fi")
"Hevonen ei syö kurkkusalaattia" oli ensimmäinen koskaan 'puhelimessa' lausuttu lause.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-el
====================

#set text(lang: "el")
"Το άλογο δεν τρώει αγγουροσαλάτα" ήταν η πρώτη πρόταση που ειπώθηκε στο 'τηλέφωνο'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-he
====================

#set text(lang: "he")
"הסוס לא אוכל סלט מלפפונים" היה המשפט ההראשון שנאמר ב'טלפון'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-ro
====================

#set text(lang: "ro")
"Calul nu mănâncă salată de castraveți" a fost prima propoziție rostită vreodată la 'telefon'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-ru
====================

#set text(lang: "ru")
"Лошадь не ест салат из огурцов" - это была первая фраза, сказанная по 'телефону'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-it
====================

#set text(lang: "it")
"Il cavallo non mangia insalata di cetrioli" è stata la prima frase pronunciata al 'telefono'.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-la
====================

#set text(lang: "la")
#set smartquote(alternative: true)
"Equus cucumeris sem non edit" prima sententia in 'telephono' prolata fuit.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-empty
====================

// Test single pair of quotes.
""


--------------------

(source_file
  (comment)
  (quote)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-apostrophe
====================

// Test sentences with numbers and apostrophes.
The 5'11" 'quick' brown fox jumps over the "lazy" dog's ear.

He said "I'm a big fella."


--------------------

(source_file
  (comment)
  (text)
  (quote)
  (text)
  (quote)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-escape
====================

// Test escape sequences.
The 5\'11\" 'quick\' brown fox jumps over the \"lazy' dog\'s ear.


--------------------

(source_file
  (comment)
  (text
    (escape)
    (escape))
  (quote)
  (text
    (escape)
    (escape))
  (quote)
  (text
    (escape))
  (parbreak))

====================
typst/smartquote/smartquote-slash
====================

// Test that smartquotes can open before non-whitespace if not nested.
"Hello"/"World" \
'"Hello"/"World"' \
""Hello"/"World""


--------------------

(source_file
  (comment)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (linebreak)
  (quote)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (quote)
  (linebreak)
  (quote)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-close-before-letter
====================

// Test that smartquotes can close before alphabetic letters.
Straight "A"s and "B"s


--------------------

(source_file
  (comment)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-prime
====================

// Test that primes result after numbers when possible.
A 2" nail. \
'A 2" nail.' \
"A 2" nail."


--------------------

(source_file
  (comment)
  (text)
  (quote)
  (text)
  (linebreak)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (linebreak)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-bracket
====================

// Test that brackets indicate an opening quote.
"a ["b"] c" \
"a b"c"d e"


--------------------

(source_file
  (comment)
  (quote)
  (text)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (text)
  (quote)
  (linebreak)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-disable
====================

// Test turning smart quotes off.
He's told some books contain questionable "example text".

#set smartquote(enabled: false)
He's told some books contain questionable "example text".


--------------------

(source_file
  (comment)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/smartquote/smartquote-disabled-temporarily
====================

// Test changing properties within text.
"She suddenly started speaking french: #text(lang: "fr")['Je suis une banane.']" Roman told me.

Some people's thought on this would be #[#set smartquote(enabled: false); "strange."]


--------------------

(source_file
  (comment)
  (quote)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (quote)
        (text)
        (quote))))
  (quote)
  (text)
  (parbreak)
  (text)
  (quote)
  (text)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (bool))))))
      (quote)
      (text)
      (quote)))
  (parbreak))

====================
typst/smartquote/smartquote-nesting
====================

// Test nested double and single quotes.
"'test statement'" \
"'test' statement" \
"statement 'test'"


--------------------

(source_file
  (comment)
  (quote)
  (quote)
  (text)
  (quote)
  (quote)
  (linebreak)
  (quote)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (linebreak)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-with-embedding-chars
====================

#set text(lang: "fr")
"#"\u{202A}"bonjour#"\u{202C}"" \
#"\u{202A}""bonjour"#"\u{202C}"


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (code
    (string
      (escape)))
  (text)
  (code
    (string
      (escape)))
  (quote)
  (linebreak)
  (code
    (string
      (escape)))
  (quote)
  (text)
  (quote)
  (code
    (string
      (escape)))
  (parbreak))

====================
typst/smartquote/smartquote-custom
====================

// Use language quotes for missing keys, allow partial reset
#set smartquote(quotes: "«»")
"Double and 'Single' Quotes"

#set smartquote(quotes: (double: auto, single: "«»"))
"Double and 'Single' Quotes"


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (auto))
              (tagged
                (ident)
                (string))))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-custom-complex
====================

// Allow 2 graphemes
#set smartquote(quotes: "a\u{0301}a\u{0301}")
"Double and 'Single' Quotes"

#set smartquote(quotes: (single: "a\u{0301}a\u{0301}"))
"Double and 'Single' Quotes"


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string
              (escape)
              (escape)))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (string
                  (escape)
                  (escape)))))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/smartquote-custom-bad-string
====================

// Error: 25-28 expected 2 characters, found 1 character
#set smartquote(quotes: "'")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/smartquote/smartquote-custom-bad-array
====================

// Error: 25-35 expected 2 quotes, found 4 quotes
#set smartquote(quotes: ("'",) * 4)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (mul
              (group
                (string))
              (number)))))))
  (parbreak))

====================
typst/smartquote/smartquote-custom-bad-dict
====================

// Error: 25-45 expected 2 quotes, found 4 quotes
#set smartquote(quotes: (single: ("'",) * 4))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (mul
                  (group
                    (string))
                  (number)))))))))
  (parbreak))

====================
typst/smartquote/issue-3662-pdf-smartquotes
====================

// Smart quotes were not appearing in the PDF outline, because they didn't
// implement `PlainText`.
= It's "Unnormal Heading"
= It’s “Normal Heading”

#set smartquote(enabled: false)
= It's "Unnormal Heading"
= It's 'single quotes'
= It’s “Normal Heading”


--------------------

(source_file
  (comment)
  (comment)
  (section
    (heading
      (text)
      (quote)
      (text)
      (quote)
      (text)
      (quote))
    (content))
  (section
    (heading
      (text))
    (content
      (parbreak)
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (bool))))))))
  (section
    (heading
      (text)
      (quote)
      (text)
      (quote)
      (text)
      (quote))
    (content))
  (section
    (heading
      (text)
      (quote)
      (text)
      (quote)
      (text)
      (quote))
    (content))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/smartquote/issue-1041-smartquotes-in-outline
====================

#set page(width: 15em)
#outline()

= "This" "is" "a" "test"


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (section
    (heading
      (quote)
      (text)
      (quote)
      (quote)
      (text)
      (quote)
      (quote)
      (text)
      (quote)
      (quote)
      (text)
      (quote))
    (content
      (parbreak))))

====================
typst/smartquote/issue-1540-smartquotes-across-newlines
====================

// Test that smart quotes are inferred correctly across newlines.
"test"#linebreak()"test"

"test"\
"test"


--------------------

(source_file
  (comment)
  (quote)
  (text)
  (quote)
  (code
    (call
      (ident)
      (group)))
  (quote)
  (text)
  (quote)
  (parbreak)
  (quote)
  (text)
  (quote)
  (linebreak)
  (quote)
  (text)
  (quote)
  (parbreak))

====================
typst/smartquote/issue-5146-smartquotes-after-equations
====================

$i$'s $i$ 's
--------------------

(source_file
  (math
    (formula
      (letter)))
  (quote)
  (text)
  (math
    (formula
      (letter)))
  (quote)
  (text))

====================
typst/lorem/lorem
====================

// Test basic call.
#lorem(19)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/lorem/lorem-pars
====================

// Test custom paragraphs with user code.
#set text(8pt)

#{
  let sentences = lorem(59)
    .split(".")
    .filter(s => s != "")
    .map(s => s + ".")

  let used = 0
  for s in sentences {
    if used < 2 {
      used += 1
    } else {
      parbreak()
      used = 0
    }
    s.trim()
    [ ]
  }
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (block
      (let
        (ident)
        (call
          (field
            (call
              (field
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (number)))
                    (ident))
                  (group
                    (string)))
                (ident))
              (group
                (lambda
                  (ident)
                  (cmp
                    (ident)
                    (string)))))
            (ident))
          (group
            (lambda
              (ident)
              (add
                (ident)
                (string))))))
      (let
        (ident)
        (number))
      (for
        (ident)
        (ident)
        (block
          (branch
            (cmp
              (ident)
              (number))
            (block
              (assign
                (ident)
                (number)))
            (block
              (call
                (ident)
                (group))
              (assign
                (ident)
                (number))))
          (call
            (field
              (ident)
              (ident))
            (group))
          (content)))))
  (parbreak))

====================
typst/lorem/lorem-missing-words
====================

// Error: 2-9 missing argument: words
#lorem()
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group))))

====================
typst/case/lower-and-upper
====================

#let memes = "ArE mEmEs gReAt?";
#test(lower(memes), "are memes great?")
#test(upper(memes), "ARE MEMES GREAT?")
#test(upper("Ελλάδα"), "ΕΛΛΆΔΑ")


--------------------

(source_file
  (code
    (let
      (ident)
      (string)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (string))))
  (parbreak))

====================
typst/case/upper-bad-type
====================

// Error: 8-9 expected string or content, found integer
#upper(1)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)))))

====================
typst/em/text-size-em-nesting
====================

#set text(size: 5pt)
A // 5pt
#[
  #set text(size: 2em)
  B // 10pt
  #[
    #set text(size: 1.5em + 1pt)
    C // 16pt
    #text(size: 2em)[D] // 32pt
    E // 16pt
  ]
  F // 10pt
]
G // 5pt


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (text)
      (comment)
      (code
        (content
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (add
                      (number
                        (unit))
                      (number
                        (unit))))))))
          (text)
          (comment)
          (code
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (text))))
          (comment)
          (text)
          (comment)))
      (text)
      (comment)))
  (text)
  (comment)
  (parbreak))

====================
typst/em/text-size-em
====================

// Test using ems in arbitrary places.
#set text(size: 5pt)
#set text(size: 2em)
#set square(fill: red)

#let size = {
  let size = 0.25em + 1pt
  for _ in range(3) {
    size *= 2
  }
  size - 3pt
}

#stack(dir: ltr, spacing: 1fr, square(size: size), square(size: 25pt))
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (code
    (let
      (ident)
      (block
        (let
          (ident)
          (add
            (number
              (unit))
            (number
              (unit))))
        (for
          (ident)
          (call
            (ident)
            (group
              (number)))
          (block
            (assign
              (ident)
              (number))))
        (sub
          (ident)
          (number
            (unit))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))))))

====================
typst/deco/underline-overline-strike
====================

#let red = rgb("fc0030")

// Basic strikethrough.
#strike[Statements dreamt up by the utterly deranged.]

// Move underline down.
#underline(offset: 5pt)[Further below.]

// Different color.
#underline(stroke: red, evade: false)[Critical information is conveyed here.]

// Inherits font color.
#text(fill: red, underline[Change with the wind.])

// Both over- and underline.
#overline(underline[Running amongst the wolves.])


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/deco/strike-with
====================

#let redact = strike.with(stroke: 10pt, extent: 0.05em)
#let highlight-custom = strike.with(stroke: 10pt + rgb("abcdef88"), extent: 0.05em)

// Abuse thickness and transparency for redacting and highlighting stuff.
Sometimes, we work #redact[in secret].
There might be #highlight-custom[redacted] things.


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (call
                (ident)
                (group
                  (string)))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/deco/underline-stroke-folding
====================

// Test stroke folding.
#set underline(stroke: 2pt, offset: 2pt)
#underline(text(red, [DANGER!]))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)
            (content
              (text)))))))
  (parbreak))

====================
typst/deco/underline-background
====================

// Test underline background
#set underline(background: true, stroke: (thickness: 0.5em, paint: red, cap: "round"))
#underline[This is in the background]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (string))))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/deco/overline-background
====================

// Test overline background
#set overline(background: true, stroke: (thickness: 0.5em, paint: red, cap: "round"))
#overline[This is in the background]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (string))))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/deco/strike-background
====================

// Test strike background
#set strike(background: true, stroke: 5pt + red)
#strike[This is in the background]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/deco/highlight
====================

// Test highlight.
This is the built-in #highlight[highlight with default color].
We can also specify a customized value
#highlight(fill: green.lighten(80%))[to highlight].


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (number
                  (unit)))))))
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/deco/highlight-bounds
====================

// Test default highlight bounds.
#highlight[ace],
#highlight[base],
#highlight[super],
#highlight[phone #sym.integral]


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/deco/highlight-edges
====================

// Test a tighter highlight.
#set highlight(top-edge: "x-height", bottom-edge: "baseline")
#highlight[ace],
#highlight[base],
#highlight[super],
#highlight[phone #sym.integral]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/deco/highlight-edges-bounds
====================

// Test a bounds highlight.
#set highlight(top-edge: "bounds", bottom-edge: "bounds")
#highlight[abc]
#highlight[abc #sym.integral]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/deco/highlight-radius
====================

// Test highlight radius
#highlight(radius: 3pt)[abc],
#highlight(radius: 1em)[#lorem(5)]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (ident)
            (group
              (number)))))))
  (parbreak))

====================
typst/deco/highlight-stroke
====================

// Test highlight stroke
#highlight(stroke: 2pt + blue)[abc]
#highlight(stroke: (top: blue, left: red, bottom: green, right: orange))[abc]
#highlight(stroke: 1pt, radius: 3pt)[#lorem(5)]
--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (ident))))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (ident)
            (group
              (number))))))))

====================
typst/space/space-collapsing
====================

// Spacing around code constructs.
A#let x = 1;B  #test(x, 1) \
C #let x = 2;D #test(x, 2) \
E#if true [F]G \
H #if true{"I"} J \
K #if true [L] else []M \
#let c = true; N#while c [#(c = false)O] P \
#let c = true; Q #while c { c = false; "R" } S \
T#for _ in (none,) {"U"}V
#let foo = "A" ; \
#foo;B \
#foo; B \
#foo ;B


--------------------



====================
typst/space/space-collapsing-comments
====================

// Test spacing with comments.
A/**/B/**/C \
A /**/ B/**/C \
A /**/B/**/ C


--------------------

(source_file
  (comment)
  (text
    (comment)
    (comment))
  (linebreak)
  (text
    (comment)
    (comment))
  (linebreak)
  (text
    (comment)
    (comment))
  (parbreak))

====================
typst/space/space-collapsing-with-h
====================

// Test spacing collapsing before spacing.
#set align(right)
A #h(0pt) B #h(0pt) \
A B \
A #h(-1fr) B


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group
        (sign
          (number
            (unit))))))
  (text)
  (parbreak))

====================
typst/space/text-font-just-a-space
====================

// Test that a run consisting only of whitespace isn't trimmed.
A#text(font: "IBM Plex Serif")[ ]B


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content)))
  (text)
  (parbreak))

====================
typst/space/text-font-change-after-space
====================

// Test font change after space.
Left #text(font: "IBM Plex Serif")[Right].


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/space/space-collapsing-linebreaks
====================

// Test that linebreak consumed surrounding spaces.
#align(center)[A \ B \ C]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text)
        (linebreak)
        (text)
        (linebreak)
        (text))))
  (parbreak))

====================
typst/space/space-collapsing-stringy-linebreak
====================

// Test that space at start of non-backslash-linebreak line isn't trimmed.
A#"\n" B


--------------------

(source_file
  (comment)
  (text)
  (code
    (string
      (escape)))
  (text)
  (parbreak))

====================
typst/space/space-trailing-linebreak
====================

// Test that trailing space does not force a line break.
LLLLLLLLLLLLLLLLLL R _L_


--------------------

(source_file
  (comment)
  (text)
  (emph
    (text))
  (parbreak))

====================
typst/space/space-ideographic-kept
====================

// Test that ideographic spaces are preserved.
#set text(lang: "ja", font: "Noto Serif CJK JP")

だろうか？　何のために！　私は、


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/space/space-thin-kept
====================

// Test that thin spaces are preserved.
| | U+0020 regular space \
| | U+2009 thin space
--------------------

(source_file
  (comment)
  (text)
  (linebreak)
  (text))

====================
typst/lang/text-lang
====================

// without any region
#set text(font: "Noto Serif CJK TC", lang: "zh")
#outline()


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/lang/text-lang-unknown-region
====================

// with unknown region configured
#set text(font: "Noto Serif CJK TC", lang: "zh", region: "XX")
#outline()


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/lang/text-lang-region
====================

// with region configured
#set text(font: "Noto Serif CJK TC", lang: "zh", region: "TW")
#outline()


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/lang/text-lang-hyphenate
====================

// Ensure that setting the language does have effects.
#set text(hyphenate: true)
#grid(
  columns: 2 * (20pt,),
  gutter: 1fr,
  text(lang: "en")["Eingabeaufforderung"],
  text(lang: "de")["Eingabeaufforderung"],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (content
            (quote)
            (text)
            (quote)))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (content
            (quote)
            (text)
            (quote))))))
  (parbreak))

====================
typst/lang/text-lang-shaping
====================

// Test that the language passed to the shaper has an effect.
#set text(font: "Ubuntu")

// Some lowercase letters are different in Serbian Cyrillic compared to other
// Cyrillic languages. Since there is only one set of Unicode codepoints for
// Cyrillic, these can only be seen when setting the language to Serbian and
// selecting one of the few fonts that support these letterforms.
Бб
#text(lang: "uk")[Бб]
#text(lang: "sr")[Бб]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (comment)
  (comment)
  (comment)
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (parbreak))

====================
typst/lang/text-lang-script-shaping
====================

// Verify that writing script/language combination has an effect
#{
  set text(size:20pt)
  set text(script: "latn", lang: "en")
  [Ş ]
  set text(script: "latn", lang: "ro")
  [Ş ]
  set text(script: "grek", lang: "ro")
  [Ş ]
}


--------------------

(source_file
  (comment)
  (code
    (block
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (string)))))
      (content
        (text))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (string)))))
      (content
        (text))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (string)))))
      (content
        (text))))
  (parbreak))

====================
typst/lang/text-script-bad-type
====================

// Error: 19-23 expected string or auto, found none
#set text(script: none)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (parbreak))

====================
typst/lang/text-script-bad-value
====================

// Error: 19-23 expected three or four letter script code (ISO 15924 or 'math')
#set text(script: "ab")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/lang/text-lang-bad-type
====================

// Error: 17-21 expected string, found none
#set text(lang: none)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (parbreak))

====================
typst/lang/text-lang-bad-value
====================

// Error: 17-20 expected two or three letter language code (ISO 639-1/2/3)
#set text(lang: "ӛ")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/lang/text-lang-bad-value-emoji
====================

// Error: 17-20 expected two or three letter language code (ISO 639-1/2/3)
#set text(lang: "😃")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/lang/text-region-bad-value
====================

// Error: 19-24 expected two letter region code (ISO 3166-1 alpha-2)
#set text(region: "hey")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/lang/text-language-fallback-english
====================

#set text(lang: "qaa")
#outline()
#set text(lang: "qaa", region: "aa")
#outline()


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/lang/text-lang-hint-region-parameter
====================

// Error: 17-24 expected two or three letter language code (ISO 639-1/2/3)
// Hint: 17-24 you should leave only "en" in the `lang` parameter and specify "gb" in the `region` parameter
#set text(lang: "en-gb")
--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string)))))))

====================
typst/coma/coma
====================

#set page(width: 450pt, margin: 1cm)

*Technische Universität Berlin* #h(1fr) *WiSe 2019/2020* \
*Fakultät II, Institut for Mathematik* #h(1fr) Woche 3 \
Sekretariat MA \
Dr. Max Mustermann \
Ola Nordmann, John Doe

#v(3mm)
#align(center)[
  #set par(leading: 3mm)
  #text(1.2em)[*3. Übungsblatt Computerorientierte Mathematik II*] \
  *Abgabe: 03.05.2019* (bis 10:10 Uhr in MA 001) \
  *Alle Antworten sind zu beweisen.*
]

*1. Aufgabe* #h(1fr) (1 + 1 + 2 Punkte)

Ein _Binärbaum_ ist ein Wurzelbaum, in dem jeder Knoten ≤ 2 Kinder hat.
Die Tiefe eines Knotens _v_ ist die Länge des eindeutigen Weges von der Wurzel
zu _v_, und die Höhe von _v_ ist die Länge eines längsten (absteigenden) Weges
von _v_ zu einem Blatt. Die Höhe des Baumes ist die Höhe der Wurzel.

#align(center, image("/assets/images/graph.png", width: 75%))
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (strong
    (text))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (strong
    (text))
  (linebreak)
  (strong
    (text))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (code
          (call
            (call
              (ident)
              (group
                (number
                  (unit))))
            (content
              (strong
                (text)))))
        (linebreak)
        (strong
          (text))
        (text)
        (linebreak)
        (strong
          (text)))))
  (parbreak)
  (strong
    (text))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak)
  (text)
  (emph
    (text))
  (text)
  (text)
  (emph
    (text))
  (text)
  (text)
  (emph
    (text))
  (text)
  (emph
    (text))
  (text)
  (text)
  (emph
    (text))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))))))))

====================
typst/edge/text-edge
====================

#set page(width: 160pt)
#set text(size: 8pt)

#let try(top, bottom) = rect(inset: 0pt, fill: conifer)[
  // Warning: 19-34 unknown font family: ibm plex mono
  #set text(font: "IBM Plex Mono", top-edge: top, bottom-edge: bottom)
  From #top to #bottom
]

#let try-bounds(top, bottom) = rect(inset: 0pt, fill: conifer)[
  // Warning: 19-34 unknown font family: ibm plex mono
  #set text(font: "IBM Plex Mono", top-edge: top, bottom-edge: bottom)
  #top to #bottom: "yay, Typst"
]

#try("ascender", "descender")
#try("ascender", "baseline")
#try("cap-height", "baseline")
#try("x-height", "baseline")
#try-bounds("cap-height", "baseline")
#try-bounds("bounds", "baseline")
#try-bounds("bounds", "bounds")
#try-bounds("x-height", "bounds")

#try(4pt, -2pt)
#try(1pt + 0.3em, -0.15em)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (content
          (comment)
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))))
          (text)
          (code
            (ident))
          (text)
          (code
            (ident))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (content
          (comment)
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (ident))
          (text)
          (code
            (ident))
          (text)
          (quote)
          (text)
          (quote)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (sign
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (add
          (number
            (unit))
          (number
            (unit)))
        (sign
          (number
            (unit))))))
  (parbreak))

====================
typst/edge/text-edge-bad-type
====================

// Error: 21-23 expected "ascender", "cap-height", "x-height", "baseline", "bounds", or length, found array
#set text(top-edge: ())


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group))))))
  (parbreak))

====================
typst/edge/text-edge-bad-value
====================

// Error: 24-26 expected "baseline", "descender", "bounds", or length
#set text(bottom-edge: "")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/edge/text-edge-wrong-edge
====================

// Error: 24-36 expected "baseline", "descender", "bounds", or length
#set text(bottom-edge: "cap-height")
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string)))))))

====================
typst/for/for-loop-basic
====================


// Empty array.
#for x in () [Nope]

// Dictionary is traversed in insertion order.
// Should output `Name: Typst. Age: 2.`.
#for (k, v) in (Name: "Typst", Age: 2) [
  #k: #v.
]

// Block body.
// Should output `[1st, 2nd, 3rd, 4th]`.
#{
  "["
  for v in (1, 2, 3, 4) {
    if v > 1 [, ]
    [#v]
    if v == 1 [st]
    if v == 2 [nd]
    if v == 3 [rd]
    if v >= 4 [th]
   }
   "]"
}

// Content block body.
// Should output `2345`.
#for v in (1, 2, 3, 4, 5, 6, 7) [#if v >= 2 and v <= 5 { repr(v) }]

// Map captured arguments.
#let f1(..args) = args.pos().map(repr)
#let f2(..args) = args.named().pairs().map(p => repr(p.first()) + ": " + repr(p.last()))
#let f(..args) = (f1(..args) + f2(..args)).join(", ")
#f(1, a: 2)


--------------------

(source_file
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (group)
      (content
        (text))))
  (parbreak)
  (comment)
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number)))
      (content
        (code
          (ident))
        (text)
        (code
          (ident))
        (text))))
  (parbreak)
  (comment)
  (comment)
  (code
    (block
      (string)
      (for
        (ident)
        (group
          (number)
          (number)
          (number)
          (number))
        (block
          (branch
            (cmp
              (ident)
              (number))
            (content
              (text)))
          (content
            (code
              (ident)))
          (branch
            (cmp
              (ident)
              (number))
            (content
              (text)))
          (branch
            (cmp
              (ident)
              (number))
            (content
              (text)))
          (branch
            (cmp
              (ident)
              (number))
            (content
              (text)))
          (branch
            (cmp
              (ident)
              (number))
            (content
              (text)))))
      (string)))
  (parbreak)
  (comment)
  (comment)
  (code
    (for
      (ident)
      (group
        (number)
        (number)
        (number)
        (number)
        (number)
        (number)
        (number))
      (content
        (code
          (branch
            (and
              (cmp
                (ident)
                (number))
              (cmp
                (ident)
                (number)))
            (block
              (call
                (ident)
                (group
                  (ident)))))))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (field
          (call
            (field
              (ident)
              (ident))
            (group))
          (ident))
        (group
          (ident)))))
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (field
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (ident))
            (group))
          (ident))
        (group
          (lambda
            (ident)
            (add
              (add
                (call
                  (ident)
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))))
                (string))
              (call
                (ident)
                (group
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))))))))))
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (field
          (group
            (add
              (call
                (ident)
                (group
                  (elude
                    (ident))))
              (call
                (ident)
                (group
                  (elude
                    (ident))))))
          (ident))
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (number)
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/for/for-loop-integrated
====================

#let out = ()

// Values of array.
#for v in (1, 2, 3) {
  out += (v,)
}

// Indices and values of array.
#for (i, v) in ("1", "2", "3").enumerate() {
  test(repr(i + 1), v)
}

// Pairs of dictionary.
#for v in (a: 4, b: 5) {
  out += (v,)
}

// Keys and values of dictionary.
#for (k, v) in (a: 6, b: 7) {
  out += (k,)
  out += (v,)
}

#test(out, (1, 2, 3, ("a", 4), ("b", 5), "a", 6, "b", 7))

// Grapheme clusters of string.
#let first = true
#let joined = for c in "abc👩‍👩‍👦‍👦" {
  if not first { ", " }
  first = false
  c
}

#test(joined, "a, b, c, 👩‍👩‍👦‍👦")

// Return value.
#test(for v in "" [], none)
#test(type(for v in "1" []), content)


--------------------

(source_file
  (code
    (let
      (ident)
      (group)))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (group
        (number)
        (number)
        (number))
      (block
        (assign
          (ident)
          (group
            (ident))))))
  (parbreak)
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (call
        (field
          (group
            (string)
            (string)
            (string))
          (ident))
        (group))
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (add
                  (ident)
                  (number))))
            (ident))))))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))
      (block
        (assign
          (ident)
          (group
            (ident))))))
  (parbreak)
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))
      (block
        (assign
          (ident)
          (group
            (ident)))
        (assign
          (ident)
          (group
            (ident))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)
          (number)
          (group
            (string)
            (number))
          (group
            (string)
            (number))
          (string)
          (number)
          (string)
          (number)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (bool)))
  (code
    (let
      (ident)
      (for
        (ident)
        (string)
        (block
          (branch
            (not
              (ident))
            (block
              (string)))
          (assign
            (ident)
            (bool))
          (ident)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (for
          (ident)
          (string)
          (content))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (for
              (ident)
              (string)
              (content))))
        (ident))))
  (parbreak))

====================
typst/for/for-loop-over-bool
====================

// Uniterable expression.
// Error: 11-15 cannot loop over boolean
#for v in true {}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (ident)
      (bool)
      (block)))
  (parbreak))

====================
typst/for/for-loop-over-string
====================

// Keys and values of strings.
// Error: 6-12 cannot destructure values of string
#for (k, v) in "hi" {
  dont-care
}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (string)
      (block
        (ident))))
  (parbreak))

====================
typst/for/for-loop-destructuring-without-parentheses
====================

// Destructuring without parentheses.
// Error: 7-8 unexpected comma
// Hint: 7-8 destructuring patterns must be wrapped in parentheses
#for k, v in (a: 4, b: 5) {
  dont-care
}


--------------------



====================
typst/for/for-loop-destructuring-half
====================

// Error: 7-8 unexpected comma
// Hint: 7-8 destructuring patterns must be wrapped in parentheses
#for k, in () {}


--------------------



====================
typst/for/for-loop-incomplete
====================

// Error: 5 expected pattern
#for

// Error: 5 expected pattern
#for//

// Error: 6 expected pattern
#{for}

// Error: 7 expected keyword `in`
#for v

// Error: 10 expected expression
#for v in

// Error: 15 expected block
#for v in iter

// Error: 5 expected pattern
#for
v in iter {}

// Error: 7-10 expected pattern, found string
// Error: 16 expected block
A#for "v" thing

// Error: 6-9 expected pattern, found string
#for "v" in iter {}

// Error: 7 expected keyword `in`
#for a + b in iter {}
--------------------



====================
typst/destructuring/destructuring-group-1
====================

// This wasn't allowed.
#let ((x)) = 1
#test(x, 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (group
          (ident)))
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-group-2
====================

// This also wasn't allowed.
#let ((a, b)) = (1, 2)
#test(a, 1)
#test(b, 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (group
          (ident)
          (ident)))
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-dict-underscore
====================

// Here, `best` was accessed as a variable, where it shouldn't have.
#{
  (best: _) = (best: "brr")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (assign
        (group
          (tagged
            (ident)
            (ident)))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/destructuring/destructuring-dict-array-at
====================

// Same here.
#{
  let array = (1, 2, 3, 4)
  (test: array.at(1), best: _) = (test: "baz", best: "brr")
  test(array, (1, "baz", 3, 4))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)
          (number)))
      (assign
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (number))))
          (tagged
            (ident)
            (ident)))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))
      (call
        (ident)
        (group
          (ident)
          (group
            (number)
            (string)
            (number)
            (number))))))
  (parbreak))

====================
typst/destructuring/destructuring-dict-bad
====================

// Error: 7-10 expected identifier, found group
// Error: 12-14 expected pattern, found integer
#let ((a): 10) = "world"


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (tagged
          (group
            (ident))
          (number)))
      (string)))
  (parbreak))

====================
typst/destructuring/destructuring-bad-duplicate
====================

// Here, `a` is not duplicate, where it was previously identified as one.
#let f((a: b), (c,), a) = (a, b, c)
#test(f((a: 1), (2,), 3), (3, 1, 2))


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (group
            (tagged
              (ident)
              (ident)))
          (group
            (ident))
          (ident)))
      (group
        (ident)
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (tagged
                (ident)
                (number)))
            (group
              (number))
            (number)))
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-non-atomic
====================

// Ensure that we can't have non-atomic destructuring.
#let x = 1
#let c = [#() = ()]
#test(c.children.last(), [()])


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (ident)
      (content
        (code
          (group))
        (text))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (field
              (ident)
              (ident))
            (ident))
          (group))
        (content
          (text)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array
====================

// Simple destructuring.
#let (a, b) = (1, 2)
#test(a, 1)
#test(b, 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-single-item
====================

#let (a,) = (1,)
#test(a, 1)


--------------------

(source_file
  (code
    (let
      (group
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-placeholders
====================

// Destructuring with multiple placeholders.
#let (a, _, c, _) = (1, 2, 3, 4)
#test(a, 1)
#test(c, 3)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (ident)
        (ident)
        (ident))
      (group
        (number)
        (number)
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-sink-at-end
====================

// Destructuring with a sink.
#let (a, b, ..c) = (1, 2, 3, 4, 5, 6)
#test(a, 1)
#test(b, 2)
#test(c, (3, 4, 5, 6))


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (ident)
        (elude
          (ident)))
      (group
        (number)
        (number)
        (number)
        (number)
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-sink-in-middle
====================

// Destructuring with a sink in the middle.
#let (a, ..b, c) = (1, 2, 3, 4, 5, 6)
#test(a, 1)
#test(b, (2, 3, 4, 5))
#test(c, 6)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (elude
          (ident))
        (ident))
      (group
        (number)
        (number)
        (number)
        (number)
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-sink-at-start-empty
====================

// Destructuring with an empty sink.
#let (..a, b, c) = (1, 2)
#test(a, ())
#test(b, 1)
#test(c, 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (elude
          (ident))
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-sink-in-middle-empty
====================

// Destructuring with an empty sink.
#let (a, ..b, c) = (1, 2)
#test(a, 1)
#test(b, ())
#test(c, 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (elude
          (ident))
        (ident))
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-sink-at-end-empty
====================

// Destructuring with an empty sink.
#let (a, b, ..c) = (1, 2)
#test(a, 1)
#test(b, 2)
#test(c, ())


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (ident)
        (elude
          (ident)))
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-sink-empty
====================

// Destructuring with an empty sink and empty array.
#let (..a) = ()
#test(a, ())


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (elude
          (ident)))
      (group)))
  (code
    (call
      (ident)
      (group
        (ident)
        (group))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-with-unnamed-sink
====================

// Destructuring with unnamed sink.
#let (a, .., b) = (1, 2, 3, 4)
#test(a, 1)
#test(b, 4)

// Error: 10-11 duplicate binding: a
#let (a, a) = (1, 2)

// Error: 12-15 only one destructuring sink is allowed
#let (..a, ..a) = (1, 2)

// Error: 12-13 duplicate binding: a
#let (a, ..a) = (1, 2)

// Error: 13-14 duplicate binding: a
#let (a: a, a) = (a: 1, b: 2)

// Error: 13-20 expected pattern, found function call
#let (a, b: b.at(0)) = (a: 1, b: 2)

// Error: 7-14 expected pattern, found function call
#let (a.at(0),) = (1,)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (elude)
        (ident))
      (group
        (number)
        (number)
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (group
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (group
        (elude
          (ident))
        (elude
          (ident)))
      (group
        (number)
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (group
        (ident)
        (elude
          (ident)))
      (group
        (number)
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (ident))
        (ident))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (parbreak)
  (comment)
  (code
    (let
      (group
        (ident)
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (parbreak)
  (comment)
  (code
    (let
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number))))
      (group
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-empty-array
====================

#let () = ()


--------------------

(source_file
  (code
    (let
      (group)
      (group)))
  (parbreak))

====================
typst/destructuring/destructuring-let-empty-array-too-many-elements
====================

// Error: 6-8 too many elements to destructure
// Hint: 6-8 the provided array has a length of 2, but the pattern expects an empty array
#let () = (1, 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group)
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-too-few-elements
====================

// Error: 6-15 not enough elements to destructure
// Hint: 6-15 the provided array has a length of 2, but the pattern expects 3 elements
#let (a, b, c) = (1, 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (ident)
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-too-few-elements-with-sink
====================

// Error: 6-20 not enough elements to destructure
// Hint: 6-20 the provided array has a length of 2, but the pattern expects at least 3 elements
#let (..a, b, c, d) = (1, 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (elude
          (ident))
        (ident)
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-too-few-elements-with-sink-1-element
====================

// Error: 6-14 not enough elements to destructure
// Hint: 6-14 the provided array has a length of 0, but the pattern expects at least 1 element
#let (..a, b) = ()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (elude
          (ident))
        (ident))
      (group)))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-bool-invalid
====================

// Error: 6-12 cannot destructure boolean
#let (a, b) = true


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (ident))
      (bool)))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict
====================

// Simple destructuring.
#let (a: a, b, x: c) = (a: 1, b: 2, x: 3)
#test(a, 1)
#test(b, 2)
#test(c, 3)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (ident))
        (ident)
        (tagged
          (ident)
          (ident)))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-with-sink-at-end
====================

// Destructuring with a sink.
#let (a: _, ..b) = (a: 1, b: 2, c: 3)
#test(b, (b: 2, c: 3))


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (ident))
        (elude
          (ident)))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-with-sink-in-middle
====================

// Destructuring with a sink in the middle.
#let (a: _, ..b, c: _) = (a: 1, b: 2, c: 3)
#test(b, (b: 2))


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (ident))
        (elude
          (ident))
        (tagged
          (ident)
          (ident)))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-with-sink-at-end-empty
====================

// Destructuring with an empty sink.
#let (a: _, ..b) = (a: 1)
#test(b, (:))


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (ident))
        (elude
          (ident)))
      (group
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-with-sink-empty
====================

// Destructuring with an empty sink and empty dict.
#let (..a) = (:)
#test(a, (:))


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (elude
          (ident)))
      (group)))
  (code
    (call
      (ident)
      (group
        (ident)
        (group))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-with-unnamed-sink
====================

// Destructuring with unnamed sink.
#let (a, ..) = (a: 1, b: 2)
#test(a, 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (elude))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-nested
====================

// Nested destructuring.
#let ((a, b), (key: c)) = ((1, 2), (key: 3))
#test((a, b, c), (1, 2, 3))


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (group
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))
      (group
        (group
          (number)
          (number))
        (group
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (group
          (ident)
          (ident)
          (ident))
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-key-string-invalid
====================

// Keyed destructuring is not currently supported.
// Error: 7-18 expected pattern, found string
#let ("spacy key": val) = ("spacy key": 123)
#val


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (tagged
          (string)
          (ident)))
      (group
        (tagged
          (string)
          (number)))))
  (code
    (ident))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-key-expr-invalid
====================

// Keyed destructuring is not currently supported.
#let x = "spacy key"
// Error: 7-10 expected identifier, found group
#let ((x): v) = ("spacy key": 123)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (string)))
  (comment)
  (code
    (let
      (group
        (tagged
          (group
            (ident))
          (ident)))
      (group
        (tagged
          (string)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-array-trailing-placeholders
====================

// Trailing placeholders.
// Error: 6-21 not enough elements to destructure
// Hint: 6-21 the provided array has a length of 1, but the pattern expects 5 elements
#let (a, _, _, _, _) = (1,)
#test(a, 1)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (group
        (ident)
        (ident)
        (ident)
        (ident)
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-patterns-invalid
====================

// Error: 10-13 expected pattern, found string
// Error: 18-19 expected pattern, found integer
#let (a: "a", b: 2) = (a: 1, b: 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number)))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-shorthand-missing-key
====================

// Error: 10-11 dictionary does not contain key "b"
#let (a, b) = (a: 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-missing-key
====================

// Error: 10-11 dictionary does not contain key "b"
#let (a, b: b) = (a: 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident)
        (tagged
          (ident)
          (ident)))
      (group
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-let-dict-from-array
====================

// Error: 7-11 cannot destructure named pattern from an array
#let (a: a, b) = (1, 2, 3)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (tagged
          (ident)
          (ident))
        (ident))
      (group
        (number)
        (number)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-during-loop-continue
====================

// Test continue while destructuring.
// Should output "one = I \ two = II \ one = I".
#for num in (1, 2, 3, 1) {
  let (word, roman) = if num == 1 {
    ("one", "I")
  } else if num == 2 {
    ("two", "II")
  } else {
    continue
  }
  [#word = #roman \ ]
}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (ident)
      (group
        (number)
        (number)
        (number)
        (number))
      (block
        (let
          (group
            (ident)
            (ident))
          (branch
            (cmp
              (ident)
              (number))
            (block
              (group
                (string)
                (string)))
            (branch
              (cmp
                (ident)
                (number))
              (block
                (group
                  (string)
                  (string)))
              (block
                (flow)))))
        (content
          (code
            (ident))
          (text)
          (code
            (ident))
          (linebreak)))))
  (parbreak))

====================
typst/destructuring/destructuring-assign
====================

// Test destructuring assignments.

#let a = none
#let b = none
#let c = none
#((a,) = (1,))
#test(a, 1)

#((_, a, b, _) = (1, 2, 3, 4))
#test(a, 2)
#test(b, 3)

#((a, b, ..c) = (1, 2, 3, 4, 5, 6))
#test(a, 1)
#test(b, 2)
#test(c, (3, 4, 5, 6))

#((a: a, b, x: c) = (a: 1, b: 2, x: 3))
#test(a, 1)
#test(b, 2)
#test(c, 3)

#let a = (1, 2)
#((a: a.at(0), b) = (a: 3, b: 4))
#test(a, (3, 2))
#test(b, 4)

#let a = (1, 2)
#((a.at(0), b) = (3, 4))
#test(a, (3, 2))
#test(b, 4)

#((a, ..b) = (1, 2, 3, 4))
#test(a, 1)
#test(b, (2, 3, 4))

#let a = (1, 2)
#((b, ..a.at(0)) = (1, 2, 3, 4))
#test(a, ((2, 3, 4), 2))
#test(b, 1)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (none)))
  (code
    (let
      (ident)
      (none)))
  (code
    (let
      (ident)
      (none)))
  (code
    (group
      (assign
        (group
          (ident))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (code
    (group
      (assign
        (group
          (ident)
          (ident)
          (ident)
          (ident))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (code
    (group
      (assign
        (group
          (ident)
          (ident)
          (elude
            (ident)))
        (group
          (number)
          (number)
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)
          (number)
          (number)))))
  (parbreak)
  (code
    (group
      (assign
        (group
          (tagged
            (ident)
            (ident))
          (ident)
          (tagged
            (ident)
            (ident)))
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (number))))
          (ident))
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (ident))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (code
    (group
      (assign
        (group
          (ident)
          (elude
            (ident)))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (number)
          (number)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (ident)
          (elude
            (call
              (field
                (ident)
                (ident))
              (group
                (number)))))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (group
            (number)
            (number)
            (number))
          (number)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/destructuring/destructuring-assign-commas
====================

// Test comma placement in destructuring assignment.
#let array = (1, 2, 3)
#((key: array.at(1)) = (key: "hi"))
#test(array, (1, "hi", 3))

#let array = (1, 2, 3)
#((array.at(1)) = ("hi"))
#test(array, (1, "hi", 3))

#let array = (1, 2, 3)
#((array.at(1),) = ("hi",))
#test(array, (1, "hi", 3))

#let array = (1, 2, 3)
#((array.at(1)) = ("hi",))
#test(array, (1, ("hi",), 3))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (number)))))
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (string)
          (number)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (string)
          (number)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (string)
          (number)))))
  (parbreak)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (group
            (string))
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-assign-nested
====================

// Test nested destructuring assignment.
#let a
#let b
#let c
#(((a, b), (key: c)) = ((1, 2), (key: 3)))
#test((a, b, c), (1, 2, 3))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)))
  (code
    (let
      (ident)))
  (code
    (let
      (ident)))
  (code
    (group
      (assign
        (group
          (group
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (group
          (group
            (number)
            (number))
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (group
          (ident)
          (ident)
          (ident))
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/destructuring/destructuring-assign-nested-invalid
====================

#let array = (1, 2, 3)
// Error: 3-17 cannot destructure string
#((array.at(1),) = ("hi"))
#test(array, (1, ("hi",), 3))


--------------------

(source_file
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (comment)
  (code
    (group
      (assign
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (number)
          (group
            (string))
          (number)))))
  (parbreak))

====================
typst/destructuring/issue-3275-normal-variable
====================

// Normal variable.
#for x in (1, 2) {}
#for x in (a: 1, b: 2) {}
#for x in "foo" {}
#for x in bytes("😊") {}


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (group
        (number)
        (number))
      (block)))
  (code
    (for
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))
      (block)))
  (code
    (for
      (ident)
      (string)
      (block)))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (string)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-placeholder
====================

// Placeholder.
#for _ in (1, 2) {}
#for _ in (a: 1, b: 2) {}
#for _ in "foo" {}
#for _ in bytes("😊") {}


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (group
        (number)
        (number))
      (block)))
  (code
    (for
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))
      (block)))
  (code
    (for
      (ident)
      (string)
      (block)))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (string)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring
====================

// Destructuring.
#for (a,b,c) in (("a", 1, bytes(())), ("b", 2, bytes(""))) {}
#for (a, ..) in (("a", 1, bytes(())), ("b", 2, bytes(""))) {}
#for (k, v)  in (a: 1, b: 2, c: 3) {}
#for (.., v) in (a: 1, b: 2, c: 3) {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident)
        (ident))
      (group
        (group
          (string)
          (number)
          (call
            (ident)
            (group
              (group))))
        (group
          (string)
          (number)
          (call
            (ident)
            (group
              (string)))))
      (block)))
  (code
    (for
      (group
        (ident)
        (elude))
      (group
        (group
          (string)
          (number)
          (call
            (ident)
            (group
              (group))))
        (group
          (string)
          (number)
          (call
            (ident)
            (group
              (string)))))
      (block)))
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))
      (block)))
  (code
    (for
      (group
        (elude)
        (ident))
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-loop-over-content
====================

// Error: 11-17 cannot loop over content
#for x in [1, 2] {}


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (content
        (text))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-loop-over-arguments
====================

// Error: 11-25 cannot loop over arguments
#for _ in arguments("a") {}


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (string)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-loop-over-integer
====================

// Error: 16-21 cannot loop over integer
#for (x, y) in 12306 {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (number)
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-content
====================

// Error: 16-22 cannot loop over content
#for (x, y) in [1, 2] {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (content
        (text))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-string
====================

// Error: 6-12 cannot destructure values of string
#for (x, y) in "foo" {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (string)
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-string-array
====================

// Error: 6-12 cannot destructure string
#for (x, y) in ("foo", "bar") {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (string)
        (string))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-bytes
====================

// Error: 6-12 cannot destructure values of bytes
#for (x, y) in bytes("😊") {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (call
        (ident)
        (group
          (string)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-bytes-array
====================

// Error: 6-12 cannot destructure bytes
#for (x, y) in (bytes((1,2)), bytes((1,2))) {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)))))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-int-array
====================

// Error: 6-12 cannot destructure integer
#for (x, y) in (1, 2) {}


--------------------

(source_file
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (number)
        (number))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-2d-array-1
====================

// Error: 6-12 not enough elements to destructure
// Hint: 6-12 the provided array has a length of 1, but the pattern expects 2 elements
#for (x, y) in ((1,), (2,)) {}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (group
          (number))
        (group
          (number)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-3275-destructuring-loop-over-2d-array-2
====================

// Error: 6-12 too many elements to destructure
// Hint: 6-12 the provided array has a length of 3, but the pattern expects 2 elements
#for (x, y) in ((1,2,3), (4,5,6)) {}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (group
        (ident)
        (ident))
      (group
        (group
          (number)
          (number)
          (number))
        (group
          (number)
          (number)
          (number)))
      (block)))
  (parbreak))

====================
typst/destructuring/issue-4573-destructuring-unclosed-delimiter
====================

// Tests a case where parsing within an incorrectly predicted paren expression
// (the "outer" assignment) would put the parser in an invalid state when
// reloading a stored prediction (the "inner" assignment) and cause a panic when
// generating the unclosed delimiter error. See the comment in the issue for
// more details.
#{
  (
    // Error: 5-7 expected pattern, found keyword `if`
    // Hint: 5-7 keyword `if` is not allowed as an identifier; try `if_` instead
    // Error: 9 expected comma
    // Error: 13-17 unexpected keyword `else`
    // Error: 20 expected comma
    if x {} else {}
    // Error: 5-6 unclosed delimiter
    { () = "inner"
  ) = "outer"
}

--------------------



====================
typst/include/include-file
====================

#set page(width: 200pt)

// Include a file
#include "modules/chap1.typ"

// Expression as a file name.
#let chap2 = include "modu" + "les/chap" + "2.typ"

-- _Intermission_ --
#chap2


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (code
    (include
      (string)))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (include
        (add
          (add
            (string)
            (string))
          (string)))))
  (parbreak)
  (shorthand)
  (emph
    (text))
  (shorthand)
  (code
    (ident))
  (parbreak))

====================
typst/include/include-file-not-found
====================

#{
  // Error: 19-38 file not found (searched at tests/suite/scripting/modules/chap3.typ)
  let x = include "modules/chap3.typ"
}


--------------------

(source_file
  (code
    (block
      (comment)
      (let
        (ident)
        (include
          (string)))))
  (parbreak))

====================
typst/include/include-no-bindings
====================

#include "modules/chap1.typ"

// The variables of the file should not appear in this scope.
// Error: 2-6 unknown variable: name
#name


--------------------

(source_file
  (code
    (include
      (string)))
  (parbreak)
  (comment)
  (comment)
  (code
    (ident))
  (parbreak))

====================
typst/include/include-semicolon-or-linebreak
====================

// Error: 18 expected semicolon or line break
#include "hi.typ" Hi
--------------------



====================
typst/closure/closure-without-params-non-atomic
====================

// Don't parse closure directly in content.

#let x = "x"

// Should output `x => y`.
#x => y


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (string)))
  (parbreak)
  (comment)
  (code
    (ident))
  (text)
  (parbreak))

====================
typst/closure/closure-without-captures
====================

// Basic closure without captures.
#{
  let adder = (x, y) => x + y
  test(adder(2, 3), 5)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (lambda
          (group
            (ident)
            (ident))
          (add
            (ident)
            (ident))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number)
              (number)))
          (number)))))
  (parbreak))

====================
typst/closure/closure-as-arg
====================

// Pass closure as argument and return closure.
// Also uses shorthand syntax for a single argument.
#{
  let chain = (f, g) => (x) => f(g(x))
  let f = x => x + 1
  let g = x => 2 * x
  let h = chain(f, g)
  test(h(2), 5)
}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (block
      (let
        (ident)
        (lambda
          (group
            (ident)
            (ident))
          (lambda
            (group
              (ident))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (ident))))))))
      (let
        (ident)
        (lambda
          (ident)
          (add
            (ident)
            (number))))
      (let
        (ident)
        (lambda
          (ident)
          (mul
            (number)
            (ident))))
      (let
        (ident)
        (call
          (ident)
          (group
            (ident)
            (ident))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number)))
          (number)))))
  (parbreak))

====================
typst/closure/closure-capture-from-popped-stack-frame
====================

// Capture environment.
#{
  let mark = "!"
  let greet = {
    let hi = "Hi"
    name => {
        hi + ", " + name + mark
    }
  }

  test(greet("Typst"), "Hi, Typst!")

  // Changing the captured variable after the closure definition has no effect.
  mark = "?"
  test(greet("Typst"), "Hi, Typst!")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (string))
      (let
        (ident)
        (block
          (let
            (ident)
            (string))
          (lambda
            (ident)
            (block
              (add
                (add
                  (add
                    (ident)
                    (string))
                  (ident))
                (ident))))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)))
          (string)))
      (comment)
      (assign
        (ident)
        (string))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)))
          (string)))))
  (parbreak))

====================
typst/closure/closure-shadows-outer-var
====================

// Redefined variable.
#{
  let x = 1
  let f() = {
    let x = x + 2
    x
  }
  test(f(), 3)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (number))
      (let
        (call
          (ident)
          (group))
        (block
          (let
            (ident)
            (add
              (ident)
              (number)))
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group))
          (number)))))
  (parbreak))

====================
typst/closure/closure-shadows-outer-var-import
====================

// Import bindings.
#{
  let b = "module.typ"
  let f() = {
    import b: b
    b
  }
  test(f(), 1)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (string))
      (let
        (call
          (ident)
          (group))
        (block
          (import
            (ident)
            (binding
              (ident)))
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group))
          (number)))))
  (parbreak))

====================
typst/closure/closure-shadows-outer-var-for-loop
====================

// For loop bindings.
#{
  let v = (1, 2, 3)
  let f() = {
    let s = 0
    for v in v { s += v }
    s
  }
  test(f(), 6)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (let
        (call
          (ident)
          (group))
        (block
          (let
            (ident)
            (number))
          (for
            (ident)
            (ident)
            (block
              (assign
                (ident)
                (ident))))
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group))
          (number)))))
  (parbreak))

====================
typst/closure/closure-let-basic
====================

// Let + closure bindings.
#{
  let g = "hi"
  let f() = {
    let g() = "bye"
    g()
  }
  test(f(), "bye")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (string))
      (let
        (call
          (ident)
          (group))
        (block
          (let
            (call
              (ident)
              (group))
            (string))
          (call
            (ident)
            (group))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group))
          (string)))))
  (parbreak))

====================
typst/closure/closure-let-args
====================

// Parameter bindings.
#{
  let x = 5
  let g() = {
    let f(x, y: x) = x + y
    f
  }

  test(g()(8), 13)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (number))
      (let
        (call
          (ident)
          (group))
        (block
          (let
            (call
              (ident)
              (group
                (ident)
                (tagged
                  (ident)
                  (ident))))
            (add
              (ident)
              (ident)))
          (ident)))
      (call
        (ident)
        (group
          (call
            (call
              (ident)
              (group))
            (group
              (number)))
          (number)))))
  (parbreak))

====================
typst/closure/closure-bad-capture
====================

// Don't leak environment.
#{
  // Error: 16-17 unknown variable: x
  let func() = x
  let x = "hi"
  func()
}


--------------------

(source_file
  (comment)
  (code
    (block
      (comment)
      (let
        (call
          (ident)
          (group))
        (ident))
      (let
        (ident)
        (string))
      (call
        (ident)
        (group))))
  (parbreak))

====================
typst/closure/closure-missing-arg-positional
====================

// Too few arguments.
#{
  let types(x, y) = "[" + str(type(x)) + ", " + str(type(y)) + "]"
  test(types(14%, 12pt), "[ratio, length]")

  // Error: 8-21 missing argument: y
  test(types("nope"), "[string, none]")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (ident)
            (ident)))
        (add
          (add
            (add
              (add
                (string)
                (call
                  (ident)
                  (group
                    (call
                      (ident)
                      (group
                        (ident))))))
              (string))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (ident))))))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (string)))
      (comment)
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)))
          (string)))))
  (parbreak))

====================
typst/closure/closure-too-many-args-positional
====================

// Too many arguments.
#{
  let f(x) = x + 1

  // Error: 8-13 unexpected argument
  f(1, "two", () => x)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (ident)))
        (add
          (ident)
          (number)))
      (comment)
      (call
        (ident)
        (group
          (number)
          (string)
          (lambda
            (group)
            (ident))))))
  (parbreak))

====================
typst/closure/closure-capture-in-lvalue
====================

// Mutable method with capture in argument.
#let x = "b"
#let f() = {
  let a = (b: 5)
  a.at(x) = 10
  a
}
#f()


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (string)))
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (let
          (ident)
          (group
            (tagged
              (ident)
              (number))))
        (assign
          (call
            (field
              (ident)
              (ident))
            (group
              (ident)))
          (number))
        (ident))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/closure/closure-capture-mutate
====================

#let x = ()
#let f() = {
  // Error: 3-4 variables from outside the function are read-only and cannot be modified
  x.at(1) = 2
}
#f()


--------------------

(source_file
  (code
    (let
      (ident)
      (group)))
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (comment)
        (assign
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (number)))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/closure/closure-named-args-basic
====================

// Named arguments.
#{
  let greet(name, birthday: false) = {
    if birthday { "Happy Birthday, " } else { "Hey, " } + name + "!"
  }

  test(greet("Typst"), "Hey, Typst!")
  test(greet("Typst", birthday: true), "Happy Birthday, Typst!")

  // Error: 23-35 unexpected argument: whatever
  test(greet("Typst", whatever: 10))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (ident)
            (tagged
              (ident)
              (bool))))
        (block
          (add
            (add
              (branch
                (ident)
                (block
                  (string))
                (block
                  (string)))
              (ident))
            (string))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)
              (tagged
                (ident)
                (bool))))
          (string)))
      (comment)
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)
              (tagged
                (ident)
                (number))))))))
  (parbreak))

====================
typst/closure/closure-args-sink
====================

// Parameter unpacking.
#let f((a, b), ..c) = (a, b, c)
#test(f((1, 2), 3, 4), (1, 2, (3, 4)))

#let f((k: a, b), c: 3, (d,)) = (a, b, c, d)
#test(f((k: 1, b: 2), (4,)), (1, 2, 3, 4))

// Error: 8-14 expected identifier, found destructuring pattern
#let f((a, b): 0) = none

// Error: 10-19 expected pattern, found array
#let f(..(a, b: c)) = none

// Error: 10-16 expected pattern, found array
#let f(..(a, b)) = none


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (group
            (ident)
            (ident))
          (elude
            (ident))))
      (group
        (ident)
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number))
            (number)
            (number)))
        (group
          (number)
          (number)
          (group
            (number)
            (number))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (group
            (tagged
              (ident)
              (ident))
            (ident))
          (tagged
            (ident)
            (number))
          (group
            (ident))))
      (group
        (ident)
        (ident)
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number)))
            (group
              (number))))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (group
              (ident)
              (ident))
            (number))))
      (none)))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (call
            (elude)
            (group
              (ident)
              (tagged
                (ident)
                (ident))))))
      (none)))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (call
            (elude)
            (group
              (ident)
              (ident)))))
      (none)))
  (parbreak))

====================
typst/closure/closure-param-duplicate-positional
====================

// Error: 11-12 duplicate parameter: x
#let f(x, x) = none


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (none)))
  (parbreak))

====================
typst/closure/closure-body-multiple-expressions
====================

// Error: 21 expected comma
// Error: 22-23 expected pattern, found integer
// Error: 24-25 unexpected plus
// Error: 26-27 expected pattern, found integer
#let f = (x: () => 1 2 + 3) => 4


--------------------



====================
typst/closure/closure-param-duplicate-mixed
====================

// Error: 14-15 duplicate parameter: a
// Error: 23-24 duplicate parameter: b
// Error: 35-36 duplicate parameter: b
#let f(a, b, a: none, b: none, c, b) = none


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)
          (tagged
            (ident)
            (none))
          (tagged
            (ident)
            (none))
          (ident)
          (ident)))
      (none)))
  (parbreak))

====================
typst/closure/closure-param-duplicate-spread
====================

// Error: 13-14 duplicate parameter: a
#let f(a, ..a) = none


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (elude
            (ident))))
      (none)))
  (parbreak))

====================
typst/closure/closure-pattern-bad-string
====================

// Error: 7-14 expected pattern, found string
#((a, "named": b) => none)


--------------------

(source_file
  (comment)
  (code
    (group
      (lambda
        (group
          (ident)
          (tagged
            (string)
            (ident)))
        (none))))
  (parbreak))

====================
typst/closure/closure-let-pattern-bad-string
====================

// Error: 10-15 expected pattern, found string
#let foo("key": b) = key


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (string)
            (ident))))
      (ident)))
  (parbreak))

====================
typst/closure/closure-param-keyword
====================

// Error: 10-14 expected pattern, found `none`
// Hint: 10-14 keyword `none` is not allowed as an identifier; try `none_` instead
#let foo(none: b) = key


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (none)
            (ident))))
      (ident)))
  (parbreak))

====================
typst/closure/closure-param-named-underscore
====================

// Error: 10-11 expected identifier, found underscore
#let foo(_: 3) = none


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (none)))
  (parbreak))

====================
typst/closure/issue-non-atomic-closure
====================

// Ensure that we can't have non-atomic closures.
#let x = 1
#let c = [#(x) => (1, 2)]
#test(c.children.last(), [(1, 2)]))
--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (ident)
      (content
        (code
          (group
            (ident)))
        (text))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (field
              (ident)
              (ident))
            (ident))
          (group))
        (content
          (text)))))
  (text))

====================
typst/blocks/code-block-basic-syntax
====================


// Evaluates to join of none, [My ] and the two loop bodies.
#{
  let parts = ("my fri", "end.")
  [Hello, ]
  for s in parts [#s]
}

// Evaluates to join of the content and strings.
#{
  [How]
  if true {
    " are"
  }
  [ ]
  if false [Nope]
  [you] + "?"
}


--------------------

(source_file
  (parbreak)
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (string)
          (string)))
      (content
        (text))
      (for
        (ident)
        (ident)
        (content
          (code
            (ident))))))
  (parbreak)
  (comment)
  (code
    (block
      (content
        (text))
      (branch
        (bool)
        (block
          (string)))
      (content)
      (branch
        (bool)
        (content
          (text)))
      (add
        (content
          (text))
        (string))))
  (parbreak))

====================
typst/blocks/code-block-empty
====================

// Nothing evaluates to none.
#test({}, none)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (block)
        (none))))
  (parbreak))

====================
typst/blocks/code-block-let
====================

// Let evaluates to none.
#test({ let v = 0 }, none)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (block
          (let
            (ident)
            (number)))
        (none))))
  (parbreak))

====================
typst/blocks/code-block-single-expression
====================

// Evaluates to single expression.
#test({ "hello" }, "hello")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (block
          (string))
        (string))))
  (parbreak))

====================
typst/blocks/code-block-multiple-expressions-single-line
====================

// Evaluates to string.
#test({ let x = "m"; x + "y" }, "my")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (block
          (let
            (ident)
            (string))
          (add
            (ident)
            (string)))
        (string))))
  (parbreak))

====================
typst/blocks/code-block-join-let-with-expression
====================

// Evaluated to int.
#test({
  let x = 1
  let y = 2
  x + y
}, 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (block
          (let
            (ident)
            (number))
          (let
            (ident)
            (number))
          (add
            (ident)
            (ident)))
        (number))))
  (parbreak))

====================
typst/blocks/code-block-join-expression-with-none
====================

// String is joined with trailing none, evaluates to string.
#test({
  type("")
  none
}, str)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (block
          (call
            (ident)
            (group
              (string)))
          (none))
        (ident))))
  (parbreak))

====================
typst/blocks/code-block-join-int-with-content
====================

// Some things can't be joined.
#{
  [A]
  // Error: 3-4 cannot join content with integer
  1
  [B]
}


--------------------

(source_file
  (comment)
  (code
    (block
      (content
        (text))
      (comment)
      (number)
      (content
        (text))))
  (parbreak))

====================
typst/blocks/code-block-scope-in-markup
====================

// Block directly in markup also creates a scope.
#{ let x = 1 }

// Error: 7-8 unknown variable: x
#test(x, 1)


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/blocks/code-block-scope-in-let
====================

// Block in expression does create a scope.
#let a = {
  let b = 1
  b
}

#test(a, 1)

// Error: 3-4 unknown variable: b
#{b}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (block
        (let
          (ident)
          (number))
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (comment)
  (code
    (block
      (ident)))
  (parbreak))

====================
typst/blocks/code-block-double-scope
====================

// Double block creates a scope.
#{{
  import "module.typ": b
  test(b, 1)
}}

// Error: 2-3 unknown variable: b
#b


--------------------

(source_file
  (comment)
  (code
    (block
      (block
        (import
          (string)
          (binding
            (ident)))
        (call
          (ident)
          (group
            (ident)
            (number))))))
  (parbreak)
  (comment)
  (code
    (ident))
  (parbreak))

====================
typst/blocks/code-block-nested-scopes
====================

// Multiple nested scopes.
#{
  let a = "a1"
  {
    let a = "a2"
    {
      test(a, "a2")
      let a = "a3"
      test(a, "a3")
    }
    test(a, "a2")
  }
  test(a, "a1")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (string))
      (block
        (let
          (ident)
          (string))
        (block
          (call
            (ident)
            (group
              (ident)
              (string)))
          (let
            (ident)
            (string))
          (call
            (ident)
            (group
              (ident)
              (string))))
        (call
          (ident)
          (group
            (ident)
            (string))))
      (call
        (ident)
        (group
          (ident)
          (string)))))
  (parbreak))

====================
typst/blocks/code-block-multiple-literals-without-semicolon
====================

// Multiple unseparated expressions in one line.
// Error: 4 expected semicolon or line break
#{1 2}


--------------------



====================
typst/blocks/code-block-multiple-expressions-without-semicolon
====================

// Error: 13 expected semicolon or line break
// Error: 23 expected semicolon or line break
#{let x = -1 let y = 3 x + y}


--------------------



====================
typst/blocks/code-block-incomplete-expressions
====================

#{
  // Error: 7-10 expected pattern, found string
  for "v"

  // Error: 8 expected keyword `in`
  // Error: 22 expected block
  for v let z = 1 + 2

  z
}


--------------------



====================
typst/blocks/code-block-unclosed
====================

// Error: 2-3 unclosed delimiter
#{


--------------------



====================
typst/blocks/code-block-unopened
====================

// Error: 2-3 unexpected closing brace
#}


--------------------



====================
typst/blocks/single-right-bracket
====================

// Error: 1-2 unexpected closing bracket
// Hint: 1-2 try using a backslash escape: \]
]


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (parbreak))

====================
typst/blocks/right-bracket-nesting
====================

[
= [ Hi ]]
- how [
  - are ]
// Error: 10-11 unexpected closing bracket
// Hint: 10-11 try using a backslash escape: \]
  - error][]
[[]]


--------------------

(source_file
  (text)
  (section
    (heading
      (text)
      (text)
      (text))
    (content))
  (text)
  (item
    (text)
    (text)
    (text)
    (item
      (text)))
  (text)
  (comment)
  (comment)
  (item
    (text))
  (text)
  (text)
  (text)
  (text)
  (text)
  (text)
  (text)
  (parbreak))

====================
typst/blocks/right-bracket-hash
====================

// Error: 2-3 unexpected closing bracket
#]


--------------------



====================
typst/blocks/right-bracket-in-blocks
====================

// Error: 3-4 unclosed delimiter
// Error: 6-7 unexpected closing bracket
// Hint: 6-7 try using a backslash escape: \]
[#{]}]

// Error: 4-5 unexpected closing bracket
// Hint: 4-5 try using a backslash escape: \]
#[]]

// Error: 4-5 unclosed delimiter
// Error: 7-8 unexpected closing bracket
// Hint: 7-8 try using a backslash escape: \]
#[#{]}]

// Error: 2-3 unclosed delimiter
// Error: 3-4 unclosed delimiter
// Error: 4-5 unexpected closing bracket
// Hint: 4-5 try using a backslash escape: \]
#{{]}}


--------------------



====================
typst/blocks/content-block-in-markup-scope
====================

// Content blocks also create a scope.
#[#let x = 1]

// Error: 2-3 unknown variable: x
#x
--------------------

(source_file
  (comment)
  (code
    (content
      (code
        (let
          (ident)
          (number)))))
  (parbreak)
  (comment)
  (code
    (ident)))

====================
typst/recursion/recursion-named
====================

// Test with named function.
#let fib(n) = {
  if n <= 2 {
    1
  } else {
    fib(n - 1) + fib(n - 2)
  }
}

#test(fib(10), 55)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (branch
          (cmp
            (ident)
            (number))
          (block
            (number))
          (block
            (add
              (call
                (ident)
                (group
                  (sub
                    (ident)
                    (number))))
              (call
                (ident)
                (group
                  (sub
                    (ident)
                    (number))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/recursion/recursion-unnamed-invalid
====================

// Test with unnamed function.
// Error: 17-18 unknown variable: f
#let f = (n) => f(n - 1)
#f(10)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (lambda
        (group
          (ident))
        (call
          (ident)
          (group
            (sub
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/recursion/recursion-named-returns-itself
====================

// Test capturing with named function.
#let f = 10
#let f() = f
#test(type(f()), function)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (call
        (ident)
        (group))
      (ident)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group))))
        (ident))))
  (parbreak))

====================
typst/recursion/recursion-unnamed-does-not-return-itself
====================

// Test capturing with unnamed function.
#let f = 10
#let f = () => f
#test(type(f()), int)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (ident)
      (lambda
        (group)
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group))))
        (ident))))
  (parbreak))

====================
typst/recursion/recursion-shadowing
====================

// Test redefinition.
#let f(x) = "hello"
#let f(x) = if x != none { f(none) } else { "world" }
#test(f(1), "world")


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (string)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (branch
        (cmp
          (ident)
          (none))
        (block
          (call
            (ident)
            (group
              (none))))
        (block
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (parbreak))

====================
typst/recursion/recursion-maximum-depth
====================

// Error: 15-21 maximum function call depth exceeded
#let rec(n) = rec(n) + 1
#rec(1)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (add
        (call
          (ident)
          (group
            (ident)))
        (number))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/recursion/recursion-via-include-in-layout
====================

// Test cyclic imports during layout.
// Error: 2-38 maximum show rule depth exceeded
// Hint: 2-38 check whether the show rule matches its own output
#layout(_ => include "recursion.typ")


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (lambda
          (ident)
          (include
            (string))))))
  (parbreak))

====================
typst/recursion/recursion-show-math
====================

// Test recursive show rules.
// Error: 22-25 maximum show rule depth exceeded
// Hint: 22-25 check whether the show rule matches its own output
#show math.equation: $x$
$ x $


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (math
        (formula
          (letter)))))
  (math
    (formula
      (letter)))
  (parbreak))

====================
typst/recursion/recursion-show-math-realize
====================

// Error: 22-33 maximum show rule depth exceeded
// Hint: 22-33 check whether the show rule matches its own output
#show heading: it => heading[it]
$ #heading[hi] $
--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (content
            (text))))))
  (math
    (formula
      (code
        (call
          (ident)
          (content
            (text)))))))

====================
typst/ops/ops-add-content
====================

// Test adding content.
#([*Hello* ] + [world!])


--------------------

(source_file
  (comment)
  (code
    (group
      (add
        (content
          (strong
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/ops/ops-unary-basic
====================

// Test math operators.

// Test plus and minus.
#for v in (1, 3.14, decimal("12.43"), 12pt, 45deg, 90%, 13% + 10pt, 6.3fr) {
  // Test plus.
  test(+v, v)

  // Test minus.
  test(-v, -1 * v)
  test(--v, v)

  // Test combination.
  test(-++ --v, -v)
}

#test(-(4 + 2), 6-12)

// Addition.
#test(2 + 4, 6)
#test("a" + "b", "ab")
#test("a" + if false { "b" }, "a")
#test("a" + if true { "b" }, "ab")
#test(13 * "a" + "bbbbbb", "aaaaaaaaaaaaabbbbbb")
#test((1, 2) + (3, 4), (1, 2, 3, 4))
#test((a: 1) + (b: 2, c: 3), (a: 1, b: 2, c: 3))


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (group
        (number)
        (number)
        (call
          (ident)
          (group
            (string)))
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (add
          (number
            (unit))
          (number
            (unit)))
        (number
          (unit)))
      (block
        (comment)
        (call
          (ident)
          (group
            (sign
              (ident))
            (ident)))
        (comment)
        (call
          (ident)
          (group
            (sign
              (ident))
            (mul
              (sign
                (number))
              (ident))))
        (call
          (ident)
          (group
            (sign
              (sign
                (ident)))
            (ident)))
        (comment)
        (call
          (ident)
          (group
            (sign
              (sign
                (sign
                  (sign
                    (sign
                      (ident))))))
            (sign
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (sign
          (group
            (add
              (number)
              (number))))
        (sub
          (number)
          (number)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (number)
          (number))
        (number))))
  (code
    (call
      (ident)
      (group
        (add
          (string)
          (string))
        (string))))
  (code
    (call
      (ident)
      (group
        (add
          (string)
          (branch
            (bool)
            (block
              (string))))
        (string))))
  (code
    (call
      (ident)
      (group
        (add
          (string)
          (branch
            (bool)
            (block
              (string))))
        (string))))
  (code
    (call
      (ident)
      (group
        (add
          (mul
            (number)
            (string))
          (string))
        (string))))
  (code
    (call
      (ident)
      (group
        (add
          (group
            (number)
            (number))
          (group
            (number)
            (number)))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (add
          (group
            (tagged
              (ident)
              (number)))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/ops/ops-add-too-large
====================

// Error: 3-26 value is too large
#(9223372036854775807 + 1)


--------------------

(source_file
  (comment)
  (code
    (group
      (add
        (number)
        (number))))
  (parbreak))

====================
typst/ops/ops-binary-basic
====================

// Subtraction.
#test(1-4, 3*-1)
#test(4cm - 2cm, 2cm)
#test(1e+2-1e-2, 99.99)

// Multiplication.
#test(2 * 4, 8)

// Division.
#test(12pt/.4, 30pt)
#test(7 / 2, 3.5)

// Combination.
#test(3-4 * 5 < -10, true)
#test({ let x; x = 1 + 4*5 >= 21 and { x = "a"; x + "b" == "ab" }; x }, true)

// With block.
#test(if true {
  1
} + 2, 3)

// Mathematical identities.
#let nums = (
  1, 3.14,
  decimal("12.45"),
  12pt, 3em, 12pt + 3em,
  45deg,
  90%,
  13% + 10pt, 5% + 1em + 3pt,
  2.3fr,
)

#for v in nums {
  // Test plus and minus.
  test(v + v - v, v)
  test(v - v - v, -v)

  // Test plus/minus and multiplication.
  test(v - v, 0 * v)
  test(v + v, 2 * v)

  // Integer or decimal addition does not give a float.
  if type(v) not in (int, decimal) {
    test(v + v, 2.0 * v)
  }

  if type(v) not in (relative, decimal) and ("pt" not in repr(v) or "em" not in repr(v)) {
    test(v / v, 1.0)
  }
}

// Make sure length, ratio and relative length
// - can all be added to / subtracted from each other,
// - multiplied with integers and floats,
// - divided by integers and floats.
#let dims = (10pt, 1em, 10pt + 1em, 30%, 50% + 3cm, 40% + 2em + 1cm)
#for a in dims {
  for b in dims {
    test(type(a + b), type(a - b))
  }

  for b in (7, 3.14) {
    test(type(a * b), type(a))
    test(type(b * a), type(a))
    test(type(a / b), type(a))
  }
}

// Test division of different numeric types with zero components.
#for a in (0pt, 0em, 0%) {
  for b in (10pt, 10em, 10%) {
    test((2 * b) / b, 2)
    test((a + b * 2) / b, 2)
    test(b / (b * 2 + a), 0.5)
  }
}


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (sub
          (number)
          (number))
        (mul
          (number)
          (sign
            (number))))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (number
            (unit)))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number)
          (number))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (mul
          (number)
          (number))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (div
          (number
            (unit))
          (number))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (div
          (number)
          (number))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (sub
            (number)
            (mul
              (number)
              (number)))
          (sign
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (block
          (let
            (ident))
          (assign
            (ident)
            (and
              (cmp
                (add
                  (number)
                  (mul
                    (number)
                    (number)))
                (number))
              (block
                (assign
                  (ident)
                  (string))
                (cmp
                  (add
                    (ident)
                    (string))
                  (string)))))
          (ident))
        (bool))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (branch
            (bool)
            (block
              (number)))
          (number))
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (call
          (ident)
          (group
            (string)))
        (number
          (unit))
        (number
          (unit))
        (add
          (number
            (unit))
          (number
            (unit)))
        (number
          (unit))
        (number
          (unit))
        (add
          (number
            (unit))
          (number
            (unit)))
        (add
          (add
            (number
              (unit))
            (number
              (unit)))
          (number
            (unit)))
        (number
          (unit)))))
  (parbreak)
  (code
    (for
      (ident)
      (ident)
      (block
        (comment)
        (call
          (ident)
          (group
            (sub
              (add
                (ident)
                (ident))
              (ident))
            (ident)))
        (call
          (ident)
          (group
            (sub
              (sub
                (ident)
                (ident))
              (ident))
            (sign
              (ident))))
        (comment)
        (call
          (ident)
          (group
            (sub
              (ident)
              (ident))
            (mul
              (number)
              (ident))))
        (call
          (ident)
          (group
            (add
              (ident)
              (ident))
            (mul
              (number)
              (ident))))
        (comment)
        (branch
          (in
            (call
              (ident)
              (group
                (ident)))
            (group
              (ident)
              (ident)))
          (block
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (mul
                  (number)
                  (ident))))))
        (branch
          (and
            (in
              (call
                (ident)
                (group
                  (ident)))
              (group
                (ident)
                (ident)))
            (group
              (or
                (in
                  (string)
                  (call
                    (ident)
                    (group
                      (ident))))
                (in
                  (string)
                  (call
                    (ident)
                    (group
                      (ident)))))))
          (block
            (call
              (ident)
              (group
                (div
                  (ident)
                  (ident))
                (number))))))))
  (parbreak)
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (group
        (number
          (unit))
        (number
          (unit))
        (add
          (number
            (unit))
          (number
            (unit)))
        (number
          (unit))
        (add
          (number
            (unit))
          (number
            (unit)))
        (add
          (add
            (number
              (unit))
            (number
              (unit)))
          (number
            (unit))))))
  (code
    (for
      (ident)
      (ident)
      (block
        (for
          (ident)
          (ident)
          (block
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (add
                      (ident)
                      (ident))))
                (call
                  (ident)
                  (group
                    (sub
                      (ident)
                      (ident))))))))
        (for
          (ident)
          (group
            (number)
            (number))
          (block
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (mul
                      (ident)
                      (ident))))
                (call
                  (ident)
                  (group
                    (ident)))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (mul
                      (ident)
                      (ident))))
                (call
                  (ident)
                  (group
                    (ident)))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (div
                      (ident)
                      (ident))))
                (call
                  (ident)
                  (group
                    (ident))))))))))
  (parbreak)
  (comment)
  (code
    (for
      (ident)
      (group
        (number
          (unit))
        (number
          (unit))
        (number
          (unit)))
      (block
        (for
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit)))
          (block
            (call
              (ident)
              (group
                (div
                  (group
                    (mul
                      (number)
                      (ident)))
                  (ident))
                (number)))
            (call
              (ident)
              (group
                (div
                  (group
                    (add
                      (ident)
                      (mul
                        (ident)
                        (number))))
                  (ident))
                (number)))
            (call
              (ident)
              (group
                (div
                  (ident)
                  (group
                    (add
                      (mul
                        (ident)
                        (number))
                      (ident))))
                (number))))))))
  (parbreak))

====================
typst/ops/ops-binary-decimal
====================

// Addition.
#test(decimal("40.1") + decimal("13.2"), decimal("53.3"))
#test(decimal("12.34330") + decimal("45.96670"), decimal("58.31000"))
#test(decimal("451113.111111111111111111111") + decimal("23.222222222222222222324"), decimal("451136.333333333333333333435"))

// Subtraction.
#test(decimal("40.1") - decimal("13.2"), decimal("26.9"))
#test(decimal("12.34330") - decimal("45.96670"), decimal("-33.62340"))
#test(decimal("1234.111111111111111111111") - decimal("0.222222222222222222324"), decimal("1233.888888888888888888787"))

// Multiplication.
#test(decimal("40.5") * decimal("9.5"), decimal("384.75"))
#test(decimal("-0.1234567890123456789012345678") * decimal("-2.0"), decimal("0.2469135780246913578024691356"))

// Division.
#test(decimal("1.0") / decimal("7.0"), decimal("0.1428571428571428571428571429"))
#test(decimal("9999991.6666") / decimal("3.0"), decimal("3333330.5555333333333333333333"))
#test(decimal("3253452.4034029359598214312040") / decimal("-49293591.4039493929532"), decimal("-0.0660015290170614346071165643"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/ops/ops-binary-decimal-int
====================

// Operations between decimal and integer.
#test(decimal("2359.123456789123456789001234") + 2, decimal("2361.123456789123456789001234"))
#test(decimal("2359.123456789123456789001234") - 2, decimal("2357.123456789123456789001234"))
#test(decimal("2359.123456789123456789001234") * 2, decimal("4718.246913578246913578002468"))
#test(decimal("2359.123456789123456789001234") / 2, decimal("1179.561728394561728394500617"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (string)))
          (number))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (string)))
          (number))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (string)))
          (number))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (string)))
          (number))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/ops/ops-binary-decimal-multiplication-division-imprecision
====================

// Test digit truncation by multiplication and division.
#test(decimal("0.7777777777777777777777777777") / 1000, decimal("0.0007777777777777777777777778"))
#test(decimal("0.7777777777777777777777777777") * decimal("0.001"), decimal("0.0007777777777777777777777778"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (string)))
          (number))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/ops/ops-add-too-large-decimal
====================

// Error: 3-47 value is too large
#(decimal("79228162514264337593543950335") + 1)


--------------------

(source_file
  (comment)
  (code
    (group
      (add
        (call
          (ident)
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/ops/ops-subtract-too-large-decimal
====================

// Error: 3-48 value is too large
#(decimal("-79228162514264337593543950335") - 1)


--------------------

(source_file
  (comment)
  (code
    (group
      (sub
        (call
          (ident)
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/ops/ops-multiply-inf-with-length
====================

// Test that multiplying infinite numbers by certain units does not crash.
#(float("inf") * 1pt)
#(float("inf") * 1em)
#(float("inf") * (1pt + 1em))


--------------------

(source_file
  (comment)
  (code
    (group
      (mul
        (call
          (ident)
          (group
            (string)))
        (number
          (unit)))))
  (code
    (group
      (mul
        (call
          (ident)
          (group
            (string)))
        (number
          (unit)))))
  (code
    (group
      (mul
        (call
          (ident)
          (group
            (string)))
        (group
          (add
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/ops/ops-attempt-nan-length
====================

// Test that trying to produce a NaN scalar (such as in lengths) does not crash.
#let infpt = float("inf") * 1pt
#test(infpt - infpt, 0pt)
#test(infpt + (-infpt), 0pt)
// TODO: this result is surprising
#test(infpt / float("inf"), 0pt)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (mul
        (call
          (ident)
          (group
            (string)))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (group
            (sign
              (ident))))
        (number
          (unit)))))
  (comment)
  (code
    (call
      (ident)
      (group
        (div
          (ident)
          (call
            (ident)
            (group
              (string))))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-unary-bool
====================

// Test boolean operators.

// Test not.
#test(not true, false)
#test(not false, true)

// And.
#test(false and false, false)
#test(false and true, false)
#test(true and false, false)
#test(true and true, true)

// Or.
#test(false or false, false)
#test(false or true, true)
#test(true or false, true)
#test(true or true, true)

// Short-circuiting.
#test(false and dont-care, false)
#test(true or dont-care, true)


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (not
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (not
          (bool))
        (bool))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (and
          (bool)
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (and
          (bool)
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (and
          (bool)
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (and
          (bool)
          (bool))
        (bool))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (or
          (bool)
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (or
          (bool)
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (or
          (bool)
          (bool))
        (bool))))
  (code
    (call
      (ident)
      (group
        (or
          (bool)
          (bool))
        (bool))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (and
          (bool)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (or
          (bool)
          (ident))
        (bool))))
  (parbreak))

====================
typst/ops/ops-equality
====================

// Test equality operators.

// Most things compare by value.
#test(1 == "hi", false)
#test(1 == 1.0, true)
#test(30% == 30% + 0cm, true)
#test(1in == 0% + 72pt, true)
#test(30% == 30% + 1cm, false)
#test("ab" == "a" + "b", true)
#test(() == (1,), false)
#test((1, 2, 3) == (1, 2.0) + (3,), true)
#test((:) == (a: 1), false)
#test((a: 2 - 1.0, b: 2) == (b: 2, a: 1), true)
#test("a" != "a", false)
#test(decimal("1.234") == decimal("1.23400000000"), true)
#test(235 == decimal("235.0"), true)

// Functions compare by identity.
#test(test == test, true)
#test((() => {}) == (() => {}), false)

// Content compares field by field.
#let t = [a]
#test(t == t, true)
#test([] == [], true)
#test([a] == [a], true)
#test(grid[a] == grid[a], true)
#test(grid[a] == grid[b], false)


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (add
            (number
              (unit))
            (number
              (unit))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (add
            (number
              (unit))
            (number
              (unit))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (add
            (number
              (unit))
            (number
              (unit))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (string)
          (add
            (string)
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group)
          (group
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (number))
          (add
            (group
              (number)
              (number))
            (group
              (number))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group)
          (group
            (tagged
              (ident)
              (number))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (tagged
              (ident)
              (sub
                (number)
                (number)))
            (tagged
              (ident)
              (number)))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (call
            (ident)
            (group
              (string))))
        (bool))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (ident)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (lambda
              (group)
              (block)))
          (group
            (lambda
              (group)
              (block))))
        (bool))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (cmp
          (ident)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (content)
          (content))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (content
            (text))
          (content
            (text)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (content
              (text)))
          (call
            (ident)
            (content
              (text))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (content
              (text)))
          (call
            (ident)
            (content
              (text))))
        (bool))))
  (parbreak))

====================
typst/ops/ops-compare
====================

// Test comparison operators.

#test(13 * 3 < 14 * 4, true)
#test(5 < 10, true)
#test(5 > 5, false)
#test(5 <= 5, true)
#test(5 <= 4, false)
#test(45deg < 1rad, true)
#test(10% < 20%, true)
#test(50% < 40% + 0pt, false)
#test(40% + 0pt < 50% + 0pt, true)
#test(1em < 2em, true)
#test((0, 1, 2, 4) < (0, 1, 2, 5), true)
#test((0, 1, 2, 4) < (0, 1, 2, 3), false)
#test((0, 1, 2, 3.3) > (0, 1, 2, 4), false)
#test((0, 1, 2) < (0, 1, 2, 3), true)
#test((0, 1, "b") > (0, 1, "a", 3), true)
#test((0, 1.1, 3) >= (0, 1.1, 3), true)
#test((0, 1, datetime(day: 1, month: 12, year: 2023)) <= (0, 1, datetime(day: 1, month: 12, year: 2023), 3), true)
#test(("a", 23, 40, "b") > ("a", 23, 40), true)
#test(() <= (), true)
#test(() >= (), true)
#test(() <= (1,), true)
#test((1,) <= (), false)
#test(decimal("123.0000000000000000000000001") > decimal("123.0"), true)
#test(decimal("123.5") < decimal("122.444"), false)
#test(decimal("459.9999999999999999999999999") < 460, true)
#test(decimal("128.50") > 460, false)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (cmp
          (mul
            (number)
            (number))
          (mul
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (number
            (unit)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (number
            (unit)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (add
            (number
              (unit))
            (number
              (unit))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (add
            (number
              (unit))
            (number
              (unit)))
          (add
            (number
              (unit))
            (number
              (unit))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (number
            (unit))
          (number
            (unit)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (string))
          (group
            (number)
            (number)
            (string)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number)
            (number)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number)))))
          (group
            (number)
            (number)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (string)
            (number)
            (number)
            (string))
          (group
            (string)
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group)
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group)
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group)
          (group
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (group
            (number))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (string)))
          (call
            (ident)
            (group
              (string))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (string)))
          (number))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (string)))
          (number))
        (bool))))
  (parbreak))

====================
typst/ops/ops-in
====================

// Test `in` operator.
#test("hi" in "worship", true)
#test("hi" in ("we", "hi", "bye"), true)
#test("Hey" in "abHeyCd", true)
#test("Hey" in "abheyCd", false)
#test(5 in range(10), true)
#test(12 in range(10), false)
#test("" in (), false)
#test("key" in (key: "value"), true)
#test("value" in (key: "value"), false)
#test("Hey" not in "abheyCd", true)
#test("a" not
/* fun comment? */ in "abc", false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (group
            (string)
            (string)
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (number)
          (call
            (ident)
            (group
              (number))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (number)
          (call
            (ident)
            (group
              (number))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (group
            (tagged
              (ident)
              (string))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (group
            (tagged
              (ident)
              (string))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (comment)
          (string))
        (bool))))
  (parbreak))

====================
typst/ops/ops-not-trailing
====================

// Error: 10 expected keyword `in`
#("a" not)


--------------------



====================
typst/ops/func-with
====================

// Test `with` method.

// Apply positional arguments.
#let add(x, y) = x + y
#test(add.with(2)(3), 5)
#test(add.with(2, 3)(), 5)
#test(add.with(2).with(3)(), 5)
#test((add.with(2))(4), 6)
#test((add.with(2).with(3))(), 5)

// Make sure that named arguments are overridable.
#let inc(x, y: 1) = x + y
#test(inc(1), 2)

#let inc2 = inc.with(y: 2)
#test(inc2(2), 4)
#test(inc2(2, y: 4), 6)

// Apply arguments to an argument sink.
#let times(..sink) = {
  let res = sink.pos().product()
  if sink.named().at("negate", default: false) { res *= -1 }
  res
}
#test((times.with(2, negate: true).with(5))(), -10)
#test((times.with(2).with(5).with(negate: true))(), -10)
#test((times.with(2).with(5, negate: true))(), -10)
#test((times.with(2).with(negate: true))(5), -10)


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (add
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (number)
              (number)))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (number)))
              (ident))
            (group
              (number)))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (number))))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (group
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)))
                (ident))
              (group
                (number))))
          (group))
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (number))))
      (add
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (number))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (block
        (let
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (ident))
            (group)))
        (branch
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (ident))
            (group
              (string)
              (tagged
                (ident)
                (bool))))
          (block
            (assign
              (ident)
              (sign
                (number)))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (group
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)
                    (tagged
                      (ident)
                      (bool))))
                (ident))
              (group
                (number))))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (group
            (call
              (field
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (number)))
                    (ident))
                  (group
                    (number)))
                (ident))
              (group
                (tagged
                  (ident)
                  (bool)))))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (group
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)))
                (ident))
              (group
                (number)
                (tagged
                  (ident)
                  (bool)))))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (group
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)))
                (ident))
              (group
                (tagged
                  (ident)
                  (bool)))))
          (group
            (number)))
        (sign
          (number)))))
  (parbreak))

====================
typst/ops/ops-precedence-basic
====================

// Multiplication binds stronger than addition.
#test(1+2*-3, -5)

// Subtraction binds stronger than comparison.
#test(3 == 5 - 2, true)

// Boolean operations bind stronger than '=='.
#test("a" == "a" and 2 < 3, true)
#test(not "b" == "b", false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (number)
          (mul
            (number)
            (sign
              (number))))
        (sign
          (number)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (sub
            (number)
            (number)))
        (bool))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (and
          (cmp
            (string)
            (string))
          (cmp
            (number)
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (not
          (cmp
            (string)
            (string)))
        (bool))))
  (parbreak))

====================
typst/ops/ops-precedence-boolean-ops
====================

// Assignment binds stronger than boolean operations.
// Error: 2:3-2:8 cannot mutate a temporary value
#let x = false
#(not x = "a")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (bool)))
  (code
    (group
      (assign
        (not
          (ident))
        (string))))
  (parbreak))

====================
typst/ops/ops-precedence-unary
====================

// Precedence doesn't matter for chained unary operators.
// Error: 3-12 cannot apply '-' to boolean
#(-not true)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (sign
        (not
          (bool)))))
  (parbreak))

====================
typst/ops/ops-precedence-not-in
====================

// Not in handles precedence.
#test(-1 not in (1, 2, 3), true)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (in
          (sign
            (number))
          (group
            (number)
            (number)
            (number)))
        (bool))))
  (parbreak))

====================
typst/ops/ops-precedence-parentheses
====================

// Parentheses override precedence.
#test((1), 1)
#test((1+2)*-3, -9)

// Error: 8-9 unclosed delimiter
#test({(1 + 1}, 2)


--------------------



====================
typst/ops/ops-associativity-left
====================

// Math operators are left-associative.
#test(10 / 2 / 2 == (10 / 2) / 2, true)
#test(10 / 2 / 2 == 10 / (2 / 2), false)
#test(1 / 2 * 3, 1.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (div
            (div
              (number)
              (number))
            (number))
          (div
            (group
              (div
                (number)
                (number)))
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (div
            (div
              (number)
              (number))
            (number))
          (div
            (number)
            (group
              (div
                (number)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (mul
          (div
            (number)
            (number))
          (number))
        (number))))
  (parbreak))

====================
typst/ops/ops-associativity-right
====================

// Assignment is right-associative.
#{
  let x = 1
  let y = 2
  x = y = "ok"
  test(x, none)
  test(y, "ok")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (number))
      (let
        (ident)
        (number))
      (assign
        (ident)
        (assign
          (ident)
          (string)))
      (call
        (ident)
        (group
          (ident)
          (none)))
      (call
        (ident)
        (group
          (ident)
          (string)))))
  (parbreak))

====================
typst/ops/ops-unary-minus-missing-expr
====================

// Error: 4 expected expression
#(-)


--------------------



====================
typst/ops/ops-add-missing-rhs
====================

// Error: 10 expected expression
#test({1+}, 1)


--------------------



====================
typst/ops/ops-mul-missing-rhs
====================

// Error: 10 expected expression
#test({2*}, 2)


--------------------



====================
typst/ops/ops-unary-plus-on-content
====================

// Error: 3-13 cannot apply unary '+' to content
#(+([] + []))


--------------------

(source_file
  (comment)
  (code
    (group
      (sign
        (group
          (add
            (content)
            (content))))))
  (parbreak))

====================
typst/ops/ops-unary-plus-on-string
====================

// Error: 3-6 cannot apply '-' to string
#(-"")


--------------------

(source_file
  (comment)
  (code
    (group
      (sign
        (string))))
  (parbreak))

====================
typst/ops/ops-not-on-array
====================

// Error: 3-9 cannot apply 'not' to array
#(not ())


--------------------

(source_file
  (comment)
  (code
    (group
      (not
        (group))))
  (parbreak))

====================
typst/ops/ops-compare-relative-length-and-ratio
====================

// Error: 3-19 cannot compare relative length and ratio
#(30% + 1pt <= 40%)


--------------------

(source_file
  (comment)
  (code
    (group
      (cmp
        (add
          (number
            (unit))
          (number
            (unit)))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-compare-em-with-abs
====================

// Error: 3-14 cannot compare 1em with 10pt
#(1em <= 10pt)


--------------------

(source_file
  (comment)
  (code
    (group
      (cmp
        (number
          (unit))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-compare-normal-float-with-nan
====================

// Error: 3-22 cannot compare 2.2 with float.nan
#(2.2 <= float("nan"))


--------------------

(source_file
  (comment)
  (code
    (group
      (cmp
        (number)
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/ops/ops-compare-int-and-str
====================

// Error: 3-26 cannot compare integer and string
#((0, 1, 3) > (0, 1, "a"))


--------------------

(source_file
  (comment)
  (code
    (group
      (cmp
        (group
          (number)
          (number)
          (number))
        (group
          (number)
          (number)
          (string)))))
  (parbreak))

====================
typst/ops/ops-compare-array-nested-failure
====================

// Error: 3-42 cannot compare 3.5 with float.nan
#((0, "a", 3.5) <= (0, "a", float("nan")))


--------------------

(source_file
  (comment)
  (code
    (group
      (cmp
        (group
          (number)
          (string)
          (number))
        (group
          (number)
          (string)
          (call
            (ident)
            (group
              (string)))))))
  (parbreak))

====================
typst/ops/ops-divide-by-zero-float
====================

// Error: 3-12 cannot divide by zero
#(1.2 / 0.0)


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (number)
        (number))))
  (parbreak))

====================
typst/ops/ops-divide-by-zero-int
====================

// Error: 3-8 cannot divide by zero
#(1 / 0)


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (number)
        (number))))
  (parbreak))

====================
typst/ops/ops-divide-by-zero-angle
====================

// Error: 3-15 cannot divide by zero
#(15deg / 0deg)


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (number
          (unit))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-binary-arithmetic-error-message
====================

// Special messages for +, -, * and /.
// Error: 3-10 cannot add integer and string
#(1 + "2", 40% - 1)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (add
        (number)
        (string))
      (sub
        (number
          (unit))
        (number))))
  (parbreak))

====================
typst/ops/add-assign-int-and-str
====================

// Error: 15-23 cannot add integer and string
#{ let x = 1; x += "2" }


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (number))
      (assign
        (ident)
        (string))))
  (parbreak))

====================
typst/ops/ops-divide-ratio-by-length
====================

// Error: 4-13 cannot divide ratio by length
#( 10% / 5pt )


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (number
          (unit))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-divide-em-by-abs
====================

// Error: 3-12 cannot divide these two lengths
#(1em / 5pt)


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (number
          (unit))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-divide-relative-length-by-ratio
====================

// Error: 3-19 cannot divide relative length by ratio
#((10% + 1pt) / 5%)


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (group
          (add
            (number
              (unit))
            (number
              (unit))))
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/ops-divide-relative-lengths
====================

// Error: 3-28 cannot divide these two relative lengths
#((10% + 1pt) / (20% + 1pt))


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (group
          (add
            (number
              (unit))
            (number
              (unit))))
        (group
          (add
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/ops/ops-subtract-int-from-ratio
====================

// Error: 13-20 cannot subtract integer from ratio
#((1234567, 40% - 1))


--------------------

(source_file
  (comment)
  (code
    (group
      (group
        (number)
        (sub
          (number
            (unit))
          (number)))))
  (parbreak))

====================
typst/ops/ops-multiply-int-with-bool
====================

// Error: 3-11 cannot multiply integer with boolean
#(2 * true)


--------------------

(source_file
  (comment)
  (code
    (group
      (mul
        (number)
        (bool))))
  (parbreak))

====================
typst/ops/ops-divide-int-by-length
====================

// Error: 3-11 cannot divide integer by length
#(3 / 12pt)


--------------------

(source_file
  (comment)
  (code
    (group
      (div
        (number)
        (number
          (unit)))))
  (parbreak))

====================
typst/ops/multiply-negative-int-with-str
====================

// Error: 3-10 number must be at least zero
#(-1 * "")


--------------------

(source_file
  (comment)
  (code
    (group
      (mul
        (sign
          (number))
        (string))))
  (parbreak))

====================
typst/ops/ops-assign
====================

// Test assignment operators.

#let x = 0
#(x = 10)       #test(x, 10)
#(x -= 5)       #test(x, 5)
#(x += 1)       #test(x, 6)
#(x *= x)       #test(x, 36)
#(x /= 2.0)     #test(x, 18.0)
#(x = "some")   #test(x, "some")
#(x += "thing") #test(x, "something")


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (number)))
  (code
    (group
      (assign
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (group
      (assign
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (group
      (assign
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (group
      (assign
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (group
      (assign
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (group
      (assign
        (ident)
        (string))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (code
    (group
      (assign
        (ident)
        (string))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak))

====================
typst/ops/ops-assign-unknown-var-lhs
====================

#{
  // Error: 3-6 unknown variable: a-1
  // Hint: 3-6 if you meant to use subtraction, try adding spaces around the minus sign: `a - 1`
  a-1 = 2
}


--------------------

(source_file
  (code
    (block
      (comment)
      (comment)
      (assign
        (ident)
        (number))))
  (parbreak))

====================
typst/ops/ops-assign-unknown-var-rhs
====================

#{
  let a = 2
  a = 1-a
  a = a -1

  // Error: 7-10 unknown variable: a-1
  // Hint: 7-10 if you meant to use subtraction, try adding spaces around the minus sign: `a - 1`
  a = a-1
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (number))
      (assign
        (ident)
        (sub
          (number)
          (ident)))
      (assign
        (ident)
        (sub
          (ident)
          (number)))
      (comment)
      (comment)
      (assign
        (ident)
        (ident))))
  (parbreak))

====================
typst/ops/ops-assign-unknown-parenthesized-variable
====================

// Error: 4-5 unknown variable: x
#((x) = "")


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (group
          (ident))
        (string))))
  (parbreak))

====================
typst/ops/ops-assign-destructuring-unknown-variable
====================

// Error: 4-5 unknown variable: x
#((x,) = (1,))


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (group
          (ident))
        (group
          (number)))))
  (parbreak))

====================
typst/ops/ops-assign-to-temporary
====================

// Error: 3-8 cannot mutate a temporary value
#(1 + 2 += 3)


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (add
          (number)
          (number))
        (number))))
  (parbreak))

====================
typst/ops/ops-assign-to-invalid-unary-op
====================

// Error: 2:3-2:8 cannot apply 'not' to string
#let x = "Hey"
#(not x = "a")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (string)))
  (code
    (group
      (assign
        (not
          (ident))
        (string))))
  (parbreak))

====================
typst/ops/ops-assign-to-invalid-binary-op
====================

// Error: 7-8 unknown variable: x
#(1 + x += 3)


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (add
          (number)
          (ident))
        (number))))
  (parbreak))

====================
typst/ops/ops-assign-unknown-variable
====================

// Error: 3-4 unknown variable: z
#(z = 1)


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (ident)
        (number))))
  (parbreak))

====================
typst/ops/ops-assign-to-std-constant
====================

// Error: 3-7 cannot mutate a constant: rect
#(rect = "hi")


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (ident)
        (string))))
  (parbreak))

====================
typst/ops/ops-assign-to-shadowed-std-constant
====================

// Works if we define rect beforehand
// (since then it doesn't resolve to the standard library version anymore).
#let rect = ""
#(rect = "hi")
--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (string)))
  (code
    (group
      (assign
        (ident)
        (string)))))

====================
typst/get-rule/get-rule-basic
====================

// Test basic get rule.
#context test(text.lang, "en")
#set text(lang: "de")
#context test(text.lang, "de")
#text(lang: "es", context test(text.lang, "es"))


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (string)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (string)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (context
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))
              (string)))))))
  (parbreak))

====================
typst/get-rule/get-rule-in-function
====================

// Test whether context is retained in nested function.
#let translate(..args) = args.named().at(text.lang)
#set text(lang: "de")
#context test(translate(de: "Inhalt", en: "Contents"), "Inhalt")


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (field
          (call
            (field
              (ident)
              (ident))
            (group))
          (ident))
        (group
          (field
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (string))))
          (string)))))
  (parbreak))

====================
typst/get-rule/get-rule-in-array-callback
====================

// Test whether context is retained in built-in callback.
#set text(lang: "de")
#context test(
  ("en", "de", "fr").sorted(key: v => v != text.lang),
  ("de", "en", "fr"),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (group
                (string)
                (string)
                (string))
              (ident))
            (group
              (tagged
                (ident)
                (lambda
                  (ident)
                  (cmp
                    (ident)
                    (field
                      (ident)
                      (ident)))))))
          (group
            (string)
            (string)
            (string))))))
  (parbreak))

====================
typst/get-rule/get-rule-folding
====================

// Test folding.
#set rect(stroke: red)
#context {
  test(type(rect.stroke), stroke)
  test(rect.stroke.paint, red)
}
#[
  #set rect(stroke: 4pt)
  #context test(rect.stroke, 4pt + red)
]
#context test(rect.stroke, stroke(red))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (context
      (block
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))))
            (ident)))
        (call
          (ident)
          (group
            (field
              (field
                (ident)
                (ident))
              (ident))
            (ident))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (code
        (context
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))
              (add
                (number
                  (unit))
                (ident))))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (call
            (ident)
            (group
              (ident)))))))
  (parbreak))

====================
typst/get-rule/get-rule-figure-caption-collision
====================

// We have one collision: `figure.caption` could be both the element and a get
// rule for the `caption` field, which is settable. We always prefer the
// element. It's unfortunate, but probably nobody writes
// `set figure(caption: ..)` anyway.
#test(type(figure.caption), function)
#context test(type(figure.caption), function)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (ident))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))))
          (ident)))))
  (parbreak))

====================
typst/get-rule/get-rule-assertion-failure
====================

// Error: 10-31 Assertion failed: "en" != "de"
#context test(text.lang, "de")


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (string)))))
  (parbreak))

====================
typst/get-rule/get-rule-unknown-field
====================

// Error: 15-20 function `text` does not contain field `langs`
#context text.langs


--------------------

(source_file
  (comment)
  (code
    (context
      (field
        (ident)
        (ident))))
  (parbreak))

====================
typst/get-rule/get-rule-inherent-field
====================

// Error: 18-22 function `heading` does not contain field `body`
#context heading.body


--------------------

(source_file
  (comment)
  (code
    (context
      (field
        (ident)
        (ident))))
  (parbreak))

====================
typst/get-rule/get-rule-missing-context-no-context
====================

// Error: 7-11 can only be used when context is known
// Hint: 7-11 try wrapping this in a `context` expression
// Hint: 7-11 the `context` expression should wrap everything that depends on this function
#text.lang


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/get-rule/get-rule-unknown-field-no-context
====================

// Error: 7-12 function `text` does not contain field `langs`
#text.langs


--------------------

(source_file
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/get-rule/get-rule-inherent-field-no-context
====================

// Error: 10-14 function `heading` does not contain field `body`
#heading.body
--------------------

(source_file
  (comment)
  (code
    (field
      (ident)
      (ident))))

====================
typst/if/if-markup
====================

// Test condition evaluation.
#if 1 < 2 [
  One.
]

#if true == false [
  {Bad}, but we {dont-care}!
]


--------------------

(source_file
  (comment)
  (code
    (branch
      (cmp
        (number)
        (number))
      (content
        (text))))
  (parbreak)
  (code
    (branch
      (cmp
        (bool)
        (bool))
      (content
        (text))))
  (parbreak))

====================
typst/if/if-condition-complex
====================

// Braced condition.
#if {true} [
  One.
]

// Content block in condition.
#if [] != none [
  Two.
]

// Multi-line condition with parens.
#if (
  1 + 1
    == 1
) [
  Nope.
] else {
  "Three."
}

// Multiline.
#if false [
  Bad.
] else {
  let point = "."
  "Four" + point
}

// Content block can be argument or body depending on whitespace.
#{
  if content == type[b] [Fi] else [Nope]
  if content == type [Nope] else [ve.]
}

#let i = 3
#if i < 2 [
  Five.
] else if i < 4 [
  Six.
] else [
  Seven.
]


--------------------

(source_file
  (comment)
  (code
    (branch
      (block
        (bool))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (branch
      (cmp
        (content)
        (none))
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (branch
      (group
        (cmp
          (add
            (number)
            (number))
          (number)))
      (content
        (text))
      (block
        (string))))
  (parbreak)
  (comment)
  (code
    (branch
      (bool)
      (content
        (text))
      (block
        (let
          (ident)
          (string))
        (add
          (string)
          (ident)))))
  (parbreak)
  (comment)
  (code
    (block
      (branch
        (cmp
          (ident)
          (call
            (ident)
            (content
              (text))))
        (content
          (text))
        (content
          (text)))
      (branch
        (cmp
          (ident)
          (ident))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (let
      (ident)
      (number)))
  (code
    (branch
      (cmp
        (ident)
        (number))
      (content
        (text))
      (branch
        (cmp
          (ident)
          (number))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/if/if-else-if-else
====================

// Test else if.

#let nth(n) = {
  str(n)
  if n == 1 { "st" }
  else if n == 2 { "nd" }
  else if n == 3 { "rd" }
  else { "th" }
}

#test(nth(1), "1st")
#test(nth(2), "2nd")
#test(nth(3), "3rd")
#test(nth(4), "4th")
#test(nth(5), "5th")


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (call
          (ident)
          (group
            (ident)))
        (branch
          (cmp
            (ident)
            (number))
          (block
            (string))
          (branch
            (cmp
              (ident)
              (number))
            (block
              (string))
            (branch
              (cmp
                (ident)
                (number))
              (block
                (string))
              (block
                (string))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (parbreak))

====================
typst/if/if-expression
====================

// Value of if expressions.

#{
  let x = 1
  let y = 2
  let z

  // Returns if branch.
  z = if x < y { "ok" }
  test(z, "ok")

  // Returns else branch.
  z = if x > y { "bad" } else { "ok" }
  test(z, "ok")

  // Missing else evaluates to none.
  z = if x > y { "bad" }
  test(z, none)
}


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (block
      (let
        (ident)
        (number))
      (let
        (ident)
        (number))
      (let
        (ident))
      (comment)
      (assign
        (ident)
        (branch
          (cmp
            (ident)
            (ident))
          (block
            (string))))
      (call
        (ident)
        (group
          (ident)
          (string)))
      (comment)
      (assign
        (ident)
        (branch
          (cmp
            (ident)
            (ident))
          (block
            (string))
          (block
            (string))))
      (call
        (ident)
        (group
          (ident)
          (string)))
      (comment)
      (assign
        (ident)
        (branch
          (cmp
            (ident)
            (ident))
          (block
            (string))))
      (call
        (ident)
        (group
          (ident)
          (none)))))
  (parbreak))

====================
typst/if/if-condition-string-invalid
====================

// Condition must be boolean.
// If it isn't, neither branch is evaluated.
// Error: 5-14 expected boolean, found string
#if "a" + "b" { nope } else { nope }


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (branch
      (add
        (string)
        (string))
      (block
        (ident))
      (block
        (ident))))
  (parbreak))

====================
typst/if/if-condition-invalid-and-wrong-type
====================

// Make sure that we don't complain twice.
// Error: 5-12 cannot add integer and string
#if 1 + "2" {}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (branch
      (add
        (number)
        (string))
      (block)))
  (parbreak))

====================
typst/if/if-incomplete
====================

// Error: 4 expected expression
#if

// Error: 5 expected expression
#{if}

// Error: 6 expected block
#if x

// Error: 2-6 unexpected keyword `else`
#else {}

// Should output `x`.
// Error: 4 expected expression
#if
x {}

// Should output `something`.
// Error: 6 expected block
#if x something

// Should output `A thing.`
// Error: 19 expected block
A#if false {} else thing

#if a []else [b]
#if a [] else [b]
#if a {} else [b]
--------------------



====================
typst/field/field-function
====================

// Test fields on function scopes.
#enum.item
#assert.eq
#assert.ne


--------------------

(source_file
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/field/field-normal-function-invalid
====================

// Error: 9-16 function `assert` does not contain field `invalid`
#assert.invalid


--------------------

(source_file
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/field/field-elem-function-invalid
====================

// Error: 7-14 function `enum` does not contain field `invalid`
#enum.invalid


--------------------

(source_file
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/field/field-elem-function-invalid-call
====================

// Error: 7-14 function `enum` does not contain field `invalid`
#enum.invalid()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/field/field-closure-invalid
====================

// Closures cannot have fields.
#let f(x) = x
// Error: 4-11 cannot access fields on user-defined functions
#f.invalid


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/field/field-bool-invalid
====================

// Error: 8-10 cannot access fields on type boolean
#false.ok


--------------------

(source_file
  (comment)
  (code
    (field
      (bool)
      (ident)))
  (parbreak))

====================
typst/field/field-bool-keyword-invalid
====================

// Error: 9-13 cannot access fields on type boolean
#{false.true}


--------------------

(source_file
  (comment)
  (code
    (block
      (field
        (bool)
        (ident))))
  (parbreak))

====================
typst/field/field-invalid-none
====================

#{
  let object = none
  // Error: 3-9 none does not have accessible fields
  object.property = "value"
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (none))
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/field/field-invalid-int
====================

#{
  let object = 10
  // Error: 3-9 integer does not have accessible fields
  object.property = "value"
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (number))
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/field/field-mutable-invalid-symbol
====================

#{
  let object = sym.eq.not
  // Error: 3-9 cannot mutate fields on symbol
  object.property = "value"
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (field
          (field
            (ident)
            (ident))
          (ident)))
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/field/field-mutable-invalid-module
====================

#{
  let object = calc
  // Error: 3-9 cannot mutate fields on module
  object.property = "value"
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (ident))
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/field/field-mutable-invalid-function
====================

#{
  let object = calc.sin
  // Error: 3-9 cannot mutate fields on function
  object.property = "value"
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (field
          (ident)
          (ident)))
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/field/field-mutable-invalid-stroke
====================

#{
  let s = 1pt + red
  // Error: 3-4 fields on stroke are not yet mutable
  // Hint: 3-4 try creating a new stroke with the updated field value instead
  s.thickness = 5pt
}
--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (add
          (number
            (unit))
          (ident)))
      (comment)
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (number
          (unit))))))

====================
typst/params/param-underscore-missing-argument
====================

// Error: 17-20 missing argument: pattern parameter
#let f(a: 10) = a() + 1
#f(a: _ => 5)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (add
        (call
          (ident)
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (lambda
            (ident)
            (number))))))
  (parbreak))

====================
typst/params/params-sink-named
====================

// ... but this was.
#let f(..x) = {}
#f(arg: 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (block)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/params/params-sink-unnamed
====================

// unnamed spread
#let f(.., a) = a
#test(f(1, 2, 3), 3)

// This wasn't allowed before the bug fix ...
#let f(..) = 2
#test(f(arg: 1), 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude)
          (ident)))
      (ident)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (number)))
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude)))
      (number)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))))
        (number))))
  (parbreak))

====================
typst/params/params-sink-bool-invalid
====================

// Error: 10-14 expected pattern, found boolean
#let f(..true) = none


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (bool))))
      (none)))
  (parbreak))

====================
typst/params/params-sink-multiple-invalid
====================

// Error: 13-16 only one argument sink is allowed
#let f(..a, ..b) = none


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))
          (elude
            (ident))))
      (none)))
  (parbreak))

====================
typst/params/params-sink-at-start
====================

// Spread at beginning.
#{
  let f(..a, b) = (a, b)
  test(repr(f(1)), "(arguments(), 1)")
  test(repr(f(1, 2, 3)), "(arguments(1, 2), 3)")
  test(repr(f(1, 2, 3, 4, 5)), "(arguments(1, 2, 3, 4), 5)")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (elude
              (ident))
            (ident)))
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (number)))))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (number)
                  (number)
                  (number)))))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)))))
          (string)))))
  (parbreak))

====================
typst/params/params-sink-in-middle
====================

// Spread in the middle.
#{
  let f(a, ..b, c) = (a, b, c)
  test(repr(f(1, 2)), "(1, arguments(), 2)")
  test(repr(f(1, 2, 3, 4, 5)), "(1, arguments(2, 3, 4), 5)")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (ident)
            (elude
              (ident))
            (ident)))
        (group
          (ident)
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (number)
                  (number)))))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)))))
          (string)))))
  (parbreak))

====================
typst/params/params-sink-unnamed-empty
====================

// Unnamed sink should just ignore any extra arguments.
#{
  let f(a, b: 5, ..) = (a, b)
  test(f(4), (4, 5))
  test(f(10, b: 11), (10, 11))
  test(f(13, 20, b: 12), (13, 12))
  test(f(15, b: 16, c: 13), (15, 16))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (ident)
            (tagged
              (ident)
              (number))
            (elude)))
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number)))
          (group
            (number)
            (number))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number)
              (tagged
                (ident)
                (number))))
          (group
            (number)
            (number))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number)
              (number)
              (tagged
                (ident)
                (number))))
          (group
            (number)
            (number))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number)
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (group
            (number)
            (number))))))
  (parbreak))

====================
typst/params/params-sink-missing-arguments
====================

#{
  let f(..a, b, c, d) = none

  // Error: 3-10 missing argument: d
  f(1, 2)
}


--------------------

(source_file
  (code
    (block
      (let
        (call
          (ident)
          (group
            (elude
              (ident))
            (ident)
            (ident)
            (ident)))
        (none))
      (comment)
      (call
        (ident)
        (group
          (number)
          (number)))))
  (parbreak))

====================
typst/params/issue-1029-parameter-destructuring
====================

// Test that underscore works in parameter patterns.
#test((1, 2, 3).zip((1, 2, 3)).map(((_, x)) => x), (1, 2, 3))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (group
                  (number)
                  (number)
                  (number))
                (ident))
              (group
                (group
                  (number)
                  (number)
                  (number))))
            (ident))
          (group
            (lambda
              (group
                (group
                  (ident)
                  (ident)))
              (ident))))
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/params/issue-1351-parameter-dictionary
====================

// Error: 17-22 expected pattern, found string
#let foo((test: "bar")) = {}
--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (group
            (tagged
              (ident)
              (string)))))
      (block))))

====================
typst/let/let-basic
====================

// Automatically initialized with none.
#let x
#test(x, none)

// Manually initialized with one.
#let z = 1
#test(z, 1)

// Syntax sugar for function definitions.
#let fill = conifer
#let f(body) = rect(width: 2cm, fill: fill, inset: 5pt, body)
#f[Hi!]


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)))
  (code
    (call
      (ident)
      (group
        (ident)
        (none))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))
          (ident)))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/let/let-termination
====================

// Termination.

// Terminated by line break.
#let v1 = 1
One

// Terminated by semicolon.
#let v2 = 2; Two

// Terminated by semicolon and line break.
#let v3 = 3;
Three

#test(v1, 1)
#test(v2, 2)
#test(v3, 3)


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (number)))
  (text)
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (number)))
  (text)
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (number)))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/let/let-valid-idents
====================

// Test what constitutes a valid Typst identifier.
#let name = 1
#test(name, 1)
#let name_ = 1
#test(name_, 1)
#let name-2 = 1
#test(name-2, 1)
#let name_2 = 1
#test(name_2, 1)
#let __name = 1
#test(__name, 1)
#let ůñıćóðė = 1
#test(ůñıćóðė, 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/let/let-binding-keyword-in-markup
====================

// Error: 6-8 expected pattern, found keyword `as`
// Hint: 6-8 keyword `as` is not allowed as an identifier; try `as_` instead
#let as = 1 + 2


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (add
        (number)
        (number))))
  (parbreak))

====================
typst/let/let-binding-keyword-in-code
====================

#{
  // Error: 7-9 expected pattern, found keyword `as`
  // Hint: 7-9 keyword `as` is not allowed as an identifier; try `as_` instead
  let as = 10
}


--------------------

(source_file
  (code
    (block
      (comment)
      (comment)
      (let
        (ident)
        (number))))
  (parbreak))

====================
typst/let/let-ident-parenthesized
====================

// Test parenthesised assignments.
#let (a) = (1, 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (group
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/let/let-incomplete
====================

// Error: 5 expected pattern
#let

// Error: 6 expected pattern
#{let}

// Error: 6-9 expected pattern, found string
#let "v"

// Error: 7 expected semicolon or line break
#let v 1

// Error: 9 expected expression
#let v =

// Error: 6-9 expected pattern, found string
#let "v" = 1

// Terminated because expression ends.
// Error: 12 expected semicolon or line break
#let v4 = 4 Four

// Terminated by semicolon even though we are in a paren group.
// Error: 18 expected expression
// Error: 11-12 unclosed delimiter
#let v5 = (1, 2 + ; Five

// Error: 9-13 expected pattern, found boolean
#let (..true) = false


--------------------



====================
typst/let/underscore-invalid
====================

#let _ = 4

#for _ in range(2) []

// Error: 2-3 unexpected underscore
#_

// Error: 8-9 expected expression, found underscore
#lorem(_)

// Error: 3-4 expected expression, found underscore
#(_,)

// Error: 3-4 expected expression, found underscore
#{_}

// Error: 8-9 expected expression, found underscore
#{ 1 + _ }


--------------------

(source_file
  (code
    (let
      (ident)
      (number)))
  (parbreak)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (content)))
  (parbreak)
  (comment)
  (code
    (ident))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak)
  (comment)
  (code
    (group
      (ident)))
  (parbreak)
  (comment)
  (code
    (block
      (ident)))
  (parbreak)
  (comment)
  (code
    (block
      (add
        (number)
        (ident))))
  (parbreak))

====================
typst/let/let-function-incomplete
====================

// Error: 13 expected equals sign
#let func(x)

// Error: 15 expected expression
#let func(x) =


--------------------



====================
typst/let/let-function-parenthesized
====================

// This is not yet parsed in the ideal way.
// Error: 12 expected equals sign
#let (func)(x)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (call
        (group
          (ident))
        (group
          (ident)))))
  (parbreak))

====================
typst/let/let-function-parenthesized-with-init
====================

// These errors aren't great.
// Error: 12 expected equals sign
// Error: 15-15 expected semicolon or line break
#let (func)(x) = 3


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (call
        (group
          (ident))
        (group
          (ident)))
      (number)))
  (parbreak))

====================
typst/let/let-with-no-init-group
====================

// This was unintentionally allowed ...
// Error: 9 expected equals sign
#let (a)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (ident))))
  (parbreak))

====================
typst/let/let-with-no-init-destructuring
====================

// ... where this wasn't.
// Error: 12 expected equals sign
#let (a, b)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (group
        (ident)
        (ident))))
  (parbreak))

====================
typst/let/issue-4027-let-binding-with-keyword-context
====================

// Error: 6-13 expected pattern, found keyword `context`
// Hint: 6-13 keyword `context` is not allowed as an identifier; try `context_` instead
#let context = 5


--------------------



====================
typst/let/issue-4027-let-binding-with-keyword-let
====================

// Error: 6-9 expected pattern, found keyword `let`
// Hint: 6-9 keyword `let` is not allowed as an identifier; try `let_` instead
#let let = 5


--------------------



====================
typst/let/issue-4027-let-binding-with-destructured-keywords
====================

// Error: 7-14 expected pattern, found keyword `context`
// Hint: 7-14 keyword `context` is not allowed as an identifier; try `context_` instead
// Error: 21-24 expected pattern, found keyword `let`
// Hint: 21-24 keyword `let` is not allowed as an identifier; try `let_` instead
#let (context, foo, let) = (5, 6, 7)
--------------------



====================
typst/call/call-basic
====================


// Omitted space.
#let f() = {}
#[#f()*Bold*]

// Call return value of function with body.
#let f(x, body) = (y) => [#x] + body + [#y]
#f(1)[2](3)

// Don't parse this as a function.
#test (it)

#let f(body) = body
#f[A]
#f()[A]
#f([A])

#let g(a, b) = a + b
#g[A][B]
#g([A], [B])
#g()[A][B]


--------------------

(source_file
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (block)))
  (code
    (content
      (code
        (call
          (ident)
          (group)))
      (strong
        (text))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (lambda
        (group
          (ident))
        (add
          (add
            (content
              (code
                (ident)))
            (ident))
          (content
            (code
              (ident)))))))
  (code
    (call
      (call
        (call
          (ident)
          (group
            (number)))
        (content
          (text)))
      (group
        (number))))
  (parbreak)
  (comment)
  (code
    (ident))
  (text)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group))
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (content
          (text)))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (add
        (ident)
        (ident))))
  (code
    (call
      (call
        (ident)
        (content
          (text)))
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (content
          (text)))))
  (code
    (call
      (call
        (call
          (ident)
          (group))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/call/call-aliased-function
====================

// Call function assigned to variable.
#let alias = type
#test(alias(alias), type)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (ident)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (ident))))
  (parbreak))

====================
typst/call/call-complex-callee-expression
====================

// Callee expressions.
#{
  // Wrapped in parens.
  test((type)("hi"), str)

  // Call the return value of a function.
  let adder(dx) = x => x + dx
  test(adder(2)(5), 7)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (comment)
      (call
        (ident)
        (group
          (call
            (group
              (ident))
            (group
              (string)))
          (ident)))
      (comment)
      (let
        (call
          (ident)
          (group
            (ident)))
        (lambda
          (ident)
          (add
            (ident)
            (ident))))
      (call
        (ident)
        (group
          (call
            (call
              (ident)
              (group
                (number)))
            (group
              (number)))
          (number)))))
  (parbreak))

====================
typst/call/call-bad-type-bool-literal
====================

// Error: 2-6 expected function, found boolean
#true()


--------------------

(source_file
  (comment)
  (code
    (bool))
  (text)
  (parbreak))

====================
typst/call/call-bad-type-string-var
====================

#let x = "x"

// Error: 2-3 expected function, found string
#x()


--------------------

(source_file
  (code
    (let
      (ident)
      (string)))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/call/call-shadowed-builtin-function
====================

#let image = "image"

// Error: 2-7 expected function, found string
// Hint: 2-7 use `std.image` to access the shadowed standard library function
#image("image")


--------------------

(source_file
  (code
    (let
      (ident)
      (string)))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/call/call-bad-type-int-expr
====================

#let f(x) = x

// Error: 2-6 expected function, found integer
#f(1)(2)


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (number)))
      (group
        (number))))
  (parbreak))

====================
typst/call/call-bad-type-content-expr
====================

#let f(x) = x

// Error: 2-6 expected function, found content
#f[1](2)


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (parbreak)
  (comment)
  (code
    (call
      (call
        (ident)
        (content
          (text)))
      (group
        (number))))
  (parbreak))

====================
typst/call/call-args-trailing-comma
====================

// Trailing comma.
#test(1 + 1, 2,)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (number)
          (number))
        (number))))
  (parbreak))

====================
typst/call/call-args-duplicate
====================

// Error: 26-30 duplicate argument: font
#set text(font: "Arial", font: "Helvetica")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/call/call-args-bad-positional-as-named
====================

// Error: 4-15 the argument `amount` is positional
// Hint: 4-15 try removing `amount:`
#h(amount: 0.5)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/call/call-args-bad-colon
====================

// Error: 7-8 unexpected colon
#func(:)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/call/call-args-bad-token
====================

// Error: 10-12 unexpected end of block comment
// Hint: 10-12 consider escaping the `*` with a backslash or opening the block comment with `/*`
#func(a:1*/)


--------------------



====================
typst/call/call-args-missing-comma
====================

// Error: 8 expected comma
#func(1 2)


--------------------



====================
typst/call/call-args-bad-name-and-incomplete-pair
====================

// Error: 7-8 expected identifier, found integer
// Error: 9 expected expression
#func(1:)


--------------------



====================
typst/call/call-args-bad-name-int
====================

// Error: 7-8 expected identifier, found integer
#func(1:2)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (number)
          (number)))))
  (parbreak))

====================
typst/call/call-args-bad-name-string
====================

// Error: 7-12 expected identifier, found string
#func("abc": 2)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (string)
          (number)))))
  (parbreak))

====================
typst/call/call-args-bad-name-group
====================

// Error: 7-10 expected identifier, found group
#func((x):1)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (group
            (ident))
          (number)))))
  (parbreak))

====================
typst/call/call-args-lone-underscore
====================

// Test that lone underscore works.
#test((1, 2, 3).map(_ => {}).len(), 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (group
                  (number)
                  (number)
                  (number))
                (ident))
              (group
                (lambda
                  (ident)
                  (block))))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/call/call-args-spread-override
====================

// Test standard argument overriding.
#{
  let f(style: "normal", weight: "regular") = {
    "(style: " + style + ", weight: " + weight + ")"
  }

  let myf(..args) = f(weight: "bold", ..args)
  test(myf(), "(style: normal, weight: bold)")
  test(myf(weight: "black"), "(style: normal, weight: black)")
  test(myf(style: "italic"), "(style: italic, weight: bold)")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (string))))
        (block
          (add
            (add
              (add
                (add
                  (string)
                  (ident))
                (string))
              (ident))
            (string))))
      (let
        (call
          (ident)
          (group
            (elude
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (elude
              (ident)))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (string)))))
  (parbreak))

====================
typst/call/call-args-spread-forward
====================

// Test multiple calls.
#{
  let f(b, c: "!") = b + c
  let g(a, ..sink) = a + f(..sink)
  test(g("a", "b", c: "c"), "abc")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (ident)
            (tagged
              (ident)
              (string))))
        (add
          (ident)
          (ident)))
      (let
        (call
          (ident)
          (group
            (ident)
            (elude
              (ident))))
        (add
          (ident)
          (call
            (ident)
            (group
              (elude
                (ident))))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)
              (string)
              (tagged
                (ident)
                (string))))
          (string)))))
  (parbreak))

====================
typst/call/call-args-spread-type-repr
====================

// Test doing things with arguments.
#{
  let save(..args) = {
    test(type(args), arguments)
    test(repr(args), "arguments(three: true, 1, 2)")
  }

  save(1, 2, three: true)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (call
          (ident)
          (group
            (elude
              (ident))))
        (block
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (ident)))
              (ident)))
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (ident)))
              (string)))))
      (call
        (ident)
        (group
          (number)
          (number)
          (tagged
            (ident)
            (bool))))))
  (parbreak))

====================
typst/call/call-args-spread-array-and-dict
====================

// Test spreading array and dictionary.
#{
  let more = (3, -3, 6, 10)
  test(calc.min(1, 2, ..more), -3)
  test(calc.max(..more, 9), 10)
  test(calc.max(..more, 11), 11)
}

#{
  let more = (c: 3, d: 4)
  let tostr(..args) = repr(args)
  test(tostr(a: 1, ..more, b: 2), "arguments(a: 1, c: 3, d: 4, b: 2)")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (sign
            (number))
          (number)
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number)
              (number)
              (elude
                (ident))))
          (sign
            (number))))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (ident))
              (number)))
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (elude
                (ident))
              (number)))
          (number)))))
  (parbreak)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))
      (let
        (call
          (ident)
          (group
            (elude
              (ident))))
        (call
          (ident)
          (group
            (ident))))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (elude
                (ident))
              (tagged
                (ident)
                (number))))
          (string)))))
  (parbreak))

====================
typst/call/call-args-spread-none
====================

// None is spreadable.
#let f() = none
#f(..none)
#f(..if false {})
#f(..for x in () [])


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (none)))
  (code
    (call
      (ident)
      (group
        (elude
          (none)))))
  (code
    (call
      (ident)
      (group
        (elude
          (branch
            (bool)
            (block))))))
  (code
    (call
      (ident)
      (group
        (elude
          (for
            (ident)
            (group)
            (content))))))
  (parbreak))

====================
typst/call/call-args-spread-string-invalid
====================

// Error: 11-19 cannot spread string
#calc.min(.."nope")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (elude
          (string)))))
  (parbreak))

====================
typst/call/call-args-content-block-unclosed
====================

// Error: 6-7 unclosed delimiter
#func[`a]`


--------------------



====================
typst/call/issue-886-args-sink
====================

// Test bugs with argument sinks.
#let foo(..body) = repr(body.pos())
#foo(a: "1", b: "2", 1, 2, 3, 4, 5, 6)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (number)
        (number)
        (number)
        (number)
        (number)
        (number))))
  (parbreak))

====================
typst/call/issue-3144-unexpected-arrow
====================

#let f(a: 10) = a(1) + 1
#test(f(a: _ => 5), 6)


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (add
        (call
          (ident)
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (number)))))
        (number))))
  (parbreak))

====================
typst/call/issue-3502-space-and-comments-around-destructuring-colon
====================

#let ( key :  /* hi */ binding ) = ( key: "ok" )
#test(binding, "ok")


--------------------

(source_file
  (code
    (let
      (group
        (tagged
          (ident)
          (comment)
          (ident)))
      (group
        (tagged
          (ident)
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak))

====================
typst/call/issue-3502-space-around-dict-colon
====================

#test(( key : "value" ).key, "value")


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (field
          (group
            (tagged
              (ident)
              (string)))
          (ident))
        (string))))
  (parbreak))

====================
typst/call/issue-3502-space-around-param-colon
====================

// Test that a space after a named parameter is permissible.
#let f( param : v ) = param
#test(f( param /* ok */ : 2 ), 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (ident)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (comment)
              (number))))
        (number))))
  (parbreak))

====================
typst/call/call-args-unclosed
====================

// Error: 7-8 unclosed delimiter
#{func(}


--------------------



====================
typst/call/call-args-unclosed-string
====================

// Error: 6-7 unclosed delimiter
// Error: 1:7-2:1 unclosed string
#func("]
--------------------



====================
typst/loop/loop-break-basic
====================

// Test break.

#let var = 0
#let error = false

#for i in range(10) {
  var += i
  if i > 5 {
    break
    error = true
  }
}

#test(var, 21)
#test(error, false)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (ident)
      (bool)))
  (parbreak)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (assign
          (ident)
          (ident))
        (branch
          (cmp
            (ident)
            (number))
          (block
            (flow)
            (assign
              (ident)
              (bool)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (bool))))
  (parbreak))

====================
typst/loop/loop-break-join-basic
====================

// Test joining with break.

#let i = 0
#let x = while true {
  i += 1
  str(i)
  if i >= 5 {
    "."
    break
  }
}

#test(x, "12345.")


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (ident)
      (while
        (bool)
        (block
          (assign
            (ident)
            (number))
          (call
            (ident)
            (group
              (ident)))
          (branch
            (cmp
              (ident)
              (number))
            (block
              (string)
              (flow)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak))

====================
typst/loop/loop-continue-basic
====================

// Test continue.

#let i = 0
#let x = 0

#while x < 8 {
  i += 1
  if calc.rem(i, 3) == 0 {
    continue
  }
  x += i
}

// If continue did not work, this would equal 10.
#test(x, 12)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (ident)
      (number)))
  (parbreak)
  (code
    (while
      (cmp
        (ident)
        (number))
      (block
        (assign
          (ident)
          (number))
        (branch
          (cmp
            (call
              (field
                (ident)
                (ident))
              (group
                (ident)
                (number)))
            (number))
          (block
            (flow)))
        (assign
          (ident)
          (ident)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/loop/loop-continue-join
====================

// Test joining with continue.

#let x = for i in range(5) {
  "a"
  if calc.rem(i, 3) == 0 {
    "_"
    continue
  }
  str(i)
}

#test(x, "a_a1a2a_a4")


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (ident)
      (for
        (ident)
        (call
          (ident)
          (group
            (number)))
        (block
          (string)
          (branch
            (cmp
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)
                  (number)))
              (number))
            (block
              (string)
              (flow)))
          (call
            (ident)
            (group
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak))

====================
typst/loop/loop-break-outside-of-loop
====================

// Test break outside of loop.
#let f() = {
  // Error: 3-8 cannot break outside of loop
  break
}

#for i in range(1) {
  f()
}


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (comment)
        (flow))))
  (parbreak)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (call
          (ident)
          (group)))))
  (parbreak))

====================
typst/loop/loop-break-join-in-last-arg
====================

// Test break in function call.
#let identity(x) = x
#let out = for i in range(5) {
  "A"
  identity({
    "B"
    break
  })
  "C"
}

#test(out, "AB")


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (code
    (let
      (ident)
      (for
        (ident)
        (call
          (ident)
          (group
            (number)))
        (block
          (string)
          (call
            (ident)
            (group
              (block
                (string)
                (flow))))
          (string)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak))

====================
typst/loop/loop-continue-outside-of-loop-in-block
====================

// Test continue outside of loop.

// Error: 12-20 cannot continue outside of loop
#let x = { continue }


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (block
        (flow))))
  (parbreak))

====================
typst/loop/loop-continue-outside-of-loop-in-markup
====================

// Error: 2-10 cannot continue outside of loop
#continue


--------------------

(source_file
  (comment)
  (code
    (flow))
  (parbreak))

====================
typst/loop/loop-break-join-in-nested-blocks
====================

// Should output `Hello World 🌎`.
#for _ in range(10) {
  [Hello ]
  [World #{
    [🌎]
    break
  }]
}


--------------------

(source_file
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (content
          (text))
        (content
          (text)
          (code
            (block
              (content
                (text))
              (flow)))))))
  (parbreak))

====================
typst/loop/loop-break-join-set-and-show
====================

// Should output `Some` in red, `Some` in blue and `Last` in green.
// Everything should be in smallcaps.
#for color in (red, blue, green, yellow) [
  #set text(font: "Roboto")
  #show: it => text(fill: color, it)
  #smallcaps(if color != green [
    Some
  ] else [
    Last
    #break
  ])
]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (ident)
      (group
        (ident)
        (ident)
        (ident)
        (ident))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (string))))))
        (code
          (show
            (lambda
              (ident)
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (ident))))))
        (code
          (call
            (ident)
            (group
              (branch
                (cmp
                  (ident)
                  (ident))
                (content
                  (text))
                (content
                  (text)
                  (code
                    (flow))))))))))
  (parbreak))

====================
typst/loop/loop-break-join-in-set-rule-args
====================

// Test break in set rule.
// Should output `Hi` in blue.
#for i in range(10) {
  [Hello]
  set text(blue, ..break)
  [Not happening]
}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (content
          (text))
        (set
          (call
            (ident)
            (group
              (ident)
              (elude
                (flow)))))
        (content
          (text)))))
  (parbreak))

====================
typst/loop/loop-break-join-in-first-arg
====================

// Test second block during break flow.

#for i in range(10) {
  table(
    { [A]; break },
    for _ in range(3) [B]
  )
}
--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (call
          (ident)
          (group
            (block
              (content
                (text))
              (flow))
            (for
              (ident)
              (call
                (ident)
                (group
                  (number)))
              (content
                (text)))))))))

====================
typst/while/while-loop-basic
====================

// Should output `2 4 6 8 10`.
#let i = 0
#while i < 10 [
  #(i += 2)
  #i
]

// Should output `Hi`.
#let iter = true
#while iter {
  iter = false
  "Hi."
}

#while false {
  dont-care
}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (while
      (cmp
        (ident)
        (number))
      (content
        (code
          (group
            (assign
              (ident)
              (number))))
        (code
          (ident)))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (bool)))
  (code
    (while
      (ident)
      (block
        (assign
          (ident)
          (bool))
        (string))))
  (parbreak)
  (code
    (while
      (bool)
      (block
        (ident))))
  (parbreak))

====================
typst/while/while-loop-expr
====================

// Value of while loops.

#test(while false {}, none)

#let i = 0
#test(type(while i < 1 [#(i += 1)]), content)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (while
          (bool)
          (block))
        (none))))
  (parbreak)
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (while
              (cmp
                (ident)
                (number))
              (content
                (code
                  (group
                    (assign
                      (ident)
                      (number))))))))
        (ident))))
  (parbreak))

====================
typst/while/while-loop-condition-content-invalid
====================

// Condition must be boolean.
// Error: 8-14 expected boolean, found content
#while [nope] [nope]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (while
      (content
        (text))
      (content
        (text))))
  (parbreak))

====================
typst/while/while-loop-condition-always-true
====================

// Error: 8-25 condition is always true
#while 2 < "hello".len() {}


--------------------

(source_file
  (comment)
  (code
    (while
      (cmp
        (number)
        (call
          (field
            (string)
            (ident))
          (group)))
      (block)))
  (parbreak))

====================
typst/while/while-loop-limit
====================

// Error: 2:2-2:24 loop seems to be infinite
#let i = 1
#while i > 0 { i += 1 }


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (while
      (cmp
        (ident)
        (number))
      (block
        (assign
          (ident)
          (number)))))
  (parbreak))

====================
typst/while/while-loop-incomplete
====================

// Error: 7 expected expression
#while

// Error: 8 expected expression
#{while}

// Error: 9 expected block
#while x

// Error: 7 expected expression
#while
x {}

// Error: 9 expected block
#while x something
--------------------



====================
typst/return/return-with-value
====================

// Test return with value.
#let f(x) = {
  return x + 1
}

#test(f(1), 2)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (return
          (add
            (ident)
            (number))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/return/return-join
====================

// Test return with joining.

#let f(x) = {
  "a"
  if x == 0 {
    return "b"
  } else if x == 1 {
    "c"
  } else {
    "d"
    return
    "e"
  }
}

#test(f(0), "b")
#test(f(1), "ac")
#test(f(2), "ad")


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (string)
        (branch
          (cmp
            (ident)
            (number))
          (block
            (return
              (string)))
          (branch
            (cmp
              (ident)
              (number))
            (block
              (string))
            (block
              (string)
              (return)
              (string)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (parbreak))

====================
typst/return/return-in-nested-content-block
====================

// Test return with joining and content.

#let f(text, caption: none) = {
  text
  if caption == none [\.#return]
  [, ]
  emph(caption)
  [\.]
}

#f(caption: [with caption])[My figure]

#f[My other figure]


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (none))))
      (block
        (ident)
        (branch
          (cmp
            (ident)
            (none))
          (content
            (text
              (escape))
            (code
              (return))))
        (content
          (text))
        (call
          (ident)
          (group
            (ident)))
        (content
          (text
            (escape))))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))
      (content
        (text))))
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/return/return-outside-of-function
====================

// Test return outside of function.

#for x in range(5) {
  // Error: 3-9 cannot return outside of function
  return
}


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)))
      (block
        (comment)
        (return))))
  (parbreak))

====================
typst/return/return-in-first-arg
====================

// Test that the expression is evaluated to the end.
#let sum(..args) = {
  let s = 0
  for v in args.pos() {
    s += v
  }
  s
}

#let f() = {
  sum(..return, 1, 2, 3)
  "nope"
}

#test(f(), 6)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (block
        (let
          (ident)
          (number))
        (for
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group))
          (block
            (assign
              (ident)
              (ident))))
        (ident))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (call
          (ident)
          (group
            (elude
              (return))
            (number)
            (number)
            (number)))
        (string))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (number))))
  (parbreak))

====================
typst/return/return-in-content-block
====================

// Test value return from content.
#let x = 3
#let f() = [
  Hello 😀
  #return "nope"
  World
]

#test(f(), "nope")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (let
      (call
        (ident)
        (group))
      (content
        (text)
        (code
          (return
            (string)))
        (text))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (string))))
  (parbreak))

====================
typst/return/return-semicolon-or-linebreak
====================

// Test rejection of extra value
#let f() = [
  // Error: 16-16 expected semicolon or line break
  #return a + b Hello World
]


--------------------



====================
typst/return/return-discard-content
====================

// Test that discarding joined content is a warning.
#let f() = {
  [Hello, World!]
  // Warning: 3-16 this return unconditionally discards the content before it
  // Hint: 3-16 try omitting the `return` to automatically join all values
  return "nope"
}

#test(f(), "nope")


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (content
          (text))
        (comment)
        (comment)
        (return
          (string)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (string))))
  (parbreak))

====================
typst/return/return-discard-content-nested
====================

#let f() = {
  [Hello, World!]
  {
    // Warning: 5-18 this return unconditionally discards the content before it
    // Hint: 5-18 try omitting the `return` to automatically join all values
    return "nope"
  }
}

#test(f(), "nope")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (content
          (text))
        (block
          (comment)
          (comment)
          (return
            (string))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (string))))
  (parbreak))

====================
typst/return/return-discard-state
====================

// Test that discarding a joined content with state is special warning

#let f() = {
  state("hello").update("world")

  // Warning: 3-19 this return unconditionally discards the content before it
  // Hint: 3-19 try omitting the `return` to automatically join all values
  // Hint: 3-19 state/counter updates are content that must end up in the document to have an effect
  return [ Hello ]
}

#test(f(), [ Hello ])


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (string)))
        (comment)
        (comment)
        (comment)
        (return
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (content
          (text)))))
  (parbreak))

====================
typst/return/return-discard-loop
====================

// Test that return from within a control flow construct is not a warning.
#let f1() = {
  state("hello").update("world")
  for x in range(3) {
    return "nope1"
  }
}

#let f2() = {
  state("hello").update("world")
  let i = 0
  while i < 10 {
    return "nope2"
  }
}

#test(f1(), "nope1")
#test(f2(), "nope2")


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (string)))
        (for
          (ident)
          (call
            (ident)
            (group
              (number)))
          (block
            (return
              (string)))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (string)))
        (let
          (ident)
          (number))
        (while
          (cmp
            (ident)
            (number))
          (block
            (return
              (string)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (string))))
  (parbreak))

====================
typst/return/return-no-discard
====================

// Test that returning the joined content is not a warning.
#let f() = {
  state("hello").update("world")
  return
}

#test(f(), state("hello").update("world"))


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (string)))
        (return))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (string))))))
  (parbreak))

====================
typst/return/return-discard-not-content
====================

// Test that non-content joined value is not a warning.
#let f() = {
  (33,)
  return (66,)
}

#test(f(), (66, ))


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (block
        (group
          (number))
        (return
          (group
            (number))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (group
          (number)))))
  (parbreak))

====================
typst/return/return-discard-markup
====================

// Test that discarding markup is not a warning.
#let f() = [
  hello
  #return [nope]
]

#test(f(), [nope])
--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group))
      (content
        (text)
        (code
          (return
            (content
              (text)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (content
          (text))))))

====================
typst/methods/method-whitespace
====================

// Test whitespace around dot.
#test( "Hi there" . split() , ("Hi", "there"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/methods/method-mutating
====================

// Test mutating indexed value.
#{
  let matrix = (((1,), (2,)), ((3,), (4,)))
  matrix.at(1).at(0).push(5)
  test(matrix, (((1,), (2,)), ((3, 5), (4,))))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (group
            (group
              (number))
            (group
              (number)))
          (group
            (group
              (number))
            (group
              (number)))))
      (call
        (field
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (number)))
              (ident))
            (group
              (number)))
          (ident))
        (group
          (number)))
      (call
        (ident)
        (group
          (ident)
          (group
            (group
              (group
                (number))
              (group
                (number)))
            (group
              (group
                (number)
                (number))
              (group
                (number))))))))
  (parbreak))

====================
typst/methods/method-multiline
====================

// Test multiline chain in code block.
#{
  let rewritten = "Hello. This is a sentence. And one more."
    .split(".")
    .map(s => s.trim())
    .filter(s => s != "")
    .map(s => s + "!")
    .join("\n ")

  test(rewritten, "Hello!\n This is a sentence!\n And one more!")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (call
          (field
            (call
              (field
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (string)
                            (ident))
                          (group
                            (string)))
                        (ident))
                      (group
                        (lambda
                          (ident)
                          (call
                            (field
                              (ident)
                              (ident))
                            (group)))))
                    (ident))
                  (group
                    (lambda
                      (ident)
                      (cmp
                        (ident)
                        (string)))))
                (ident))
              (group
                (lambda
                  (ident)
                  (add
                    (ident)
                    (string)))))
            (ident))
          (group
            (string
              (escape)))))
      (call
        (ident)
        (group
          (ident)
          (string
            (escape)
            (escape))))))
  (parbreak))

====================
typst/methods/method-unknown
====================

// Error: 2:10-2:13 type array has no method `fun`
#let numbers = ()
#numbers.fun()


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group)))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/methods/method-unknown-but-field-exists
====================

// Error: 2:4-2:10 type content has no method `stroke`
// Hint: 2:4-2:10 did you mean to access the field `stroke`?
#let l = line(stroke: red)
#l.stroke()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/methods/method-mutate-on-temporary
====================

// Error: 2:2-2:43 cannot mutate a temporary value
#let numbers = (1, 2, 3)
#numbers.map(v => v / 2).sorted().map(str).remove(4)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (call
      (field
        (call
          (field
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (lambda
                      (ident)
                      (div
                        (ident)
                        (number)))))
                (ident))
              (group))
            (ident))
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/methods/assign-to-method-invalid
====================

// Error: 2:3-2:19 cannot mutate a temporary value
#let numbers = (1, 2, 3)
#(numbers.sorted() = 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/methods/method-mutate-on-std-constant
====================

// Error: 2-5 cannot mutate a constant: box
#box.push(1)
--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)))))

====================
typst/import/import-basic
====================

// Test basic syntax and semantics.

// Test that this will be overwritten.
#let value = [foo]

// Import multiple things.
#import "module.typ": fn, value
#fn[Like and Subscribe!]
#value

// Should output `bye`.
// Stop at semicolon.
#import "module.typ": a, c;bye


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (content
        (text))))
  (parbreak)
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (ident))
  (parbreak)
  (comment)
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident))))
  (text)
  (parbreak))

====================
typst/import/import-item-markup
====================

// An item import.
#import "module.typ": item
#test(item(1, 2), 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-item-in-code
====================

// Code mode
#{
  import "module.typ": b
  test(b, 1)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (import
        (string)
        (binding
          (ident)))
      (call
        (ident)
        (group
          (ident)
          (number)))))
  (parbreak))

====================
typst/import/import-wildcard-in-markup
====================

// A wildcard import.
#import "module.typ": *

// It exists now!
#test(d, 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/import/import-item-renamed
====================

// A renamed item import.
#import "module.typ": item as something
#test(something(1, 2), 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-items-renamed-mixed
====================

// Mixing renamed and not renamed items.
#import "module.typ": fn, b as val, item as other
#test(val, 1)
#test(other(1, 2), 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident)
        (as
          (ident)))
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-nested-item
====================

// Nested item imports.
#import "modules/chap1.typ" as orig-chap1
#import "modules/chap2.typ" as orig-chap2
#import "module.typ": chap2, chap2.name, chap2.chap1, chap2.chap1.name as othername
#test(chap2, orig-chap2)
#test(chap1, orig-chap1)
#test(name, "Peter")
#test(othername, "Klaus")


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))))
  (code
    (import
      (string)
      (as
        (ident))))
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident)
        (ident))
      (binding
        (ident)
        (ident))
      (binding
        (ident)
        (ident)
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (parbreak))

====================
typst/import/import-items-parenthesized
====================

#import "module.typ": ()
#import "module.typ": (a)
#import "module.typ": (a, b)
#import "module.typ": (a, b, c, d)

#test(a, none)
#test(b, 1)
#test(c, 2)
#test(d, 3)


--------------------

(source_file
  (code
    (import
      (string)))
  (code
    (import
      (string)
      (binding
        (ident))))
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident))))
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident))
      (binding
        (ident))
      (binding
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (none))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/import/import-items-parenthesized-multiline
====================

#import "module.typ": (
  a
)
#import "module.typ": (
  a, b as e,
  c,


      d,
)

#test(a, none)
#test(e, 1)
#test(c, 2)
#test(d, 3)


--------------------

(source_file
  (code
    (import
      (string)
      (binding
        (ident))))
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident)
        (as
          (ident)))
      (binding
        (ident))
      (binding
        (ident))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (none))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/import/import-items-parenthesized-invalid
====================

// Error: 23-24 unclosed delimiter
#import "module.typ": (a, b, c


--------------------



====================
typst/import/import-items-parenthesized-invalid-2
====================

// Error: 23-24 unclosed delimiter
#import "module.typ": (


--------------------



====================
typst/import/import-items-parenthesized-invalid-3
====================

// Error: 23-24 unclosed delimiter
#import "module.typ": (
  a, b,
  c,



--------------------



====================
typst/import/import-from-function-scope
====================

// Test importing from function scopes.

#import enum: item
#import assert.with(true): *

#enum(
   item(1)[First],
   item(5)[Fifth]
)
#eq(10, 10)
#ne(5, 6)


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (import
      (ident)
      (binding
        (ident))))
  (code
    (import
      (call
        (field
          (ident)
          (ident))
        (group
          (bool)))
      (wildcard)))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (number)))
          (content
            (text)))
        (call
          (call
            (ident)
            (group
              (number)))
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/import/import-from-function-scope-item-renamed
====================

// Test renaming items imported from function scopes.
#import assert: eq as aseq
#aseq(10, 10)


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/import/import-from-function-scope-nested-import
====================

// Test importing items from function scopes via nested import.
#import std: grid.cell, table.cell as tcell
#test(cell, grid.cell)
#test(tcell, table.cell)


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident)
        (ident))
      (binding
        (ident)
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (field
          (ident)
          (ident)))))
  (parbreak))

====================
typst/import/import-from-type-scope
====================

// Test importing from a type's scope.
#import array: zip
#test(zip((1, 2), (3, 4)), ((1, 3), (2, 4)))


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number))
            (group
              (number)
              (number))))
        (group
          (group
            (number)
            (number))
          (group
            (number)
            (number))))))
  (parbreak))

====================
typst/import/import-from-type-scope-item-renamed
====================

// Test importing from a type's scope with renaming.
#import array: pop as renamed-pop
#test(renamed-pop((1, 2)), 2)


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number))))
        (number))))
  (parbreak))

====================
typst/import/import-from-type-scope-nested-import
====================

// Test importing from a type's scope with nested import.
#import std: array.zip, array.pop as renamed-pop
#test(zip((1, 2), (3, 4)), ((1, 3), (2, 4)))
#test(renamed-pop((1, 2)), 2)


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident)
        (ident))
      (binding
        (ident)
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number))
            (group
              (number)
              (number))))
        (group
          (group
            (number)
            (number))
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number))))
        (number))))
  (parbreak))

====================
typst/import/import-from-file-bare
====================

// A module import without items.
#import "module.typ"
#test(module.b, 1)
#test(module.item(1, 2), 3)
#test(module.push(2), 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-from-file-renamed
====================

// A renamed module import without items.
#import "module.typ" as other
#test(other.b, 1)
#test(other.item(1, 2), 3)
#test(other.push(2), 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-from-file-items-renamed-mixed
====================

// Mixing renamed module and items.
#import "module.typ" as newname: b as newval, item
#test(newname.b, 1)
#test(newval, 1)
#test(item(1, 2), 3)
#test(newname.item(1, 2), 3)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))
      (binding
        (ident)
        (as
          (ident)))
      (binding
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-from-function-scope-renamed
====================

// Renamed module import with function scopes.
#import enum as othernum
#test(enum, othernum)


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (as
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (parbreak))

====================
typst/import/import-from-function-scope-renamed-twice
====================

// Mixing renamed module import from function with renamed item import.
#import assert as asrt
#import asrt: ne as asne
#asne(1, 2)


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (as
        (ident))))
  (code
    (import
      (ident)
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/import/import-module-item-name-mutating
====================

// Edge case for module access that isn't fixed.
#import "module.typ"

// Works because the method name isn't categorized as mutating.
#test((module,).at(0).item(1, 2), 3)

// Doesn't work because of mutating name.
// Error: 2-11 cannot mutate a temporary value
#(module,).at(0).push()


--------------------

(source_file
  (comment)
  (code
    (import
      (string)))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (group
                  (ident))
                (ident))
              (group
                (number)))
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (field
        (call
          (field
            (group
              (ident))
            (ident))
          (group
            (number)))
        (ident))
      (group)))
  (parbreak))

====================
typst/import/import-no-whitespace
====================

// Who needs whitespace anyways?
#import"module.typ":*


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-trailing-comma
====================

// Allow the trailing comma.
#import "module.typ": a, c,


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-source-field-access
====================

// Usual importing syntax also works for function scopes
#let d = (e: enum)
#import d.e
#import d.e as renamed
#import d.e: item
#item(2)[a]


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (ident)))))
  (code
    (import
      (field
        (ident)
        (ident))))
  (code
    (import
      (field
        (ident)
        (ident))
      (as
        (ident))))
  (code
    (import
      (field
        (ident)
        (ident))
      (binding
        (ident))))
  (code
    (call
      (call
        (ident)
        (group
          (number)))
      (content
        (text))))
  (parbreak))

====================
typst/import/import-item-rename-unnecessary
====================

// Warning: 23-27 unnecessary import rename to same name
#import enum: item as item


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident)
        (as
          (ident)))))
  (parbreak))

====================
typst/import/import-rename-unnecessary
====================

// Warning: 17-21 unnecessary import rename to same name
#import enum as enum


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (as
        (ident))))
  (parbreak))

====================
typst/import/import-rename-unnecessary-mixed
====================

// Warning: 17-21 unnecessary import rename to same name
#import enum as enum: item

// Warning: 17-21 unnecessary import rename to same name
// Warning: 31-35 unnecessary import rename to same name
#import enum as enum: item as item


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (as
        (ident))
      (binding
        (ident))))
  (parbreak)
  (comment)
  (comment)
  (code
    (import
      (ident)
      (as
        (ident))
      (binding
        (ident)
        (as
          (ident)))))
  (parbreak))

====================
typst/import/import-item-rename-unnecessary-but-ok
====================

// No warning on a case that isn't obviously pathological
#import "module.typ" as module


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))))
  (parbreak))

====================
typst/import/import-from-closure-invalid
====================

// Can't import from closures.
#let f(x) = x
// Error: 9-10 cannot import from user-defined functions
#import f: x


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-from-closure-renamed-invalid
====================

// Can't import from closures, despite renaming.
#let f(x) = x
// Error: 9-10 cannot import from user-defined functions
#import f as g


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (comment)
  (code
    (import
      (ident)
      (as
        (ident))))
  (parbreak))

====================
typst/import/import-from-with-closure-invalid
====================

// Can't import from closures, despite modifiers.
#let f(x) = x
// Error: 9-18 cannot import from user-defined functions
#import f.with(5): x


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (comment)
  (code
    (import
      (call
        (field
          (ident)
          (ident))
        (group
          (number)))
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-from-with-closure-literal-invalid
====================

// Error: 9-18 cannot import from user-defined functions
#import () => {5}: x


--------------------

(source_file
  (comment)
  (code
    (import
      (lambda
        (group)
        (block
          (number)))
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-from-int-invalid
====================

// Error: 9-10 expected path, module, function, or type, found integer
#import 5: something


--------------------

(source_file
  (comment)
  (code
    (import
      (number)
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-from-int-renamed-invalid
====================

// Error: 9-10 expected path, module, function, or type, found integer
#import 5 as x


--------------------

(source_file
  (comment)
  (code
    (import
      (number)
      (as
        (ident))))
  (parbreak))

====================
typst/import/import-from-string-invalid
====================

// Error: 9-11 failed to load file (is a directory)
#import "": name


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-from-string-renamed-invalid
====================

// Error: 9-11 failed to load file (is a directory)
#import "" as x


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))))
  (parbreak))

====================
typst/import/import-file-not-found-invalid
====================

// Error: 9-20 file not found (searched at tests/suite/scripting/lib/0.2.1)
#import "lib/0.2.1"


--------------------

(source_file
  (comment)
  (code
    (import
      (string)))
  (parbreak))

====================
typst/import/import-file-not-found-renamed-invalid
====================

// Error: 9-20 file not found (searched at tests/suite/scripting/lib/0.2.1)
#import "lib/0.2.1" as x


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))))
  (parbreak))

====================
typst/import/import-file-not-valid-utf-8
====================

// Some non-text stuff.
// Error: 9-35 file is not valid utf-8
#import "/assets/images/rhino.png"


--------------------

(source_file
  (comment)
  (comment)
  (code
    (import
      (string)))
  (parbreak))

====================
typst/import/import-item-not-found
====================

// Unresolved import.
// Error: 23-35 unresolved import
#import "module.typ": non_existing


--------------------

(source_file
  (comment)
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-cyclic
====================

// Cyclic import of this very file.
// Error: 9-23 cyclic import
#import "./import.typ"


--------------------

(source_file
  (comment)
  (comment)
  (code
    (import
      (string)))
  (parbreak))

====================
typst/import/import-cyclic-in-other-file
====================

// Cyclic import in other file.
#import "./modules/cycle1.typ": *

This is never reached.


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak)
  (text)
  (parbreak))

====================
typst/import/import-renamed-old-name
====================

// Renaming does not import the old name (without items).
#import "./modules/chap1.typ" as something
#test(something.name, "Klaus")
// Error: 7-12 unknown variable: chap1
#test(chap1.name, "Klaus")


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/import/import-items-renamed-old-name
====================

// Renaming does not import the old name (with items).
#import "./modules/chap1.typ" as something: name as other
#test(other, "Klaus")
#test(something.name, "Klaus")
// Error: 7-12 unknown variable: chap1
#test(chap1.b, "Klaus")


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (as
        (ident))
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/import/import-nested-invalid-type
====================

// Error: 19-21 expected module, function, or type, found float
#import std: calc.pi.something


--------------------

(source_file
  (comment)
  (code
    (import
      (ident)
      (binding
        (ident)
        (ident)
        (ident))))
  (parbreak))

====================
typst/import/import-incomplete
====================

// Error: 8 expected expression
#import


--------------------



====================
typst/import/import-item-string-invalid
====================

// Error: 26-29 unexpected string
#import "module.typ": a, "b", c


--------------------



====================
typst/import/import-bad-token
====================

// Error: 23-24 unexpected equals sign
#import "module.typ": =


--------------------



====================
typst/import/import-duplicate-comma
====================

// An additional trailing comma.
// Error: 31-32 unexpected comma
#import "module.typ": a, b, c,,


--------------------



====================
typst/import/import-no-colon
====================

// Error: 2:2 expected semicolon or line break
#import "module.typ
"stuff


--------------------



====================
typst/import/import-bad-token-star
====================

// A star in the list.
// Error: 26-27 unexpected star
#import "module.typ": a, *, b


--------------------



====================
typst/import/import-item-after-star
====================

// An item after a star.
// Error: 24 expected semicolon or line break
#import "module.typ": *, a


--------------------



====================
typst/import/import-bad-colon-in-items
====================

// Error: 14-15 unexpected colon
// Error: 16-17 unexpected integer
#import "": a: 1


--------------------



====================
typst/import/import-incomplete-nested
====================

// Error: 15 expected identifier
#import "": a.


--------------------



====================
typst/import/import-wildcard-in-nested
====================

// Error: 15 expected identifier
// Error: 15-16 unexpected star
#import "": a.*


--------------------



====================
typst/import/import-missing-comma
====================

// Error: 14 expected comma
#import "": a b


--------------------



====================
typst/import/import-from-package-bare
====================

// Test import without items.
#import "@test/adder:0.1.0"
#test(adder.add(2, 8), 10)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-from-package-items
====================

// Test import with items.
#import "@test/adder:0.1.0": add
#test(add(2, 8), 10)


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/import/import-from-package-required-compiler-version
====================

// Test too high required compiler version.
// Error: 9-29 package requires typst 1.0.0 or newer (current version is VERSION)
#import "@test/future:0.1.0": future


--------------------

(source_file
  (comment)
  (comment)
  (code
    (import
      (string)
      (binding
        (ident))))
  (parbreak))

====================
typst/import/import-from-package-namespace-invalid-1
====================

// Error: 9-13 `@` is not a valid package namespace
#import "@@": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-name-missing-1
====================

// Error: 9-16 package specification is missing name
#import "@heya": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-namespace-invalid-2
====================

// Error: 9-15 `123` is not a valid package namespace
#import "@123": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-name-missing-2
====================

// Error: 9-17 package specification is missing name
#import "@test/": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-missing-1
====================

// Error: 9-22 package specification is missing version
#import "@test/mypkg": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-name-invalid
====================

// Error: 9-20 `$$$` is not a valid package name
#import "@test/$$$": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-missing-2
====================

// Error: 9-23 package specification is missing version
#import "@test/mypkg:": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-missing-minor
====================

// Error: 9-24 version number is missing minor version
#import "@test/mypkg:0": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-major-invalid-1
====================

// Error: 9-29 `latest` is not a valid major version
#import "@test/mypkg:latest": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-major-invalid-2
====================

// Error: 9-29 `-3` is not a valid major version
#import "@test/mypkg:-3.0.0": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-missing-patch-1
====================

// Error: 9-26 version number is missing patch version
#import "@test/mypkg:0.3": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-package-version-missing-patch-2
====================

// Error: 9-27 version number is missing patch version
#import "@test/mypkg:0.3.": *


--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard)))
  (parbreak))

====================
typst/import/import-from-file-package-lookalike
====================

// Error: 9-28 file not found (searched at tests/suite/scripting/#test/mypkg:1.0.0)
#import "#test/mypkg:1.0.0": *
--------------------

(source_file
  (comment)
  (code
    (import
      (string)
      (wildcard))))

====================
typst/alignment/math-align-weird
====================

// Test alignment step functions.
#set page(width: 225pt)
$
"a" &= c \
&= c + 1 & "By definition" \
&= d + 100 + 1000 \
&= x && "Even longer" \
$


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (string)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (letter)
      (symbol)
      (number)
      (align)
      (string)
      (linebreak)
      (align)
      (symbol)
      (letter)
      (symbol)
      (number)
      (symbol)
      (number)
      (linebreak)
      (align)
      (symbol)
      (letter)
      (align)
      (align)
      (string)
      (linebreak)))
  (parbreak))

====================
typst/alignment/math-align-post-fix
====================

// Test post-fix alignment.
$
& "right" \
"a very long line" \
"left" \
$


--------------------

(source_file
  (comment)
  (math
    (formula
      (align)
      (string)
      (linebreak)
      (string)
      (linebreak)
      (string)
      (linebreak)))
  (parbreak))

====================
typst/alignment/math-align-implicit
====================

// Test no alignment.
$
"right" \
"a very long line" \
"left" \
$


--------------------

(source_file
  (comment)
  (math
    (formula
      (string)
      (linebreak)
      (string)
      (linebreak)
      (string)
      (linebreak)))
  (parbreak))

====================
typst/alignment/math-align-toggle
====================

// Test #460 equations.
$
a &=b & quad c&=d \
e &=f & g&=h
$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (letter)
      (align)
      (ident)
      (letter)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (align)
      (letter)
      (align)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/alignment/issue-3973-math-equation-align
====================

// In this bug, the alignment set with "show math.equation: set align(...)"
// overrides the left-right alternating behavior of alignment points.
#let equations = [
$ a + b &= c \
      e &= f + g + h $
$         a &= b + c \
  e + f + g &= h $
]
#equations

#show math.equation: set align(start)
#equations

#show math.equation: set align(end)
#equations
--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (content
        (math
          (formula
            (letter)
            (symbol)
            (letter)
            (align)
            (symbol)
            (letter)
            (linebreak)
            (letter)
            (align)
            (symbol)
            (letter)
            (symbol)
            (letter)
            (symbol)
            (letter)))
        (math
          (formula
            (letter)
            (align)
            (symbol)
            (letter)
            (symbol)
            (letter)
            (linebreak)
            (letter)
            (symbol)
            (letter)
            (symbol)
            (letter)
            (align)
            (symbol)
            (letter))))))
  (code
    (ident))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (ident))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (ident)))

====================
typst/spacing/math-spacing-basic
====================

// Test spacing cases.
$ä, +, c, (, )$ \
$=), (+), {times}$ \
$⟧<⟦, abs(-), [=$ \
$a=b, a==b$ \
$-a, +a$ \
$a not b$ \
$a+b, a*b$ \
$sum x, sum(x)$ \
$sum product x$ \
$f(x), zeta(x), "frac"(x)$ \
$a+dots.c+b$
$f(x) sin(y)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (symbol)
      (symbol)
      (letter)
      (symbol)
      (group
        (formula
          (symbol)))))
  (linebreak)
  (math
    (formula
      (symbol)
      (symbol)
      (symbol)
      (group
        (formula
          (symbol)))
      (symbol)
      (group
        (formula
          (ident)))))
  (linebreak)
  (math
    (formula
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (call
        (ident)
        (formula
          (symbol)))
      (symbol)
      (group
        (formula
          (symbol)))))
  (linebreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)
      (symbol)
      (symbol)
      (letter)))
  (linebreak)
  (math
    (formula
      (symbol)
      (letter)
      (symbol)
      (symbol)
      (letter)))
  (linebreak)
  (math
    (formula
      (letter)
      (ident)
      (letter)))
  (linebreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (linebreak)
  (math
    (formula
      (ident)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)))))
  (linebreak)
  (math
    (formula
      (ident)
      (ident)
      (letter)))
  (linebreak)
  (math
    (formula
      (apply
        (letter)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (apply
        (string)
        (formula
          (letter)))))
  (linebreak)
  (math
    (formula
      (letter)
      (symbol)
      (field
        (ident)
        (ident))
      (symbol)
      (letter)))
  (math
    (formula
      (apply
        (letter)
        (formula
          (letter)))
      (call
        (ident)
        (formula
          (letter)))))
  (parbreak))

====================
typst/spacing/math-spacing-kept-spaces
====================

// Test ignored vs non-ignored spaces.
$f (x), f(x)$ \
$[a|b], [a | b]$ \
$a"is"b, a "is" b$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (group
        (formula
          (letter)))
      (symbol)
      (apply
        (letter)
        (formula
          (letter)))))
  (linebreak)
  (math
    (formula
      (group
        (formula
          (letter)
          (symbol)
          (letter)))
      (symbol)
      (group
        (formula
          (letter)
          (symbol)
          (letter)))))
  (linebreak)
  (math
    (formula
      (letter)
      (string)
      (letter)
      (symbol)
      (letter)
      (string)
      (letter)))
  (parbreak))

====================
typst/spacing/math-spacing-predefined
====================

// Test predefined spacings.
$a thin b, a med b, a thick b, a quad b$ \
$a = thin b$ \
$a - b equiv c quad (mod 2)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (ident)
      (letter)
      (symbol)
      (letter)
      (ident)
      (letter)
      (symbol)
      (letter)
      (ident)
      (letter)
      (symbol)
      (letter)
      (ident)
      (letter)))
  (linebreak)
  (math
    (formula
      (letter)
      (symbol)
      (ident)
      (letter)))
  (linebreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (ident)
      (letter)
      (ident)
      (group
        (formula
          (ident)
          (number)))))
  (parbreak))

====================
typst/spacing/math-spacing-set-comprehension
====================

// Test spacing for set comprehension.
#set page(width: auto)
$ { x in RR | x "is natural" and x < 10 } $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (math
    (formula
      (group
        (formula
          (letter)
          (ident)
          (ident)
          (symbol)
          (letter)
          (string)
          (ident)
          (letter)
          (symbol)
          (number)))))
  (parbreak))

====================
typst/spacing/math-spacing-decorated
====================

// Test spacing for operators with decorations and modifiers on them
#set page(width: auto)
$a equiv b + c - d => e log 5 op("ln") 6$ \
$a cancel(equiv) b overline(+) c arrow(-) d hat(=>) e cancel(log) 5 dot(op("ln")) 6$ \
$a overbrace(equiv) b underline(+) c grave(-) d underbracket(=>) e circle(log) 5 caron(op("ln")) 6$ \
\
$a attach(equiv, tl: a, tr: b) b attach(limits(+), t: a, b: b) c tilde(-) d breve(=>) e attach(limits(log), t: a, b: b) 5 attach(op("ln"), tr: a, bl: b) 6$


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (math
    (formula
      (letter)
      (ident)
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)
      (shorthand)
      (letter)
      (ident)
      (number)
      (call
        (ident)
        (formula
          (string)))
      (number)))
  (linebreak)
  (math
    (formula
      (letter)
      (call
        (ident)
        (formula
          (ident)))
      (letter)
      (call
        (ident)
        (formula
          (symbol)))
      (letter)
      (call
        (ident)
        (formula
          (symbol)))
      (letter)
      (call
        (ident)
        (formula
          (shorthand)))
      (letter)
      (call
        (ident)
        (formula
          (ident)))
      (number)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (string)))))
      (number)))
  (linebreak)
  (math
    (formula
      (letter)
      (call
        (ident)
        (formula
          (ident)))
      (letter)
      (call
        (ident)
        (formula
          (symbol)))
      (letter)
      (call
        (ident)
        (formula
          (symbol)))
      (letter)
      (call
        (ident)
        (formula
          (shorthand)))
      (letter)
      (call
        (ident)
        (formula
          (ident)))
      (number)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (string)))))
      (number)))
  (linebreak)
  (linebreak)
  (math
    (formula
      (letter)
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (letter)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (symbol))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (letter)
      (call
        (ident)
        (formula
          (symbol)))
      (letter)
      (call
        (ident)
        (formula
          (shorthand)))
      (letter)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (number)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (string))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (number)))
  (parbreak))

====================
typst/spacing/math-spacing-weak
====================

// Test weak spacing
$integral f(x) dif x$,
// Not weak
$integral f(x) thin dif x$,
// Both are weak, collide
$integral f(x) #h(0.166em, weak: true)dif x$


--------------------

(source_file
  (comment)
  (math
    (formula
      (ident)
      (apply
        (letter)
        (formula
          (letter)))
      (ident)
      (letter)))
  (text)
  (comment)
  (math
    (formula
      (ident)
      (apply
        (letter)
        (formula
          (letter)))
      (ident)
      (ident)
      (letter)))
  (text)
  (comment)
  (math
    (formula
      (ident)
      (apply
        (letter)
        (formula
          (letter)))
      (code
        (call
          (ident)
          (group
            (number
              (unit))
            (tagged
              (ident)
              (bool)))))
      (ident)
      (letter)))
  (parbreak))

====================
typst/spacing/math-spacing-script
====================

// Test spacing in script size
$x^(a #h(1em) b) + x^x^(a #h(1em) b) + sscript(a #h(1em) b)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (letter)
        (group
          (formula
            (letter)
            (code
              (call
                (ident)
                (group
                  (number
                    (unit)))))
            (letter))))
      (symbol)
      (attach
        (letter)
        (attach
          (letter)
          (group
            (formula
              (letter)
              (code
                (call
                  (ident)
                  (group
                    (number
                      (unit)))))
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (code
            (call
              (ident)
              (group
                (number
                  (unit)))))
          (letter)))))
  (parbreak))

====================
typst/spacing/math-spacing-ignorant
====================

// Test spacing with ignorant elements
$#metadata(none) "text"$ \
$#place(dx: 5em)[Placed] "text"$ \
// Operator spacing
$#counter("test").update(3) + b$ \
$#place(dx: 5em)[a] + b$
// Validate that ignorant elements are layouted
#context test(counter("test").get(), (3,))


--------------------

(source_file
  (comment)
  (math
    (formula
      (code
        (call
          (ident)
          (group
            (none))))
      (string)))
  (linebreak)
  (math
    (formula
      (code
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))
      (string)))
  (linebreak)
  (comment)
  (math
    (formula
      (code
        (call
          (field
            (call
              (ident)
              (group
                (string)))
            (ident))
          (group
            (number))))
      (symbol)
      (letter)))
  (linebreak)
  (math
    (formula
      (code
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))
      (symbol)
      (letter)))
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (call
                (ident)
                (group
                  (string)))
              (ident))
            (group))
          (group
            (number))))))
  (parbreak))

====================
typst/spacing/issue-1052-math-number-spacing
====================

// Test spacing after numbers in math.
$
10degree \
10 degree \
10.1degree \
10.1 degree
$
--------------------

(source_file
  (comment)
  (math
    (formula
      (number)
      (ident)
      (linebreak)
      (number)
      (ident)
      (linebreak)
      (number)
      (ident)
      (linebreak)
      (number)
      (ident))))

====================
typst/equation/math-equation-numbering
====================

#set page(width: 150pt)
#set math.equation(numbering: "(I)")

We define $x$ in preparation of @fib:
$ phi.alt := (1 + sqrt(5)) / 2 $ <ratio>

With @ratio, we get
$ F_n = round(1 / sqrt(5) phi.alt^n) $ <fib>


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (math
    (formula
      (letter)))
  (text)
  (ref)
  (text)
  (math
    (formula
      (field
        (ident)
        (ident))
      (shorthand)
      (fraction
        (group
          (formula
            (number)
            (symbol)
            (call
              (ident)
              (formula
                (number)))))
        (number))))
  (label)
  (parbreak)
  (text)
  (ref)
  (text)
  (math
    (formula
      (attach
        (letter)
        (letter))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (number)
            (call
              (ident)
              (formula
                (number))))
          (attach
            (field
              (ident)
              (ident))
            (letter))))))
  (label)
  (parbreak))

====================
typst/equation/math-equation-font
====================

// Test different font.
#show math.equation: set text(font: "Fira Math")
$ v := vec(1 + 2, 2 - 4, sqrt(3), arrow(x)) + 1 $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (math
    (formula
      (letter)
      (shorthand)
      (call
        (ident)
        (formula
          (number)
          (symbol)
          (number))
        (formula
          (number)
          (symbol)
          (number))
        (formula
          (call
            (ident)
            (formula
              (number))))
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (number)))
  (parbreak))

====================
typst/equation/math-equation-show-rule
====================

This is small: $sum_(i=0)^n$

#show math.equation: math.display
This is big: $sum_(i=0)^n$


--------------------

(source_file
  (text)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (letter))))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (field
        (ident)
        (ident))))
  (text)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (letter))))
  (parbreak))

====================
typst/equation/math-equation-align-unnumbered
====================

// Test unnumbered
#let eq(alignment) = {
  show math.equation: set align(alignment)
  $ a + b = c $
}

#eq(center)
#eq(left)
#eq(right)

#set text(dir: rtl)
#eq(start)
#eq(end)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (show
          (field
            (ident)
            (ident))
          (set
            (call
              (ident)
              (group
                (ident)))))
        (math
          (formula
            (letter)
            (symbol)
            (letter)
            (symbol)
            (letter))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak))

====================
typst/equation/math-equation-align-numbered
====================

// Test numbered
#let eq(alignment) = {
  show math.equation: set align(alignment)
  $ a + b = c $
}

#set math.equation(numbering: "(1)")

#eq(center)
#eq(left)
#eq(right)

#set text(dir: rtl)
#eq(start)
#eq(end)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (show
          (field
            (ident)
            (ident))
          (set
            (call
              (ident)
              (group
                (ident)))))
        (math
          (formula
            (letter)
            (symbol)
            (letter)
            (symbol)
            (letter))))))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak))

====================
typst/equation/math-equation-number-align
====================

#set math.equation(numbering: "(1)")

$ a + b = c $

#show math.equation: set align(center)
$ a + b = c $
#show math.equation: set align(left)
$ a + b = c $
#show math.equation: set align(right)
$ a + b = c $

#set text(dir: rtl)
#show math.equation: set align(start)
$ a + b = c $
#show math.equation: set align(end)
$ a + b = c $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-start
====================

#set math.equation(numbering: "(1)", number-align: start)

$ a + b = c $

#show math.equation: set align(center)
$ a + b = c $
#show math.equation: set align(left)
$ a + b = c $
#show math.equation: set align(right)
$ a + b = c $

#set text(dir: rtl)
#show math.equation: set align(start)
$ a + b = c $
#show math.equation: set align(end)
$ a + b = c $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-end
====================

#set math.equation(numbering: "(1)", number-align: end)

$ a + b = c $

#show math.equation: set align(center)
$ a + b = c $
#show math.equation: set align(left)
$ a + b = c $
#show math.equation: set align(right)
$ a + b = c $

#set text(dir: rtl)
#show math.equation: set align(start)
$ a + b = c $
#show math.equation: set align(end)
$ a + b = c $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-left
====================

#set math.equation(numbering: "(1)", number-align: left)

$ a + b = c $

#show math.equation: set align(center)
$ a + b = c $
#show math.equation: set align(left)
$ a + b = c $
#show math.equation: set align(right)
$ a + b = c $

#set text(dir: rtl)
#show math.equation: set align(start)
$ a + b = c $
#show math.equation: set align(end)
$ a + b = c $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-right
====================

#set math.equation(numbering: "(1)", number-align: right)

$ a + b = c $

#show math.equation: set align(center)
$ a + b = c $
#show math.equation: set align(left)
$ a + b = c $
#show math.equation: set align(right)
$ a + b = c $

#set text(dir: rtl)
#show math.equation: set align(start)
$ a + b = c $
#show math.equation: set align(end)
$ a + b = c $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-center
====================

// Error: 52-58 expected `start`, `left`, `right`, or `end`, found center
#set math.equation(numbering: "(1)", number-align: center)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/equation/math-equation-number-align-center-bottom
====================

// Error: 52-67 expected `start`, `left`, `right`, or `end`, found center
#set math.equation(numbering: "(1)", number-align: center + bottom)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/equation/math-equation-number-align-monoline
====================

#set math.equation(numbering: "(1)")
$ p = sum_k k ln a $

#set math.equation(numbering: "(1)", number-align: top)
$ p = sum_k k ln a $

#set math.equation(numbering: "(1)", number-align: bottom)
$ p = sum_k k ln a $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (math
    (formula
      (letter)
      (symbol)
      (attach
        (ident)
        (letter))
      (letter)
      (ident)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (attach
        (ident)
        (letter))
      (letter)
      (ident)
      (letter)))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (math
    (formula
      (letter)
      (symbol)
      (attach
        (ident)
        (letter))
      (letter)
      (ident)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-multiline
====================

#set math.equation(numbering: "(1)")

$ p &= ln a b \
    &= ln a + ln b $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (ident)
      (letter)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (ident)
      (letter)
      (symbol)
      (ident)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-multiline-top-start
====================

#set math.equation(numbering: "(1)", number-align: top+start)

$ p &= ln a b \
    &= ln a + ln b $
$ q &= sum_k k ln a \
    &= sum_k ln A $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))))
  (parbreak)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (ident)
      (letter)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (ident)
      (letter)
      (symbol)
      (ident)
      (letter)))
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (attach
        (ident)
        (letter))
      (letter)
      (ident)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (attach
        (ident)
        (letter))
      (ident)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-multiline-bottom
====================

#show math.equation: set align(left)
#set math.equation(numbering: "(1)", number-align: bottom)

$ p &= ln a b \
    &= ln a + ln b $
$ q &= sum_k ln A \
    &= sum_k k ln a $


--------------------

(source_file
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (ident)
      (letter)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (ident)
      (letter)
      (symbol)
      (ident)
      (letter)))
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (attach
        (ident)
        (letter))
      (ident)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (attach
        (ident)
        (letter))
      (letter)
      (ident)
      (letter)))
  (parbreak))

====================
typst/equation/math-equation-number-align-multiline-expand
====================

// Tests that if the numbering's layout box vertically exceeds the box of
// the equation frame's boundary, the latter's frame is resized correctly
// to encompass the numbering. #box() below delineates the resized frame.
//
// A row with "-" only has a height that's smaller than the height of the
// numbering's layout box. Note we use pattern "1" here, not "(1)", since
// the parenthesis exceeds the numbering's layout box, due to the default
// settings of top-edge and bottom-edge of the TextElem that laid it out.
#let equations = [
  #box($ - - - $, fill: silver)
  #box(
  $ - - - \
    a = b $,
  fill: silver)
  #box(
  $ a = b \
    - - - $,
  fill: silver)
]

#set math.equation(numbering: "1", number-align: top)
#equations

#set math.equation(numbering: "1", number-align: horizon)
#equations

#set math.equation(numbering: "1", number-align: bottom)
#equations


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (content
        (code
          (call
            (ident)
            (group
              (math
                (formula
                  (symbol)
                  (symbol)
                  (symbol)))
              (tagged
                (ident)
                (ident)))))
        (code
          (call
            (ident)
            (group
              (math
                (formula
                  (symbol)
                  (symbol)
                  (symbol)
                  (linebreak)
                  (letter)
                  (symbol)
                  (letter)))
              (tagged
                (ident)
                (ident)))))
        (code
          (call
            (ident)
            (group
              (math
                (formula
                  (letter)
                  (symbol)
                  (letter)
                  (linebreak)
                  (symbol)
                  (symbol)
                  (symbol)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (code
    (ident))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (code
    (ident))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (code
    (ident))
  (parbreak))

====================
typst/equation/math-equation-number-align-multiline-no-expand
====================

// Tests that if the numbering's layout box doesn't vertically exceed the
// box of the equation frame's boundary, the latter's frame size remains.
// So, in the grid below, frames in each row should have the same height.
#set math.equation(numbering: "1")
#grid(
  columns: 4 * (1fr,),
  column-gutter: 3 * (2pt,),
  row-gutter: 2pt,
  align: horizon,
  [
    #set math.equation(number-align: horizon)
    #box($ - - \ a \ sum $, fill: silver)
  ],
  [
    #set math.equation(number-align: bottom)
    #box($ - - \ a \ sum $, fill: silver)
  ],
  [
    #set math.equation(number-align: horizon)
    #box($ sum \ a \ - - $, fill: silver)
  ],
  [
    #set math.equation(number-align: top)
    #box($ sum \ a \ - - $, fill: silver)
  ],

  [
    #set math.equation(number-align: horizon)
    #box($ - - $, fill: silver)
  ],
  [
    #set math.equation(number-align: top)
    #box($ - - $, fill: silver)
  ],
  [
    #set math.equation(number-align: bottom)
    #box($ - - $, fill: silver)
  ],
)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (symbol)
                    (symbol)
                    (linebreak)
                    (letter)
                    (linebreak)
                    (ident)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (symbol)
                    (symbol)
                    (linebreak)
                    (letter)
                    (linebreak)
                    (ident)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (ident)
                    (linebreak)
                    (letter)
                    (linebreak)
                    (symbol)
                    (symbol)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (ident)
                    (linebreak)
                    (letter)
                    (linebreak)
                    (symbol)
                    (symbol)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (symbol)
                    (symbol)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (symbol)
                    (symbol)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (code
            (set
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (symbol)
                    (symbol)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/equation/math-equation-number-empty
====================

// Test numbering on empty equations.
#math.equation(numbering: "1", block: true, [])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (bool))
        (content))))
  (parbreak))

====================
typst/equation/math-equation-tag-affects-row-height
====================

// Tags should not affect the row height of equations.
#box($ - - $, fill: silver)
#box($ #metadata(none) - - $, fill: silver) \
#box($ a \ - - $, fill: silver)
#box($ a \ #metadata(none) - - $, fill: silver)
#box($ - - \ a $, fill: silver)
#box($ #metadata(none) - - \ a $, fill: silver)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (code
              (call
                (ident)
                (group
                  (none))))
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (letter)
            (linebreak)
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (letter)
            (linebreak)
            (code
              (call
                (ident)
                (group
                  (none))))
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (symbol)
            (symbol)
            (linebreak)
            (letter)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (code
              (call
                (ident)
                (group
                  (none))))
            (symbol)
            (symbol)
            (linebreak)
            (letter)))
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/equation/issue-4187-alignment-point-affects-row-height
====================

// In this bug, a row of "-" only should have a very small height; but
// after adding an alignment point "&", the row gains a larger height.
// We need to test alignment point "&" does not affect a row's height.
#box($ - - $, fill: silver)
#box($ - - $, fill: silver) \
#box($ a \ - - $, fill: silver)
#box($ &- - \ &a $, fill: silver)
#box($ &a \ &- - $, fill: silver)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (letter)
            (linebreak)
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (align)
            (symbol)
            (symbol)
            (linebreak)
            (align)
            (letter)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (align)
            (letter)
            (linebreak)
            (align)
            (symbol)
            (symbol)))
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/equation/issue-numbering-hint
====================

// In this bug, the hint and error messages for an equation
// being reference mentioned that it was a "heading" and was
// lacking the proper path.
#set page(height: 70pt)

$
    Delta = b^2 - 4 a c
$ <quadratic>

// Error: 14-24 cannot reference equation without numbering
// Hint: 14-24 you can enable equation numbering with `#set math.equation(numbering: "1.")`
Looks at the @quadratic formula.


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (math
    (formula
      (ident)
      (symbol)
      (attach
        (letter)
        (number))
      (symbol)
      (number)
      (letter)
      (letter)))
  (label)
  (parbreak)
  (comment)
  (comment)
  (text)
  (ref)
  (text)
  (parbreak))

====================
typst/equation/issue-3696-equation-rtl
====================

#set page(width: 150pt)
#set text(lang: "he")
תהא סדרה $a_n$: $[a_n: 1, 1/2, 1/3, dots]$
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (math
    (formula
      (attach
        (letter)
        (letter))))
  (text)
  (math
    (formula
      (group
        (formula
          (attach
            (letter)
            (letter))
          (symbol)
          (number)
          (symbol)
          (fraction
            (number)
            (number))
          (symbol)
          (fraction
            (number)
            (number))
          (symbol)
          (ident))))))

====================
typst/class/math-class-chars
====================

// Test characters.
$ a class("normal", +) b \
  a class("binary", .) b \
  lr(class("opening", \/) a/b class("closing", \\)) \
  { x class("fence", \;) x > 0} \
  a class("large", \/) b \
  a class("punctuation", :) b \
  a class("relation", !) b \
  a + class("unary", times) b \
  class("vary", :) a class("vary", :) b $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (symbol)))
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (symbol)))
      (letter)
      (linebreak)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (string))
            (formula
              (escape)))
          (fraction
            (letter)
            (letter))
          (call
            (ident)
            (formula
              (string))
            (formula
              (escape)))))
      (linebreak)
      (group
        (formula
          (letter)
          (call
            (ident)
            (formula
              (string))
            (formula
              (escape)))
          (letter)
          (symbol)
          (number)))
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (escape)))
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (symbol)))
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (symbol)))
      (letter)
      (linebreak)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (string))
        (formula
          (ident)))
      (letter)
      (linebreak)
      (call
        (ident)
        (formula
          (string))
        (formula
          (symbol)))
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (symbol)))
      (letter)))
  (parbreak))

====================
typst/class/math-class-content
====================

// Test custom content.
#let dotsq = square(
  size: 0.7em,
  stroke: 0.5pt,
  align(center+horizon, circle(radius: 0.15em, fill: black))
)

$ a dotsq b \
  a class("normal", dotsq) b \
  a class("vary", dotsq) b \
  a + class("vary", dotsq) b \
  a class("punctuation", dotsq) b $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (call
            (ident)
            (group
              (add
                (ident)
                (ident))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))))))))
  (parbreak)
  (math
    (formula
      (letter)
      (ident)
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (ident)))
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (ident)))
      (letter)
      (linebreak)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (string))
        (formula
          (ident)))
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (string))
        (formula
          (ident)))
      (letter)))
  (parbreak))

====================
typst/class/math-class-nested
====================

// Test nested.
#let normal = math.class.with("normal")
#let pluseq = $class("binary", normal(+) normal(=))$
$ a pluseq 5 $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (string)))))
  (code
    (let
      (ident)
      (math
        (formula
          (call
            (ident)
            (formula
              (string))
            (formula
              (call
                (ident)
                (formula
                  (symbol)))
              (call
                (ident)
                (formula
                  (symbol)))))))))
  (math
    (formula
      (letter)
      (ident)
      (number)))
  (parbreak))

====================
typst/class/math-class-exceptions
====================

// Test exceptions.
$ sqrt(3)\/2 quad d_0.d_1d_2 dots $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (number)))
      (escape)
      (number)
      (ident)
      (attach
        (letter)
        (number))
      (symbol)
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (ident)))
  (parbreak))

====================
typst/class/math-class-limits
====================

// Test if the math class changes the limit configuration.
$ class("normal", ->)_a $
$class("relation", x)_a$
$ class("large", x)_a $
$class("large", ->)_a$

$limits(class("normal", ->))_a$
$ scripts(class("relation", x))_a $
--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (string))
          (formula
            (shorthand)))
        (letter))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (string))
          (formula
            (letter)))
        (letter))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (string))
          (formula
            (letter)))
        (letter))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (string))
          (formula
            (shorthand)))
        (letter))))
  (parbreak)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (string))
              (formula
                (shorthand)))))
        (letter))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (string))
              (formula
                (letter)))))
        (letter)))))

====================
typst/accent/math-accent-sym-call
====================

// Test function call.
$grave(a), acute(b), hat(f), tilde(§), macron(ä), diaer(a), ä \
 breve(\&), dot(!), circle(a), caron(@), arrow(Z), arrow.l(Z)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (symbol)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (letter)
      (linebreak)
      (call
        (ident)
        (formula
          (escape)))
      (symbol)
      (call
        (ident)
        (formula
          (symbol)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (symbol)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (field
          (ident)
          (ident))
        (formula
          (letter)))))
  (parbreak))

====================
typst/accent/math-accent-align
====================

$ x &= p \ dot(x) &= v \ dot.double(x) &= a \ dot.triple(x) &= j \ dot.quad(x) &= s $


--------------------

(source_file
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (call
        (ident)
        (formula
          (letter)))
      (align)
      (symbol)
      (letter)
      (linebreak)
      (call
        (field
          (ident)
          (ident))
        (formula
          (letter)))
      (align)
      (symbol)
      (letter)
      (linebreak)
      (call
        (field
          (ident)
          (ident))
        (formula
          (letter)))
      (align)
      (symbol)
      (letter)
      (linebreak)
      (call
        (field
          (ident)
          (ident))
        (formula
          (letter)))
      (align)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/accent/math-accent-func
====================

// Test `accent` function.
$accent(ö, .), accent(v, <-), accent(ZZ, \u{0303})$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (symbol)))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (shorthand)))
      (symbol)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (escape)))))
  (parbreak))

====================
typst/accent/math-accent-bounds
====================

// Test accent bounds.
$sqrt(tilde(T)) + hat(f)/hat(g)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (fraction
        (call
          (ident)
          (formula
            (letter)))
        (call
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/accent/math-accent-wide-base
====================

// Test wide base.
$arrow("ABC" + d), tilde(sum)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (string)
          (symbol)
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))))
  (parbreak))

====================
typst/accent/math-accent-superscript
====================

// Test effect of accent on superscript.
$A^x != hat(A)^x != hat(hat(A))^x$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (letter)
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (letter))))
  (parbreak))

====================
typst/accent/math-accent-high-base
====================

// Test high base.
$ tilde(integral), tilde(integral)_a^b, tilde(integral_a^b) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (attach
        (call
          (ident)
          (formula
            (ident)))
        (letter)
        (letter))
      (symbol)
      (call
        (ident)
        (formula
          (attach
            (ident)
            (letter)
            (letter))))))
  (parbreak))

====================
typst/accent/math-accent-sized
====================

// Test accent size.
$tilde(sum), tilde(sum, size: #50%), accent(H, hat, size: #200%)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak))

====================
typst/accent/math-accent-sized-script
====================

// Test accent size in script size.
$tilde(U, size: #1.1em), x^tilde(U, size: #1.1em), sscript(tilde(U, size: #1.1em))$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (attach
        (letter)
        (call
          (ident)
          (formula
            (letter))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit)))))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))
            (tagged
              (ident)
              (formula
                (code
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/accent/math-accent-dotless
====================

// Test dotless glyph variants.
#let test(c) = $grave(#c), acute(sans(#c)), hat(frak(#c)), tilde(mono(#c)),
  macron(bb(#c)), dot(cal(#c)), diaer(upright(#c)), breve(bold(#c)),
  circle(bold(upright(#c))), caron(upright(sans(#c))), arrow(bold(frak(#c)))$
$test(i) \ test(j)$
--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (math
        (formula
          (call
            (ident)
            (formula
              (code
                (ident))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (code
                    (ident))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (code
                        (ident))))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (code
                        (ident))))))))
          (symbol)
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (code
                        (ident))))))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))
      (linebreak)
      (call
        (ident)
        (formula
          (letter))))))

====================
typst/multiline/math-align-basic
====================

// Test basic alignment.
$ x &= x + y \
    &= x + 2z \
    &= sum x dot 2z $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (letter)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (letter)
      (symbol)
      (number)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (ident)
      (letter)
      (ident)
      (number)
      (letter)))
  (parbreak))

====================
typst/multiline/math-align-wider-first-column
====================

// Test text before first alignment point.
$ x + 1 &= a^2 + b^2 \
      y &= a + b^2 \
      z &= alpha dot beta $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (number)
      (align)
      (symbol)
      (attach
        (letter)
        (number))
      (symbol)
      (attach
        (letter)
        (number))
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (symbol)
      (attach
        (letter)
        (number))
      (linebreak)
      (letter)
      (align)
      (symbol)
      (ident)
      (ident)
      (ident)))
  (parbreak))

====================
typst/multiline/math-align-aligned-in-source
====================

// Test space between inner alignment points.
$ a + b &= 2 + 3 &= 5 \
      b &= c     &= 3 $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (align)
      (symbol)
      (number)
      (symbol)
      (number)
      (align)
      (symbol)
      (number)
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (align)
      (symbol)
      (number)))
  (parbreak))

====================
typst/multiline/math-align-cases
====================

// Test in case distinction.
$ f := cases(
  1 + 2 &"iff" &x,
  3     &"if"  &y,
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (shorthand)
      (call
        (ident)
        (formula
          (number)
          (symbol)
          (number)
          (align)
          (string)
          (align)
          (letter))
        (formula
          (number)
          (align)
          (string)
          (align)
          (letter)))))
  (parbreak))

====================
typst/multiline/math-align-lines-mixed
====================

// Test mixing lines with and some without alignment points.
$ "abc" &= c \
   &= d + 1 \
   = x $


--------------------

(source_file
  (comment)
  (math
    (formula
      (string)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (letter)
      (symbol)
      (number)
      (linebreak)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/multiline/math-attach-subscript-multiline
====================

// Test multiline subscript.
$ sum_(n in NN \ n <= 5) n = (5(5+1))/2 = 15 $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (ident)
            (linebreak)
            (letter)
            (shorthand)
            (number))))
      (letter)
      (symbol)
      (fraction
        (group
          (formula
            (number)
            (group
              (formula
                (number)
                (symbol)
                (number)))))
        (number))
      (symbol)
      (number)))
  (parbreak))

====================
typst/multiline/math-multiline-no-trailing-linebreak
====================

// Test no trailing line break.
$
"abc" &= c
$
No trailing line break.


--------------------

(source_file
  (comment)
  (math
    (formula
      (string)
      (align)
      (symbol)
      (letter)))
  (text)
  (parbreak))

====================
typst/multiline/math-multiline-trailing-linebreak
====================

// Test single trailing line break.
$
"abc" &= c \
$
One trailing line break.


--------------------

(source_file
  (comment)
  (math
    (formula
      (string)
      (align)
      (symbol)
      (letter)
      (linebreak)))
  (text)
  (parbreak))

====================
typst/multiline/math-multiline-multiple-trailing-linebreaks
====================

// Test multiple trailing line breaks.
$
"abc" &= c \ \ \
$
Multiple trailing line breaks.


--------------------

(source_file
  (comment)
  (math
    (formula
      (string)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (linebreak)
      (linebreak)))
  (text)
  (parbreak))

====================
typst/multiline/math-linebreaking-after-binop-and-rel
====================

// Basic breaking after binop, rel
#let hrule(x) = box(line(length: x))
#hrule(45pt)$e^(pi i)+1 = 0$\
#hrule(55pt)$e^(pi i)+1 = 0$\
#hrule(70pt)$e^(pi i)+1 = 0$


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (attach
        (letter)
        (group
          (formula
            (ident)
            (letter))))
      (symbol)
      (number)
      (symbol)
      (number)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (attach
        (letter)
        (group
          (formula
            (ident)
            (letter))))
      (symbol)
      (number)
      (symbol)
      (number)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (attach
        (letter)
        (group
          (formula
            (ident)
            (letter))))
      (symbol)
      (number)
      (symbol)
      (number)))
  (parbreak))

====================
typst/multiline/math-linebreaking-lr
====================

// LR groups prevent linebreaking.
#let hrule(x) = box(line(length: x))
#hrule(76pt)$a+b$\
#hrule(74pt)$(a+b)$\
#hrule(74pt)$paren.l a+b paren.r$


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (group
        (formula
          (letter)
          (symbol)
          (letter)))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (field
        (ident)
        (ident))
      (letter)
      (symbol)
      (letter)
      (field
        (ident)
        (ident))))
  (parbreak))

====================
typst/multiline/math-linebreaking-multiline
====================

// Multiline yet inline does not linebreak
#let hrule(x) = box(line(length: x))
#hrule(80pt)$a + b \ c + d$\


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (linebreak)
      (letter)
      (symbol)
      (letter)))
  (linebreak)
  (parbreak))

====================
typst/multiline/math-linebreaking-trailing-linebreak
====================

// A single linebreak at the end still counts as one line.
#let hrule(x) = box(line(length: x))
#hrule(60pt)$e^(pi i)+1 = 0\ $


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (attach
        (letter)
        (group
          (formula
            (ident)
            (letter))))
      (symbol)
      (number)
      (symbol)
      (number)
      (linebreak)))
  (parbreak))

====================
typst/multiline/math-linebreaking-in-box
====================

// Inline, in a box, doesn't linebreak.
#let hrule(x) = box(line(length: x))
#hrule(80pt)#box($a+b$)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (letter)
            (symbol)
            (letter))))))
  (parbreak))

====================
typst/multiline/math-linebreaking-between-consecutive-relations
====================

// A relation followed by a relation doesn't linebreak
// so essentially `a < = b` can be broken to `a` and `< = b`, `a < =` and `b`
// but never `a <` and `= b` because `< =` are consecutive relation that should
// be grouped together and no break between them.
#let hrule(x) = box(line(length: x))
#hrule(70pt)$a < = b$\
#hrule(78pt)$a < = b$


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (letter)
      (symbol)
      (symbol)
      (letter)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (letter)
      (symbol)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/multiline/math-linebreaking-after-relation-without-space
====================

// Line breaks can happen after a relation even if there is no
// explicit space.
#let hrule(x) = box(line(length: x))
#hrule(90pt)$<;$\
#hrule(95pt)$<;$\
#hrule(90pt)$<)$\
#hrule(95pt)$<)$


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (symbol)
      (symbol)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (symbol)
      (symbol)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (symbol)
      (symbol)))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (math
    (formula
      (symbol)
      (symbol)))
  (parbreak))

====================
typst/multiline/math-linebreaking-empty
====================

// Verify empty rows are handled ok.
$ $\
Nothing: $ $, just empty.


--------------------

(source_file
  (comment)
  (math)
  (linebreak)
  (text)
  (math)
  (text)
  (parbreak))

====================
typst/multiline/math-pagebreaking
====================

// Test breaking of equations at page boundaries.
#set page(height: 5em)
#show math.equation: set block(breakable: true)

$ a &+ b + & c \
  a &+ b   &   && + d \
  a &+ b + & c && + d \
    &      & c && + d \
    &= 0 $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (parbreak)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (letter)
      (symbol)
      (align)
      (letter)
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (align)
      (align)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (symbol)
      (align)
      (letter)
      (align)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (align)
      (letter)
      (align)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (number)))
  (parbreak))

====================
typst/multiline/math-pagebreaking-numbered
====================

// Test breaking of equations with numbering.
#set page(height: 5em)
#set math.equation(numbering: "1")
#show math.equation: set block(breakable: true)

$ a &+ b + & c \
  a &+ b   &   && + d \
  a &+ b + & c && + d \
    &      & c && + d \
    &= 0 $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (parbreak)
  (math
    (formula
      (letter)
      (align)
      (symbol)
      (letter)
      (symbol)
      (align)
      (letter)
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (align)
      (align)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (letter)
      (align)
      (symbol)
      (letter)
      (symbol)
      (align)
      (letter)
      (align)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (align)
      (letter)
      (align)
      (align)
      (symbol)
      (letter)
      (linebreak)
      (align)
      (symbol)
      (number)))
  (parbreak))

====================
typst/multiline/math-pagebreaking-single-line
====================

// Test breaking of single line equations.
#set page(height: 4em)
#show math.equation: set block(breakable: true)

Shouldn't overflow:
$ a + b $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (parbreak)
  (text)
  (quote)
  (text)
  (math
    (formula
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/multiline/math-pagebreaking-single-line-numbered
====================

// Test breaking of single line equations with numbering.
#set page(height: 4em)
#show math.equation: set block(breakable: true)
#set math.equation(numbering: "(1)")

Shouldn't overflow:
$ a + b $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (quote)
  (text)
  (math
    (formula
      (letter)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/multiline/issue-5113-pagebreaking-empty
====================

// Test empty breakable equations.
#show math.equation: set block(breakable: true)
#math.equation(block: true, [])


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (bool))
        (content))))
  (parbreak))

====================
typst/multiline/issue-1948-math-text-break
====================

// Test text with linebreaks in math.
$ x := "a\nb\nc\nd\ne" $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (shorthand)
      (string
        (escape)
        (escape)
        (escape)
        (escape))))
  (parbreak))

====================
typst/multiline/issue-4829-math-pagebreaking-wrong-number
====================

// Test numbering of empty regions of broken equations.
#set page(height: 5em)
#set math.equation(numbering: "1")
#show math.equation: set block(breakable: true)

#rect(height: 1.5em)

$ a + b \
  a + b $
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (bool)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (linebreak)
      (letter)
      (symbol)
      (letter))))

====================
typst/root/math-root-basic
====================

// Test root with more than one character.
$A = sqrt(x + y) = c$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (letter)))
      (symbol)
      (letter)))
  (parbreak))

====================
typst/root/math-root-radical-attachment
====================

// Test root size with radicals containing attachments.
$ sqrt(a) quad
  sqrt(f) quad
  sqrt(q) quad
  sqrt(a^2) \
  sqrt(n_0) quad
  sqrt(b^()) quad
  sqrt(b^2) quad
  sqrt(q_1^2) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number))))
      (linebreak)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number))))
      (ident)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (group))))
      (ident)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number))))
      (ident)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number)
            (number))))))
  (parbreak))

====================
typst/root/math-root-precomposed
====================

// Test precomposed vs constructed roots.
// 3 and 4 are precomposed.
$sqrt(x)$
$root(2, x)$
$root(3, x)$
$root(4, x)$
$root(5, x)$


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (letter)))))
  (parbreak))

====================
typst/root/math-root-large-body
====================

// Test large bodies
$ sqrt([|x|]^2 + [|y|]^2) < [|z|] $
$ v = sqrt((1/2) / (4/5))
   = root(3, (1/2/3) / (4/5/6))
   = root(4, ((1/2) / (3/4)) / ((1/2) / (3/4))) $
$ v = sqrt(a +\ b) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (attach
            (group
              (formula
                (letter)))
            (number))
          (symbol)
          (attach
            (group
              (formula
                (letter)))
            (number))))
      (symbol)
      (group
        (formula
          (letter)))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (group
              (formula
                (fraction
                  (number)
                  (number))))
            (group
              (formula
                (fraction
                  (number)
                  (number)))))))
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (fraction
            (group
              (formula
                (fraction
                  (fraction
                    (number)
                    (number))
                  (number))))
            (group
              (formula
                (fraction
                  (fraction
                    (number)
                    (number))
                  (number)))))))
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (fraction
            (group
              (formula
                (fraction
                  (group
                    (formula
                      (fraction
                        (number)
                        (number))))
                  (group
                    (formula
                      (fraction
                        (number)
                        (number)))))))
            (group
              (formula
                (fraction
                  (group
                    (formula
                      (fraction
                        (number)
                        (number))))
                  (group
                    (formula
                      (fraction
                        (number)
                        (number))))))))))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (linebreak)
          (letter)))))
  (parbreak))

====================
typst/root/math-root-large-index
====================

// Test large index.
$ root(2, x) quad
  root(3/(2/1), x) quad
  root(1/11, x) quad
  root(1/2/3, 1) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (fraction
            (number)
            (group
              (formula
                (fraction
                  (number)
                  (number))))))
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (fraction
            (number)
            (number)))
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (fraction
            (fraction
              (number)
              (number))
            (number)))
        (formula
          (number)))))
  (parbreak))

====================
typst/root/math-root-syntax
====================

// Test shorthand.
$ √2^3 = sqrt(2^3) $
$ √(x+y) quad ∛x quad ∜x $
$ (√2+3) = (sqrt(2)+3) $
--------------------

(source_file
  (comment)
  (math
    (formula
      (root
        (attach
          (number)
          (number)))
      (symbol)
      (call
        (ident)
        (formula
          (attach
            (number)
            (number))))))
  (math
    (formula
      (root
        (group
          (formula
            (letter)
            (symbol)
            (letter))))
      (ident)
      (root
        (letter))
      (ident)
      (root
        (letter))))
  (math
    (formula
      (group
        (formula
          (root
            (number))
          (symbol)
          (number)))
      (symbol)
      (group
        (formula
          (call
            (ident)
            (formula
              (number)))
          (symbol)
          (number))))))

====================
typst/syntax/math-unicode
====================

// Test Unicode math.
$ ∑_(i=0)^ℕ a ∘ b = \u{2211}_(i=0)^NN a compose b $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (symbol)
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (letter))
      (letter)
      (symbol)
      (letter)
      (symbol)
      (attach
        (escape)
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (ident))
      (letter)
      (ident)
      (letter)))
  (parbreak))

====================
typst/syntax/math-shorthands
====================

// Test a few shorthands.
$ underline(f' : NN -> RR) \
  n |-> cases(
    [|1|] &"if" n >>> 10,
    2 * 3 &"if" n != 5,
    1 - 0 thick &...,
  ) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (prime
            (letter))
          (symbol)
          (ident)
          (shorthand)
          (ident)))
      (linebreak)
      (letter)
      (shorthand)
      (call
        (ident)
        (formula
          (group
            (formula
              (number)))
          (align)
          (string)
          (letter)
          (shorthand)
          (number))
        (formula
          (number)
          (symbol)
          (number)
          (align)
          (string)
          (letter)
          (shorthand)
          (number))
        (formula
          (number)
          (symbol)
          (number)
          (ident)
          (align)
          (shorthand)))))
  (parbreak))

====================
typst/syntax/math-common-symbols
====================

// Test common symbols.
$ dot \ dots \ ast \ tilde \ star $


--------------------

(source_file
  (comment)
  (math
    (formula
      (ident)
      (linebreak)
      (ident)
      (linebreak)
      (ident)
      (linebreak)
      (ident)
      (linebreak)
      (ident)))
  (parbreak))

====================
typst/syntax/issue-2044-invalid-parsed-ident
====================

// In this bug, the dot at the end was causing the right parenthesis to be
// parsed as an identifier instead of the closing right parenthesis.
$floor(phi.alt.)$
$floor(phi.alt. )$


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))
          (symbol)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))
          (symbol)))))
  (parbreak))

====================
typst/syntax/math-unclosed
====================

// Error: 1-2 unclosed delimiter
$a
--------------------



====================
typst/attach/math-attach-postscripts
====================

// Test basics, postscripts.
$f_x + t^b + V_1^2 + attach(A, t: alpha, b: beta)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (letter)
        (letter))
      (symbol)
      (attach
        (letter)
        (letter))
      (symbol)
      (attach
        (letter)
        (number)
        (number))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (ident)))
        (tagged
          (ident)
          (formula
            (ident))))))
  (parbreak))

====================
typst/attach/math-attach-prescripts
====================

// Test basics, prescripts. Notably, the upper and lower prescripts' content need to be
// aligned on the right edge of their bounding boxes, not on the left as in postscripts.
$
attach(upright(O), bl: 8, tl: 16, br: 2, tr: 2-),
attach("Pb", bl: 82, tl: 207) + attach(upright(e), bl: -1, tl: 0) + macron(v)_e \
$


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number)
            (symbol))))
      (symbol)
      (call
        (ident)
        (formula
          (string))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (symbol)
            (number)))
        (tagged
          (ident)
          (formula
            (number))))
      (symbol)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (linebreak)))
  (parbreak))

====================
typst/attach/math-attach-mixed
====================

// A mixture of attachment positioning schemes.
$
attach(a, tl: u),   attach(a, tr: v),   attach(a, bl: x),
attach(a, br: y),   limits(a)^t,        limits(a)_b \

attach(a, tr: v, t: t),
attach(a, tr: v, br: y),
attach(a, br: y, b: b),
attach(limits(a), b: b, bl: x),
attach(a, tl: u, bl: x),
attach(limits(a), t: t, tl: u) \

attach(a, tl: u, tr: v),
attach(limits(a), t: t, br: y),
attach(limits(a), b: b, tr: v),
attach(a, bl: x, br: y),
attach(limits(a), b: b, tl: u),
attach(limits(a), t: t, bl: u),
limits(a)^t_b \

attach(a, tl: u, tr: v, bl: x, br: y),
attach(limits(a), t: t, bl: x, br: y, b: b),
attach(limits(a), t: t, tl: u, tr: v, b: b),
attach(limits(a), tl: u, bl: x, t: t, b: b),
attach(limits(a), t: t, b: b, tr: v, br: y),
attach(a, tl: u, t: t, tr: v, bl: x, b: b, br: y)
$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (symbol)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (linebreak)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (linebreak)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter)
        (letter))
      (linebreak)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/attach/math-attach-followed-by-func-call
====================

// Test function call after subscript.
$pi_1(Y), a_f(x), a^zeta (x), a^abs(b)_sqrt(c) \
 a^subset.eq (x), a_(zeta(x)), pi_(1(Y)), a^(abs(b))_(sqrt(c))$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (ident)
        (number))
      (group
        (formula
          (letter)))
      (symbol)
      (attach
        (letter)
        (apply
          (letter)
          (formula
            (letter))))
      (symbol)
      (attach
        (letter)
        (ident))
      (group
        (formula
          (letter)))
      (symbol)
      (attach
        (letter)
        (call
          (ident)
          (formula
            (letter)))
        (call
          (ident)
          (formula
            (letter))))
      (linebreak)
      (attach
        (letter)
        (field
          (ident)
          (ident)))
      (group
        (formula
          (letter)))
      (symbol)
      (attach
        (letter)
        (group
          (formula
            (call
              (ident)
              (formula
                (letter))))))
      (symbol)
      (attach
        (ident)
        (group
          (formula
            (number)
            (group
              (formula
                (letter))))))
      (symbol)
      (attach
        (letter)
        (group
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (group
          (formula
            (call
              (ident)
              (formula
                (letter))))))))
  (parbreak))

====================
typst/attach/math-attach-nested
====================

// Test associativity and scaling.
$ 1/(V^2^3^4^5),
  frac(
    attach(
      limits(V), br: attach(2, br: 3), b: attach(limits(2), b: 3)),
    attach(
      limits(V), tl: attach(2, tl: 3), t: attach(limits(2), t: 3))),
  attach(Omega,
    tl: attach(2, tl: attach(3, tl: attach(4, tl: 5))),
    tr: attach(2, tr: attach(3, tr: attach(4, tr: 5))),
    bl: attach(2, bl: attach(3, bl: attach(4, bl: 5))),
    br: attach(2, br: attach(3, br: attach(4, br: 5))),
  )
$


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (number)
        (group
          (formula
            (attach
              (letter)
              (attach
                (number)
                (attach
                  (number)
                  (attach
                    (number)
                    (number))))))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (letter))))
            (tagged
              (ident)
              (formula
                (call
                  (ident)
                  (formula
                    (number))
                  (tagged
                    (ident)
                    (formula
                      (number))))))
            (tagged
              (ident)
              (formula
                (call
                  (ident)
                  (formula
                    (call
                      (ident)
                      (formula
                        (number))))
                  (tagged
                    (ident)
                    (formula
                      (number))))))))
        (formula
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (letter))))
            (tagged
              (ident)
              (formula
                (call
                  (ident)
                  (formula
                    (number))
                  (tagged
                    (ident)
                    (formula
                      (number))))))
            (tagged
              (ident)
              (formula
                (call
                  (ident)
                  (formula
                    (call
                      (ident)
                      (formula
                        (number))))
                  (tagged
                    (ident)
                    (formula
                      (number)))))))))
      (symbol)
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (call
              (ident)
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (number))
                    (tagged
                      (ident)
                      (formula
                        (call
                          (ident)
                          (formula
                            (number))
                          (tagged
                            (ident)
                            (formula
                              (number))))))))))))
        (tagged
          (ident)
          (formula
            (call
              (ident)
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (number))
                    (tagged
                      (ident)
                      (formula
                        (call
                          (ident)
                          (formula
                            (number))
                          (tagged
                            (ident)
                            (formula
                              (number))))))))))))
        (tagged
          (ident)
          (formula
            (call
              (ident)
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (number))
                    (tagged
                      (ident)
                      (formula
                        (call
                          (ident)
                          (formula
                            (number))
                          (tagged
                            (ident)
                            (formula
                              (number))))))))))))
        (tagged
          (ident)
          (formula
            (call
              (ident)
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (number))
                    (tagged
                      (ident)
                      (formula
                        (call
                          (ident)
                          (formula
                            (number))
                          (tagged
                            (ident)
                            (formula
                              (number)))))))))))))))
  (parbreak))

====================
typst/attach/math-attach-high
====================

// Test high subscript and superscript.
$ sqrt(a_(1/2)^zeta), sqrt(a_alpha^(1/2)), sqrt(a_(1/2)^(3/4)) \
  sqrt(attach(a, tl: 1/2, bl: 3/4)),
  sqrt(attach(a, tl: 1/2, bl: 3/4, tr: 1/2, br: 3/4)) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (attach
            (letter)
            (group
              (formula
                (fraction
                  (number)
                  (number))))
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (ident)
            (group
              (formula
                (fraction
                  (number)
                  (number)))))))
      (symbol)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (group
              (formula
                (fraction
                  (number)
                  (number))))
            (group
              (formula
                (fraction
                  (number)
                  (number)))))))
      (linebreak)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))
            (tagged
              (ident)
              (formula
                (fraction
                  (number)
                  (number))))
            (tagged
              (ident)
              (formula
                (fraction
                  (number)
                  (number)))))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))
            (tagged
              (ident)
              (formula
                (fraction
                  (number)
                  (number))))
            (tagged
              (ident)
              (formula
                (fraction
                  (number)
                  (number))))
            (tagged
              (ident)
              (formula
                (fraction
                  (number)
                  (number))))
            (tagged
              (ident)
              (formula
                (fraction
                  (number)
                  (number)))))))))
  (parbreak))

====================
typst/attach/math-attach-descender-collision
====================

// Test for no collisions between descenders/ascenders and attachments.

$ sup_(x in P_i) quad inf_(x in P_i) $
$ op("fff",limits: #true)^(y) quad op("yyy", limits:#true)_(f) $


--------------------

(source_file
  (comment)
  (parbreak)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (attach
              (letter)
              (letter)))))
      (ident)
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (attach
              (letter)
              (letter)))))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (string))
          (tagged
            (ident)
            (formula
              (code
                (bool)))))
        (group
          (formula
            (letter))))
      (ident)
      (attach
        (call
          (ident)
          (formula
            (string))
          (tagged
            (ident)
            (formula
              (code
                (bool)))))
        (group
          (formula
            (letter))))))
  (parbreak))

====================
typst/attach/math-attach-to-group
====================

// Test frame base.
$ (-1)^n + (1/2 + 3)^(-1/2) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (group
          (formula
            (symbol)
            (number)))
        (letter))
      (symbol)
      (attach
        (group
          (formula
            (fraction
              (number)
              (number))
            (symbol)
            (number)))
        (group
          (formula
            (symbol)
            (fraction
              (number)
              (number)))))))
  (parbreak))

====================
typst/attach/math-attach-horizontal-align
====================

#set text(size: 8pt)

// Test that the attachments are aligned horizontally.
$ x_1 p_1 frak(p)_1 2_1 dot_1 lg_1 !_1 \\_1 ]_1 "ip"_1 op("iq")_1 \
  x^1 b^1 frak(b)^1 2^1 dot^1 lg^1 !^1 \\^1 ]^1 "ib"^1 op("id")^1 \
  "_"_1 "`"^1 x_1 y_1 x^1 l^1 attach(I,tl:1,bl:1,tr:1,br:1)
  scripts(sum)_1^1 integral_1^1 abs(1/2)_1^1 \
  x^1_1, ")"^1_1 (b y)^1_1, "[∫]"_1 [integral]_1 $


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (math
    (formula
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (attach
        (number)
        (number))
      (attach
        (ident)
        (number))
      (attach
        (ident)
        (attach
          (fac
            (number))
          (number)))
      (attach
        (escape)
        (number))
      (attach
        (symbol)
        (number))
      (attach
        (string)
        (number))
      (attach
        (call
          (ident)
          (formula
            (string)))
        (number))
      (linebreak)
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (attach
        (number)
        (number))
      (attach
        (ident)
        (number))
      (attach
        (ident)
        (attach
          (fac
            (number))
          (number)))
      (attach
        (escape)
        (number))
      (attach
        (symbol)
        (number))
      (attach
        (string)
        (number))
      (attach
        (call
          (ident)
          (formula
            (string)))
        (number))
      (linebreak)
      (attach
        (string)
        (number))
      (attach
        (string)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (number))))
      (attach
        (call
          (ident)
          (formula
            (ident)))
        (number)
        (number))
      (attach
        (ident)
        (number)
        (number))
      (attach
        (call
          (ident)
          (formula
            (fraction
              (number)
              (number))))
        (number)
        (number))
      (linebreak)
      (attach
        (letter)
        (number)
        (number))
      (symbol)
      (attach
        (string)
        (number)
        (number))
      (attach
        (group
          (formula
            (letter)
            (letter)))
        (number)
        (number))
      (symbol)
      (attach
        (string)
        (number))
      (attach
        (group
          (formula
            (ident)))
        (number))))
  (parbreak))

====================
typst/attach/math-attach-limit
====================

// Test limit.
$ lim_(n->oo \ n "grows") sum_(k=0 \ k in NN)^n k $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (shorthand)
            (ident)
            (linebreak)
            (letter)
            (string))))
      (attach
        (ident)
        (group
          (formula
            (letter)
            (symbol)
            (number)
            (linebreak)
            (symbol)
            (letter)
            (ident)
            (ident)))
        (letter))
      (letter)))
  (parbreak))

====================
typst/attach/math-attach-force-scripts-and-limits
====================

// Test forcing scripts and limits.
$ limits(A)_1^2 != A_1^2 $
$ scripts(sum)_1^2 != sum_1^2 $
$ limits(integral)_a^b != integral_a^b $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number)
        (number))
      (shorthand)
      (attach
        (letter)
        (number)
        (number))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (ident)))
        (number)
        (number))
      (shorthand)
      (attach
        (ident)
        (number)
        (number))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (ident)))
        (letter)
        (letter))
      (shorthand)
      (attach
        (ident)
        (letter)
        (letter))))
  (parbreak))

====================
typst/attach/issue-math-attach-realize-panic
====================

// Error: 25-29 unknown variable: oops
$ attach(A, t: #context oops) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (context
                (ident))))))))
  (parbreak))

====================
typst/attach/math-attach-show-limit
====================

// Show and let rules for limits and scripts
#let eq = $ ∫_a^b iota_a^b $
#eq
#show "∫": math.limits
#show math.iota: math.limits.with(inline: false)
#eq
$iota_a^b$


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (attach
            (symbol)
            (letter)
            (letter))
          (attach
            (ident)
            (letter)
            (letter))))))
  (code
    (ident))
  (code
    (show
      (string)
      (field
        (ident)
        (ident))))
  (code
    (show
      (field
        (ident)
        (ident))
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (ident))
  (math
    (formula
      (attach
        (ident)
        (letter)
        (letter))))
  (parbreak))

====================
typst/attach/math-attach-default-placement
====================

// Test default of limit attachments on relations at all sizes.
#set page(width: auto)
$ a =^"def" b quad a lt.eq_"really" b quad  a arrow.r.long.squiggly^"slowly" b $
$a =^"def" b quad a lt.eq_"really" b quad a arrow.r.long.squiggly^"slowly" b$

$a scripts(=)^"def" b quad a scripts(lt.eq)_"really" b quad a scripts(arrow.r.long.squiggly)^"slowly" b$


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (math
    (formula
      (letter)
      (attach
        (symbol)
        (string))
      (letter)
      (ident)
      (letter)
      (attach
        (field
          (ident)
          (ident))
        (string))
      (letter)
      (ident)
      (letter)
      (attach
        (field
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident))
        (string))
      (letter)))
  (math
    (formula
      (letter)
      (attach
        (symbol)
        (string))
      (letter)
      (ident)
      (letter)
      (attach
        (field
          (ident)
          (ident))
        (string))
      (letter)
      (ident)
      (letter)
      (attach
        (field
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident))
        (string))
      (letter)))
  (parbreak)
  (math
    (formula
      (letter)
      (attach
        (call
          (ident)
          (formula
            (symbol)))
        (string))
      (letter)
      (ident)
      (letter)
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (string))
      (letter)
      (ident)
      (letter)
      (attach
        (call
          (ident)
          (formula
            (field
              (field
                (field
                  (ident)
                  (ident))
                (ident))
              (ident))))
        (string))
      (letter)))
  (parbreak))

====================
typst/attach/math-attach-integral
====================

// Test default of scripts attachments on integrals at display size.
$ integral.sect_a^b  quad \u{2a1b}_a^b quad limits(\u{2a1b})_a^b $
$integral.sect_a^b quad \u{2a1b}_a^b quad limits(\u{2a1b})_a^b$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (field
          (ident)
          (ident))
        (letter)
        (letter))
      (ident)
      (attach
        (escape)
        (letter)
        (letter))
      (ident)
      (attach
        (call
          (ident)
          (formula
            (escape)))
        (letter)
        (letter))))
  (math
    (formula
      (attach
        (field
          (ident)
          (ident))
        (letter)
        (letter))
      (ident)
      (attach
        (escape)
        (letter)
        (letter))
      (ident)
      (attach
        (call
          (ident)
          (formula
            (escape)))
        (letter)
        (letter))))
  (parbreak))

====================
typst/attach/math-attach-large-operator
====================

// Test default of limit attachments on large operators at display size only.
$ tack.t.big_0^1 quad \u{02A0A}_0^1 quad join_0^1 $
$tack.t.big_0^1 quad \u{02A0A}_0^1 quad join_0^1$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (field
          (field
            (ident)
            (ident))
          (ident))
        (number)
        (number))
      (ident)
      (attach
        (escape)
        (number)
        (number))
      (ident)
      (attach
        (ident)
        (number)
        (number))))
  (math
    (formula
      (attach
        (field
          (field
            (ident)
            (ident))
          (ident))
        (number)
        (number))
      (ident)
      (attach
        (escape)
        (number)
        (number))
      (ident)
      (attach
        (ident)
        (number)
        (number))))
  (parbreak))

====================
typst/attach/math-attach-limit-long
====================

// Test long limit attachments.
$ attach(product, t: 123456789) attach(product, t: 123456789, bl: x) \
  attach(product, b: 123456789) attach(product, b: 123456789, tr: x) $
$attach(limits(product), t: 123456789) attach(limits(product), t: 123456789, bl: x)$

$attach(limits(product), b: 123456789) attach(limits(product), b: 123456789, tr: x)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (number))))
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (letter))))
      (linebreak)
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (number))))
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (letter))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident))))
        (tagged
          (ident)
          (formula
            (number))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident))))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident))))
        (tagged
          (ident)
          (formula
            (number))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident))))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/attach/math-attach-kerning
====================

// Test math kerning.
#show math.equation: set text(font: "STIX Two Math")

$ L^A Y^c R^2 delta^y omega^f a^2 t^w gamma^V p^+ \
  b_lambda f_k p_i x_1 x_j x_A y_l y_y beta_s theta_k \
  J_0 Y_0 T_1 T_f V_a V_A F_j cal(F)_j lambda_y \
  attach(W, tl: l) attach(A, tl: 2) attach(cal(V), tl: beta)
  attach(cal(P), tl: iota) attach(f, bl: i) attach(A, bl: x)
  attach(cal(J), bl: xi) attach(cal(A), bl: m) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak)
  (math
    (formula
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (number))
      (attach
        (ident)
        (letter))
      (attach
        (ident)
        (letter))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (letter))
      (attach
        (ident)
        (letter))
      (attach
        (letter)
        (symbol))
      (linebreak)
      (attach
        (letter)
        (ident))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (ident)
        (letter))
      (attach
        (ident)
        (letter))
      (linebreak)
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (number))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (letter)
        (letter))
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (attach
        (ident)
        (letter))
      (linebreak)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (number))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (ident))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (ident))))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (ident))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/attach/math-attach-kerning-mixed
====================

// Test mixtures of math kerning.
#show math.equation: set text(font: "STIX Two Math")

$ x_1^i x_2^lambda x_2^(2alpha) x_2^(k+1) x_2^(-p_(-1)) x_j^gamma \
  f_2^2 v_0^2  z_0^2 beta_s^2 xi_i^k J_1^2 N_(k y)^(-1) V_pi^x \
  attach(J, tl: 1, br: i) attach(P, tl: i, br: 2) B_i_0 phi.alt_i_(n-1)
  attach(A, tr: x, bl: x, br: x, tl: x) attach(F, tl: i, tr: f) \
  attach(cal(A), tl: 2, bl: o) attach(cal(J), bl: l, br: A)
  attach(cal(y), tr: p, bl: n t) attach(cal(O), tl: 16, tr: +, br: sigma)
  attach(italic(Upsilon), tr: s, br: Psi, bl: d) $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (parbreak)
  (math
    (formula
      (attach
        (letter)
        (number)
        (letter))
      (attach
        (letter)
        (number)
        (ident))
      (attach
        (letter)
        (number)
        (group
          (formula
            (number)
            (ident))))
      (attach
        (letter)
        (number)
        (group
          (formula
            (letter)
            (symbol)
            (number))))
      (attach
        (letter)
        (number)
        (group
          (formula
            (symbol)
            (attach
              (letter)
              (group
                (formula
                  (symbol)
                  (number)))))))
      (attach
        (letter)
        (letter)
        (ident))
      (linebreak)
      (attach
        (letter)
        (number)
        (number))
      (attach
        (letter)
        (number)
        (number))
      (attach
        (letter)
        (number)
        (number))
      (attach
        (ident)
        (letter)
        (number))
      (attach
        (ident)
        (letter)
        (letter))
      (attach
        (letter)
        (number)
        (number))
      (attach
        (letter)
        (group
          (formula
            (letter)
            (letter)))
        (group
          (formula
            (symbol)
            (number))))
      (attach
        (letter)
        (ident)
        (letter))
      (linebreak)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (number))))
      (attach
        (letter)
        (attach
          (letter)
          (number)))
      (attach
        (field
          (ident)
          (ident))
        (attach
          (letter)
          (group
            (formula
              (letter)
              (symbol)
              (number)))))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (linebreak)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter)
            (letter))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (number)))
        (tagged
          (ident)
          (formula
            (symbol)))
        (tagged
          (ident)
          (formula
            (ident))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident))))
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (ident)))
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/attach/math-attach-nested-base
====================

// Test attachments when the base has attachments.
$ attach(a^b, b: c) quad
  attach(attach(attach(attach(attach(attach(sum, tl: 1), t: 2), tr: 3), br: 4), b: 5), bl: 6) $

#let a0 = math.attach(math.alpha, b: [0])
#let a1 = $alpha^1$
#let a2 = $attach(a1, bl: 3)$

$ a0 + a1 + a0_2 \
  a1_2 + a0^2 + a1^2 \
  a2 + a2_2 + a2^2 $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (attach
            (letter)
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))
      (ident)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (call
                    (ident)
                    (formula
                      (call
                        (ident)
                        (formula
                          (call
                            (ident)
                            (formula
                              (ident))
                            (tagged
                              (ident)
                              (formula
                                (number)))))
                        (tagged
                          (ident)
                          (formula
                            (number)))))
                    (tagged
                      (ident)
                      (formula
                        (number)))))
                (tagged
                  (ident)
                  (formula
                    (number)))))
            (tagged
              (ident)
              (formula
                (number)))))
        (tagged
          (ident)
          (formula
            (number))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (field
            (ident)
            (ident))
          (tagged
            (ident)
            (content
              (text)))))))
  (code
    (let
      (ident)
      (math
        (formula
          (attach
            (ident)
            (number))))))
  (code
    (let
      (ident)
      (math
        (formula
          (call
            (ident)
            (formula
              (ident))
            (tagged
              (ident)
              (formula
                (number))))))))
  (parbreak)
  (math
    (formula
      (ident)
      (symbol)
      (ident)
      (symbol)
      (attach
        (ident)
        (number))
      (linebreak)
      (attach
        (ident)
        (number))
      (symbol)
      (attach
        (ident)
        (number))
      (symbol)
      (attach
        (ident)
        (number))
      (linebreak)
      (ident)
      (symbol)
      (attach
        (ident)
        (number))
      (symbol)
      (attach
        (ident)
        (number))))
  (parbreak))

====================
typst/attach/math-attach-nested-deep-base
====================

// Test attachments when the base has attachments and is nested arbitrarily
// deep.
#{
  let var = $x^1$
  for i in range(24) {
    var = $var$    
  }
  $var_2$
}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (block
      (let
        (ident)
        (math
          (formula
            (attach
              (letter)
              (number)))))
      (for
        (ident)
        (call
          (ident)
          (group
            (number)))
        (block
          (assign
            (ident)
            (math
              (formula
                (ident))))))
      (math
        (formula
          (attach
            (ident)
            (number))))))
  (parbreak))

====================
typst/attach/math-attach-scripts-extended-shapes
====================

// Test script attachments positioning if the base is an extended shape (or a
// sequence of extended shapes).
$lr(size: #130%, [x])_0^1, [x]_0^1, \]_0^1, x_0^1, A_0^1$ \
$n^2, (n + 1)^2, sum_0^1, integral_0^1$
--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit)))))
          (formula
            (group
              (formula
                (letter)))))
        (number)
        (number))
      (symbol)
      (attach
        (group
          (formula
            (letter)))
        (number)
        (number))
      (symbol)
      (attach
        (escape)
        (number)
        (number))
      (symbol)
      (attach
        (letter)
        (number)
        (number))
      (symbol)
      (attach
        (letter)
        (number)
        (number))))
  (linebreak)
  (math
    (formula
      (attach
        (letter)
        (number))
      (symbol)
      (attach
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (number))
      (symbol)
      (attach
        (ident)
        (number)
        (number))
      (symbol)
      (attach
        (ident)
        (number)
        (number)))))

====================
typst/vec/math-vec-gap
====================

#set math.vec(gap: 1em)
$ vec(1, 2) $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/vec/math-vec-align
====================

$ vec(-1, 1, -1, align: #left)
  vec(-1, 1, -1, align: #center)
  vec(-1, 1, -1, align: #right) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))))
  (parbreak))

====================
typst/vec/math-vec-align-explicit-alternating
====================

// Test alternating alignment in a vector.
$ vec(
  "a" & "a a a" & "a a",
  "a a" & "a a" & "a",
  "a a a" & "a" & "a a a",
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (string)
          (align)
          (string)
          (align)
          (string))
        (formula
          (string)
          (align)
          (string)
          (align)
          (string))
        (formula
          (string)
          (align)
          (string)
          (align)
          (string)))))
  (parbreak))

====================
typst/vec/math-vec-wide
====================

// Test wide cell.
$ v = vec(1, 2+3, 4) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)
          (symbol)
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/vec/math-vec-delim-set
====================

// Test alternative delimiter.
#set math.vec(delim: "[")
$ vec(1, 2) $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/vec/math-vec-delim-empty-string
====================

// Error: 22-24 expected exactly one character
#set math.vec(delim: "")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/vec/math-vec-delim-not-single-char
====================

// Error: 22-39 expected exactly one character
#set math.vec(delim: "not a delimiter")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/vec/math-vec-delim-invalid-char
====================

// Error: 22-25 invalid delimiter: "%"
#set math.vec(delim: "%")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak))

====================
typst/vec/math-vec-delim-invalid-symbol
====================

// Error: 22-33 invalid delimiter: "%"
#set math.vec(delim: sym.percent)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (field
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/vec/math-vec-delim-invalid-opening
====================

// Error: 22-33 invalid delimiter: "%"
#set math.vec(delim: ("%", none))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (string)
              (none)))))))
  (parbreak))

====================
typst/vec/math-vec-delim-invalid-closing
====================

// Error: 22-33 invalid delimiter: "%"
#set math.vec(delim: (none, "%"))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (none)
              (string)))))))
  (parbreak))

====================
typst/vec/math-vec-linebreaks
====================

// Currently linebreaks are equivalent to commas, though this behaviour may
// change in the future.
$ vec(a, b, c) vec(a \ b \ c) $
--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter)))
      (call
        (ident)
        (formula
          (letter)
          (linebreak)
          (letter)
          (linebreak)
          (letter))))))

====================
typst/cancel/math-cancel-inline
====================

// Inline
$a + 5 + cancel(x) + b - cancel(x)$

$c + (a dot.c cancel(b dot.c c))/(cancel(b dot.c c))$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (number)
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (fraction
        (group
          (formula
            (letter)
            (field
              (ident)
              (ident))
            (call
              (ident)
              (formula
                (letter)
                (field
                  (ident)
                  (ident))
                (letter)))))
        (group
          (formula
            (call
              (ident)
              (formula
                (letter)
                (field
                  (ident)
                  (ident))
                (letter))))))))
  (parbreak))

====================
typst/cancel/math-cancel-display
====================

// Display
#set page(width: auto)
$ a + b + cancel(b + c) - cancel(b) - cancel(c) - 5 + cancel(6) - cancel(6) $
$ e + (a dot.c cancel((b + c + d)))/(cancel(b + c + d)) $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (number)
      (symbol)
      (call
        (ident)
        (formula
          (number)))
      (symbol)
      (call
        (ident)
        (formula
          (number)))))
  (math
    (formula
      (letter)
      (symbol)
      (fraction
        (group
          (formula
            (letter)
            (field
              (ident)
              (ident))
            (call
              (ident)
              (formula
                (group
                  (formula
                    (letter)
                    (symbol)
                    (letter)
                    (symbol)
                    (letter)))))))
        (group
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter))))))))
  (parbreak))

====================
typst/cancel/math-cancel-inverted
====================

// Inverted
$a + cancel(x, inverted: #true) - cancel(x, inverted: #true) + 10 + cancel(y) - cancel(y)$
$ x + cancel("abcdefg", inverted: #true) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))
      (symbol)
      (number)
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (string))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))))
  (parbreak))

====================
typst/cancel/math-cancel-cross
====================

// Cross
$a + cancel(b + c + d, cross: #true, stroke: #red) + e$
$ a + cancel(b + c + d, cross: #true) + e $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (letter)
          (symbol)
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (bool))))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))
      (symbol)
      (letter)))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (letter)
          (symbol)
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))
      (symbol)
      (letter)))
  (parbreak))

====================
typst/cancel/math-cancel-customized
====================

// Resized and styled
#set page(width: 200pt, height: auto)
$a + cancel(x, length: #200%) - cancel(x, length: #50%, stroke: #(red + 1.1pt))$
$ b + cancel(x, length: #150%) - cancel(a + b + c, length: #50%, stroke: #(blue + 1.2pt)) $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit)))))
        (tagged
          (ident)
          (formula
            (code
              (group
                (add
                  (ident)
                  (number
                    (unit))))))))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (letter)
          (symbol)
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit)))))
        (tagged
          (ident)
          (formula
            (code
              (group
                (add
                  (ident)
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/cancel/math-cancel-angle-absolute
====================

// Specifying cancel line angle with an absolute angle
$cancel(x, angle: #0deg) + cancel(x, angle: #45deg) + cancel(x, angle: #90deg) + cancel(x, angle: #135deg)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak))

====================
typst/cancel/math-cancel-angle-func
====================

// Specifying cancel line angle with a function
$x + cancel(y, angle: #{angle => angle + 90deg}) - cancel(z, angle: #(angle => angle + 135deg))$
$ e + cancel((j + e)/(f + e)) - cancel((j + e)/(f + e), angle: #(angle => angle + 30deg)) $
--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (block
                (lambda
                  (ident)
                  (add
                    (ident)
                    (number
                      (unit)))))))))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (code
              (group
                (lambda
                  (ident)
                  (add
                    (ident)
                    (number
                      (unit)))))))))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (group
              (formula
                (letter)
                (symbol)
                (letter)))
            (group
              (formula
                (letter)
                (symbol)
                (letter))))))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (group
              (formula
                (letter)
                (symbol)
                (letter)))
            (group
              (formula
                (letter)
                (symbol)
                (letter)))))
        (tagged
          (ident)
          (formula
            (code
              (group
                (lambda
                  (ident)
                  (add
                    (ident)
                    (number
                      (unit))))))))))))

====================
typst/style/math-style-italic-default
====================

// Test italic defaults.
$a, A, delta, ϵ, partial, Delta, ϴ$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (symbol)
      (ident)
      (symbol)
      (letter)
      (symbol)
      (ident)
      (symbol)
      (ident)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/style/math-style
====================

// Test forcing a specific style.
$A, italic(A), upright(A), bold(A), bold(upright(A)), \
 serif(A), sans(A), cal(A), frak(A), mono(A), bb(A), \
 italic(partial), upright(partial), \
 bb("hello") + bold(cal("world")), \
 mono("SQRT")(x) wreath mono(123 + 456)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (linebreak)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (linebreak)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (linebreak)
      (call
        (ident)
        (formula
          (string)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (string)))))
      (symbol)
      (linebreak)
      (call
        (ident)
        (formula
          (string)))
      (group
        (formula
          (letter)))
      (ident)
      (call
        (ident)
        (formula
          (number)
          (symbol)
          (number)))))
  (parbreak))

====================
typst/style/math-style-dotless
====================

// Test styling dotless i and j.
$ dotless.i dotless.j,
  upright(dotless.i) upright(dotless.j),
  sans(dotless.i) sans(dotless.j),
  bold(dotless.i) bold(dotless.j),
  bb(dotless.i) bb(dotless.j),
  cal(dotless.i) cal(dotless.j),
  frak(dotless.i) frak(dotless.j),
  mono(dotless.i) mono(dotless.j), 
  bold(frak(dotless.i)) upright(sans(dotless.j)),
  italic(bb(dotless.i)) frak(sans(dotless.j)) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (field
        (ident)
        (ident))
      (field
        (ident)
        (ident))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (field
                (ident)
                (ident))))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (field
                (ident)
                (ident))))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (field
                (ident)
                (ident))))))
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (field
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/style/math-style-exceptions
====================

// Test a few style exceptions.
$h, bb(N), cal(R), Theta, italic(Theta), sans(Theta), sans(italic(Theta)) \
 bb(d), bb(italic(d)), italic(bb(d)), bb(e), bb(italic(e)), italic(bb(e)) \
 bb(i), bb(italic(i)), italic(bb(i)), bb(j), bb(italic(j)), italic(bb(j)) \
 bb(D), bb(italic(D)), italic(bb(D))$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (ident)
      (symbol)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (ident)))))
      (linebreak)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (linebreak)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (linebreak)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))))))
  (parbreak))

====================
typst/style/math-style-greek-exceptions
====================

// Test a few greek exceptions.
$bb(Gamma) , bb(gamma), bb(Pi), bb(pi), bb(sum)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)))))
  (parbreak))

====================
typst/style/math-style-hebrew-exceptions
====================

// Test hebrew exceptions.
$aleph, beth, gimel, daleth$


--------------------

(source_file
  (comment)
  (math
    (formula
      (ident)
      (symbol)
      (ident)
      (symbol)
      (ident)
      (symbol)
      (ident)))
  (parbreak))

====================
typst/style/issue-3650-italic-equation
====================

_abc $sin(x) "abc"$_ \
$italic(sin(x) "abc" #box[abc])$ \
*abc $sin(x) "abc"$* \
$bold(sin(x) "abc" #box[abc])$ \
--------------------

(source_file
  (emph
    (text)
    (math
      (formula
        (call
          (ident)
          (formula
            (letter)))
        (string))))
  (linebreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))
          (string)
          (code
            (call
              (ident)
              (content
                (text))))))))
  (linebreak)
  (strong
    (text)
    (math
      (formula
        (call
          (ident)
          (formula
            (letter)))
        (string))))
  (linebreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)))
          (string)
          (code
            (call
              (ident)
              (content
                (text))))))))
  (linebreak))

====================
typst/primes/math-primes
====================

// Test dedicated syntax for primes
$a'$, $a'''_b$, $'$, $'''''''$


--------------------

(source_file
  (comment)
  (math
    (formula
      (prime
        (letter))))
  (text)
  (math
    (formula
      (attach
        (prime
          (letter))
        (letter))))
  (text)
  (math
    (formula
      (symbol)))
  (text)
  (math
    (formula
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (symbol)))
  (parbreak))

====================
typst/primes/math-primes-spaces
====================

// Test spaces between
$a' ' '$, $' ' '$, $a' '/b$


--------------------

(source_file
  (comment)
  (math
    (formula
      (prime
        (letter))
      (symbol)
      (symbol)))
  (text)
  (math
    (formula
      (symbol)
      (symbol)
      (symbol)))
  (text)
  (math
    (formula
      (prime
        (letter))
      (fraction
        (symbol)
        (letter))))
  (parbreak))

====================
typst/primes/math-primes-complex
====================

// Test complex prime combinations
$a'_b^c$, $a_b'^c$, $a_b^c'$, $a_b'^c'^d'$

$(a'_b')^(c'_d')$, $a'/b'$, $a_b'/c_d'$

$∫'$, $∑'$, $a'^2^2$, $a'_2_2$

$f_n'^a'$, $f^a'_n'$

$ ∑'_S' $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (prime
          (letter))
        (letter)
        (letter))))
  (text)
  (math
    (formula
      (attach
        (letter)
        (prime
          (letter))
        (letter))))
  (text)
  (math
    (formula
      (attach
        (letter)
        (letter)
        (prime
          (letter)))))
  (text)
  (math
    (formula
      (attach
        (letter)
        (prime
          (letter))
        (attach
          (prime
            (letter))
          (prime
            (letter))))))
  (parbreak)
  (math
    (formula
      (attach
        (group
          (formula
            (attach
              (prime
                (letter))
              (prime
                (letter)))))
        (group
          (formula
            (attach
              (prime
                (letter))
              (prime
                (letter))))))))
  (text)
  (math
    (formula
      (fraction
        (prime
          (letter))
        (prime
          (letter)))))
  (text)
  (math
    (formula
      (fraction
        (attach
          (letter)
          (prime
            (letter)))
        (attach
          (letter)
          (prime
            (letter))))))
  (parbreak)
  (math
    (formula
      (prime
        (symbol))))
  (text)
  (math
    (formula
      (symbol)
      (symbol)))
  (text)
  (math
    (formula
      (attach
        (prime
          (letter))
        (attach
          (number)
          (number)))))
  (text)
  (math
    (formula
      (attach
        (prime
          (letter))
        (attach
          (number)
          (number)))))
  (parbreak)
  (math
    (formula
      (attach
        (letter)
        (prime
          (letter))
        (prime
          (letter)))))
  (text)
  (math
    (formula
      (attach
        (letter)
        (prime
          (letter))
        (prime
          (letter)))))
  (parbreak)
  (math
    (formula
      (symbol)
      (attach
        (symbol)
        (prime
          (letter)))))
  (parbreak))

====================
typst/primes/math-primes-attach
====================

// Test attaching primes only
$a' = a^', a_', a_'''^''^'$


--------------------

(source_file
  (comment)
  (math
    (formula
      (prime
        (letter))
      (symbol)
      (attach
        (letter)
        (symbol))
      (symbol)
      (attach
        (letter)
        (symbol))
      (symbol)
      (attach
        (letter)
        (prime
          (symbol))
        (attach
          (prime
            (symbol))
          (symbol)))))
  (parbreak))

====================
typst/primes/math-primes-scripts
====================

// Test primes always attaching as scripts
$ x' $
$ x^' $
$ attach(x, t: ') $
$ <' $
$ attach(<, br: ') $
$ op(<, limits: #true)' $
$ limits(<)' $


--------------------

(source_file
  (comment)
  (math
    (formula
      (prime
        (letter))))
  (math
    (formula
      (attach
        (letter)
        (symbol))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (tagged
          (ident)
          (formula
            (symbol))))))
  (math
    (formula
      (symbol)
      (symbol)))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (symbol))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))
      (symbol)))
  (math
    (formula
      (prime
        (call
          (ident)
          (formula
            (symbol))))))
  (parbreak))

====================
typst/primes/math-primes-limits
====================

// Test forcefully attaching primes as limits
$ attach(<, t: ') $
$ <^' $
$ attach(<, b: ') $
$ <_' $

$ limits(x)^' $
$ attach(limits(x), t: ') $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (symbol))))))
  (math
    (formula
      (attach
        (symbol)
        (symbol))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (symbol))))))
  (math
    (formula
      (attach
        (symbol)
        (symbol))))
  (parbreak)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (symbol))))
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter))))
        (tagged
          (ident)
          (formula
            (symbol))))))
  (parbreak))

====================
typst/primes/math-primes-after-code-expr
====================

// Test prime symbols after code mode.
#let g = $f$
#let gg = $f$

$
  #(g)' #g' #g ' \
  #g''''''''''''''''' \
  gg'
$


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (letter)))))
  (code
    (let
      (ident)
      (math
        (formula
          (letter)))))
  (parbreak)
  (math
    (formula
      (prime
        (code
          (group
            (ident))))
      (prime
        (code
          (ident)))
      (code
        (ident))
      (symbol)
      (linebreak)
      (prime
        (code
          (ident)))
      (linebreak)
      (prime
        (ident))))
  (parbreak))

====================
typst/primes/math-primes-with-superscript
====================

// Test prime symbols don't raise the superscript position
$
  sqrt(f)/f
  sqrt(f^2)/f^2
  sqrt(f'^2)/f'^2
  sqrt(f''_n^2)/f''^2_n
$
--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (fraction
        (call
          (ident)
          (formula
            (attach
              (letter)
              (number))))
        (attach
          (letter)
          (number)))
      (fraction
        (call
          (ident)
          (formula
            (attach
              (prime
                (letter))
              (number))))
        (attach
          (prime
            (letter))
          (number)))
      (fraction
        (call
          (ident)
          (formula
            (attach
              (prime
                (letter))
              (letter)
              (number))))
        (attach
          (prime
            (letter))
          (number)
          (letter))))))

====================
typst/stretch/math-stretch-basic
====================

// Test basic stretch.
$ P -> Q stretch(->, size: #200%) R \
  R stretch(->) S stretch(->, size: #50%)^"epimorphism" T $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (shorthand)
      (letter)
      (call
        (ident)
        (formula
          (shorthand))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (shorthand)))
      (letter)
      (attach
        (call
          (ident)
          (formula
            (shorthand))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (string))
      (letter)))
  (parbreak))

====================
typst/stretch/math-stretch-complex
====================

// Test complex stretch.
$ H stretch(=)^"define" U + p V \
  x stretch(harpoons.ltrb, size: #3em) y
    stretch(\[, size: #150%) z \
  f : X stretch(arrow.hook, size: #150%)_"injective" Y \
  V stretch(->, size: #(100% + 1.5em))^("surjection") ZZ $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (attach
        (call
          (ident)
          (formula
            (symbol)))
        (string))
      (letter)
      (symbol)
      (letter)
      (letter)
      (linebreak)
      (letter)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident)))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (letter)
      (call
        (ident)
        (formula
          (escape))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (letter)
      (linebreak)
      (letter)
      (symbol)
      (letter)
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident)))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (string))
      (letter)
      (linebreak)
      (letter)
      (attach
        (call
          (ident)
          (formula
            (shorthand))
          (tagged
            (ident)
            (formula
              (code
                (group
                  (add
                    (number
                      (unit))
                    (number
                      (unit))))))))
        (group
          (formula
            (string))))
      (ident)))
  (parbreak))

====================
typst/stretch/math-stretch-horizontal-attach
====================

// Test horizontal stretch interactions with attachments.
#set page(width: auto)

$stretch(stretch(=, size: #4em))_A$
$stretch(arrow.hook, size: #5em)^"injective map"$
$stretch(arrow.hook, size: #200%)^"injective map"$

$ P = Q
    stretch(=)^(k = 0)_(forall i) R
    stretch(=, size: #150%)^(k = 0)_(forall i) S
    stretch(=, size: #2mm)^(k = 0)_(forall i) T \
  U stretch(equiv)^(forall i)_"Chern-Weil" V
    stretch(equiv, size: #(120% + 2mm))^(forall i)_"Chern-Weil" W $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (symbol))
              (tagged
                (ident)
                (formula
                  (code
                    (number
                      (unit))))))))
        (letter))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident)))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (string))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident)))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (string))))
  (parbreak)
  (math
    (formula
      (letter)
      (symbol)
      (letter)
      (attach
        (call
          (ident)
          (formula
            (symbol)))
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (group
          (formula
            (ident)
            (letter))))
      (letter)
      (attach
        (call
          (ident)
          (formula
            (symbol))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (group
          (formula
            (ident)
            (letter))))
      (letter)
      (attach
        (call
          (ident)
          (formula
            (symbol))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (group
          (formula
            (letter)
            (symbol)
            (number)))
        (group
          (formula
            (ident)
            (letter))))
      (letter)
      (linebreak)
      (letter)
      (attach
        (call
          (ident)
          (formula
            (ident)))
        (group
          (formula
            (ident)
            (letter)))
        (string))
      (letter)
      (attach
        (call
          (ident)
          (formula
            (ident))
          (tagged
            (ident)
            (formula
              (code
                (group
                  (add
                    (number
                      (unit))
                    (number
                      (unit))))))))
        (group
          (formula
            (ident)
            (letter)))
        (string))
      (letter)))
  (parbreak))

====================
typst/stretch/math-stretch-vertical-attach
====================

// Test vertical stretch interactions with attachments.
$arrow.t$
$stretch(arrow.t)^"map"$
$stretch(arrow.t, size: #2em)^"map"$
$stretch(arrow.t, size: #200%)^"map"$


--------------------

(source_file
  (comment)
  (math
    (formula
      (field
        (ident)
        (ident))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (string))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident)))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (string))))
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (field
              (ident)
              (ident)))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (string))))
  (parbreak))

====================
typst/stretch/math-stretch-vertical-scripts
====================

// Test vertical stretch interactions with script attachments.
#let big = $stretch(|, size: #4em)$
$ big_0^1 stretch(|, size: #1.5em)_0^1
  stretch(big, size: #1em)_0^1 |_0^1 $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (call
            (ident)
            (formula
              (symbol))
            (tagged
              (ident)
              (formula
                (code
                  (number
                    (unit))))))))))
  (math
    (formula
      (attach
        (ident)
        (number)
        (number))
      (attach
        (call
          (ident)
          (formula
            (symbol))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (number)
        (number))
      (attach
        (call
          (ident)
          (formula
            (ident))
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit))))))
        (number)
        (number))
      (attach
        (symbol)
        (number)
        (number))))
  (parbreak))

====================
typst/stretch/math-stretch-horizontal
====================

// Test stretching along horizontal axis.
#let ext(sym) = math.stretch(sym, size: 2em)
$ ext(arrow.r) quad ext(arrow.l.double.bar) \
  ext(harpoon.rb) quad ext(harpoons.ltrb) \
  ext(paren.t) quad ext(shell.b) \
  ext(eq) quad ext(equiv) $


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (field
              (field
                (ident)
                (ident))
              (ident))
            (ident))))
      (linebreak)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (linebreak)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (linebreak)
      (call
        (ident)
        (formula
          (ident)))
      (ident)
      (call
        (ident)
        (formula
          (ident)))))
  (parbreak))

====================
typst/stretch/math-stretch-vertical
====================

// Test stretching along vertical axis.
#let ext(sym) = math.stretch(sym, size: 2em)
$ ext(bar.v) quad ext(bar.v.double) quad
  ext(angle.l) quad ext(angle.r) quad
  ext(paren.l) quad ext(paren.r) \
  ext(bracket.l.double) quad ext(bracket.r.double) quad
  ext(brace.l) quad ext(brace.r) quad
  ext(bracket.l) quad ext(bracket.r) $


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (field
              (ident)
              (ident))
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (linebreak)
      (call
        (ident)
        (formula
          (field
            (field
              (ident)
              (ident))
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (field
              (ident)
              (ident))
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))
      (ident)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/stretch/math-stretch-shorthand
====================

// Test stretch when base is given with shorthand.
$stretch(||, size: #2em)$
$stretch(\(, size: #2em)$
$stretch("⟧", size: #2em)$
$stretch("|", size: #2em)$
$stretch(->, size: #2em)$
$stretch(↣, size: #2em)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (escape))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (string))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (string))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (shorthand))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak))

====================
typst/stretch/math-stretch-nested
====================

// Test nested stretch calls.
$ stretch(=, size: #2em) \
  stretch(stretch(=, size: #4em), size: #50%) $

#let base = math.stretch($=$, size: 4em)
$ stretch(base, size: #50%) $

#let base = $stretch(=, size: #4em) $
$ stretch(base, size: #50%) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (linebreak)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (symbol))
            (tagged
              (ident)
              (formula
                (code
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (math
            (formula
              (symbol)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak)
  (code
    (let
      (ident)
      (math
        (formula
          (call
            (ident)
            (formula
              (symbol))
            (tagged
              (ident)
              (formula
                (code
                  (number
                    (unit))))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak))

====================
typst/stretch/math-stretch-attach-nested-equation
====================

// Test stretching with attachments when nested in an equation.
#let body = $stretch(=)$
$ body^"text" $

#{
  let body = $stretch(=)$
  for i in range(24) {
    body = $body$    
  }
  $body^"long text"$
}
--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (call
            (ident)
            (formula
              (symbol)))))))
  (math
    (formula
      (attach
        (ident)
        (string))))
  (parbreak)
  (code
    (block
      (let
        (ident)
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol))))))
      (for
        (ident)
        (call
          (ident)
          (group
            (number)))
        (block
          (assign
            (ident)
            (math
              (formula
                (ident))))))
      (math
        (formula
          (attach
            (ident)
            (string)))))))

====================
typst/interactions/math-nested-normal-layout
====================

// Test images and font fallback.
#let monkey = move(dy: 0.2em, image("/assets/images/monkey.svg", height: 1em))
$ sum_(i=#emoji.apple)^#emoji.apple.red i + monkey/2 $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (call
            (ident)
            (group
              (string)
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (symbol)
            (code
              (field
                (ident)
                (ident)))))
        (code
          (field
            (field
              (ident)
              (ident))
            (ident))))
      (letter)
      (symbol)
      (fraction
        (ident)
        (number))))
  (parbreak))

====================
typst/interactions/math-table
====================

// Test tables.
$ x := #table(columns: 2)[x][y]/mat(1, 2, 3)
     = #table[A][B][C] $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (shorthand)
      (fraction
        (code
          (call
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (text)))
            (content
              (text))))
        (call
          (ident)
          (formula
            (number))
          (formula
            (number))
          (formula
            (number))))
      (symbol)
      (code
        (call
          (call
            (call
              (ident)
              (content
                (text)))
            (content
              (text)))
          (content
            (text))))))
  (parbreak))

====================
typst/interactions/math-equation-auto-wrapping
====================

// Test non-equation math directly in content.
#math.attach($a$, t: [b])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (math
          (formula
            (letter)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/interactions/math-font-switch
====================

// Test font switch.
// Warning: 29-40 unknown font family: noto sans
#let here = text.with(font: "Noto Sans")
$#here[f] := #here[Hi there]$.


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (math
    (formula
      (code
        (call
          (ident)
          (content
            (text))))
      (shorthand)
      (code
        (call
          (ident)
          (content
            (text))))))
  (text)
  (parbreak))

====================
typst/interactions/math-box-without-baseline
====================

// Test boxes without a baseline act as if the baseline is at the base
#{
  box(stroke: 0.2pt, $a #box(stroke: 0.2pt, $a$)$)
  h(12pt)
  box(stroke: 0.2pt, $a #box(stroke: 0.2pt, $g$)$)
  h(12pt)
  box(stroke: 0.2pt, $g #box(stroke: 0.2pt, $g$)$)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (math
            (formula
              (letter)
              (code
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (math
                      (formula
                        (letter))))))))))
      (call
        (ident)
        (group
          (number
            (unit))))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (math
            (formula
              (letter)
              (code
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (math
                      (formula
                        (letter))))))))))
      (call
        (ident)
        (group
          (number
            (unit))))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (math
            (formula
              (letter)
              (code
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (math
                      (formula
                        (letter))))))))))))
  (parbreak))

====================
typst/interactions/math-box-with-baseline
====================

// Test boxes with a baseline are respected
#box(stroke: 0.2pt, $a #box(baseline:0.5em, stroke: 0.2pt, $a$)$)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (math
          (formula
            (letter)
            (code
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (math
                    (formula
                      (letter)))))))))))
  (parbreak))

====================
typst/interactions/math-at-par-start
====================

// Test that equation at start of paragraph works fine.
$x$ is a variable.


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)))
  (text)
  (parbreak))

====================
typst/interactions/math-at-par-end
====================

// Test that equation at end of paragraph works fine.
One number is $1$


--------------------

(source_file
  (comment)
  (text)
  (math
    (formula
      (number)))
  (parbreak))

====================
typst/interactions/math-at-line-start
====================

// Test math at the natural end of a line.
#h(60pt) Number $1$ exists.


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (math
    (formula
      (number)))
  (text)
  (parbreak))

====================
typst/interactions/math-at-line-end
====================

// Test math at the natural end of a line.
#h(50pt) Number $1$ exists.


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (math
    (formula
      (number)))
  (text)
  (parbreak))

====================
typst/interactions/math-consecutive
====================

// Test immediately consecutive equations.
$x$$y$


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)))
  (math
    (formula
      (letter)))
  (parbreak))

====================
typst/interactions/issue-2821-missing-fields
====================

// Issue #2821: Setting a figure's supplement to none removes the field
#show figure.caption: it => {
  assert(it.has("supplement"))
  assert(it.supplement == none)
}
#figure([], caption: [], supplement: none)


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (string)))))
          (call
            (ident)
            (group
              (cmp
                (field
                  (ident)
                  (ident))
                (none))))))))
  (code
    (call
      (ident)
      (group
        (content)
        (tagged
          (ident)
          (content))
        (tagged
          (ident)
          (none)))))
  (parbreak))

====================
typst/interactions/math-symbol-show-rule
====================

// Test using rules for symbols
#show sym.tack: it => $#h(1em) it #h(1em)$
$ a tack b $


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (math
          (formula
            (code
              (call
                (ident)
                (group
                  (number
                    (unit)))))
            (ident)
            (code
              (call
                (ident)
                (group
                  (number
                    (unit))))))))))
  (math
    (formula
      (letter)
      (ident)
      (letter)))
  (parbreak))

====================
typst/interactions/issue-math-realize-show
====================

// Test that content in math can be realized without breaking
// nested equations.
#let my = $pi$
#let f1 = box(baseline: 10pt, [f])
#let f2 = context f1
#show math.vec: [nope]

$ pi a $
$ my a $
$ 1 + sqrt(x/2) + sqrt(#hide($x/2$)) $
$ a x #link("url", $+ b$) $
$ f f1 f2 $
$ vec(1,2) * 2 $


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (ident)))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (content
            (text))))))
  (code
    (let
      (ident)
      (context
        (ident))))
  (code
    (show
      (field
        (ident)
        (ident))
      (content
        (text))))
  (parbreak)
  (math
    (formula
      (ident)
      (letter)))
  (math
    (formula
      (ident)
      (letter)))
  (math
    (formula
      (number)
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (number))))
      (symbol)
      (call
        (ident)
        (formula
          (code
            (call
              (ident)
              (group
                (math
                  (formula
                    (fraction
                      (letter)
                      (number)))))))))))
  (math
    (formula
      (letter)
      (letter)
      (code
        (call
          (ident)
          (group
            (string)
            (math
              (formula
                (symbol)
                (letter))))))))
  (math
    (formula
      (letter)
      (ident)
      (ident)))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))
      (symbol)
      (number)))
  (parbreak))

====================
typst/interactions/issue-math-realize-hide
====================

$ x^2 #hide[$(>= phi.alt) union y^2 0$] z^2 $
Hello #hide[there $x$]
and #hide[$ f(x) := x^2 $]


--------------------

(source_file
  (math
    (formula
      (attach
        (letter)
        (number))
      (code
        (call
          (ident)
          (content
            (math
              (formula
                (group
                  (formula
                    (shorthand)
                    (field
                      (ident)
                      (ident))))
                (ident)
                (attach
                  (letter)
                  (number))
                (number))))))
      (attach
        (letter)
        (number))))
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (math
          (formula
            (letter))))))
  (text)
  (code
    (call
      (ident)
      (content
        (math
          (formula
            (apply
              (letter)
              (formula
                (letter)))
            (shorthand)
            (attach
              (letter)
              (number)))))))
  (parbreak))

====================
typst/interactions/issue-math-realize-scripting
====================

// Test equations can embed equation pieces built by functions
#let foo(v1, v2) = {
  // Return an equation piece that would've been rendered in
  // inline style if the piece is not embedded
  $v1 v2^2$
}
#let bar(v1, v2) = {
  // Return an equation piece that would've been rendered in
  // block style if the piece is not embedded
  $ v1 v2^2 $
}
#let baz(..sink) = {
  // Return an equation piece built by joining arrays
  sink.pos().map(x => $hat(#x)$).join(sym.and)
}

Inline $2 foo(alpha, (M+foo(a, b)))$.

Inline $2 bar(alpha, (M+foo(a, b)))$.

Inline $2 baz(x,y,baz(u, v))$.

$ 2 foo(alpha, (M+foo(a, b))) $
$ 2 bar(alpha, (M+foo(a, b))) $
$ 2 baz(x,y,baz(u, v)) $


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (block
        (comment)
        (comment)
        (math
          (formula
            (ident)
            (attach
              (ident)
              (number)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (block
        (comment)
        (comment)
        (math
          (formula
            (ident)
            (attach
              (ident)
              (number)))))))
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (block
        (comment)
        (call
          (field
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group))
                (ident))
              (group
                (lambda
                  (ident)
                  (math
                    (formula
                      (call
                        (ident)
                        (formula
                          (code
                            (ident)))))))))
            (ident))
          (group
            (field
              (ident)
              (ident)))))))
  (parbreak)
  (text)
  (math
    (formula
      (number)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (group
            (formula
              (letter)
              (symbol)
              (call
                (ident)
                (formula
                  (letter))
                (formula
                  (letter)))))))))
  (text)
  (parbreak)
  (text)
  (math
    (formula
      (number)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (group
            (formula
              (letter)
              (symbol)
              (call
                (ident)
                (formula
                  (letter))
                (formula
                  (letter)))))))))
  (text)
  (parbreak)
  (text)
  (math
    (formula
      (number)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (call
            (ident)
            (formula
              (letter))
            (formula
              (letter)))))))
  (text)
  (parbreak)
  (math
    (formula
      (number)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (group
            (formula
              (letter)
              (symbol)
              (call
                (ident)
                (formula
                  (letter))
                (formula
                  (letter)))))))))
  (math
    (formula
      (number)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (group
            (formula
              (letter)
              (symbol)
              (call
                (ident)
                (formula
                  (letter))
                (formula
                  (letter)))))))))
  (math
    (formula
      (number)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (call
            (ident)
            (formula
              (letter))
            (formula
              (letter)))))))
  (parbreak))

====================
typst/interactions/math-size-resolve
====================

#let length = context repr(measure("--").width)
$ a length a ^ length $


--------------------

(source_file
  (code
    (let
      (ident)
      (context
        (call
          (ident)
          (group
            (field
              (call
                (ident)
                (group
                  (string)))
              (ident)))))))
  (math
    (formula
      (letter)
      (ident)
      (attach
        (letter)
        (ident))))
  (parbreak))

====================
typst/interactions/math-size-arbitrary-content
====================

// Test sizing of both relative and absolute non math content in math sizes.
#let stuff = square(inset: 0pt)[hello]
#let square = square(size: 5pt)
$ stuff sum^stuff_square square $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (ident)
      (attach
        (ident)
        (ident)
        (ident))
      (ident)))
  (parbreak))

====================
typst/interactions/math-size-math-content-1
====================

// Nested math content has styles overwritten by the inner equation.
// Ideally the widths would match the actual length of the arrows.
#let arrow = $stretch(->)^"much text"$
$ arrow A^arrow A^A^arrow $
#let width = context measure(arrow).width
$ width A^width A^A^width $


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (attach
            (call
              (ident)
              (formula
                (shorthand)))
            (string))))))
  (math
    (formula
      (ident)
      (attach
        (letter)
        (ident))
      (attach
        (letter)
        (attach
          (letter)
          (ident)))))
  (code
    (let
      (ident)
      (context
        (field
          (call
            (ident)
            (group
              (ident)))
          (ident)))))
  (math
    (formula
      (ident)
      (attach
        (letter)
        (ident))
      (attach
        (letter)
        (attach
          (letter)
          (ident)))))
  (parbreak))

====================
typst/interactions/math-size-math-content-2
====================

// Nested math content has styles overwritten by the inner equation.
// Ideally the heights would match the actual height of the sums.
#let sum = $sum^2$
#let height(x) = context measure(x).height
$sum = height(sum) $
$ sum != height(sum) $


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (math
        (formula
          (attach
            (ident)
            (number))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (context
        (field
          (call
            (ident)
            (group
              (ident)))
          (ident)))))
  (math
    (formula
      (ident)
      (symbol)
      (call
        (ident)
        (formula
          (ident)))))
  (math
    (formula
      (ident)
      (shorthand)
      (call
        (ident)
        (formula
          (ident)))))
  (parbreak))

====================
typst/interactions/math-size-math-content-3
====================

// Sum doesn't get wrapped in math as it is a single expr.
// Ideally the height would match the actual height of the sum.
#let height(x) = context measure(x).height
$ sum != height(sum) $


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (context
        (field
          (call
            (ident)
            (group
              (ident)))
          (ident)))))
  (math
    (formula
      (ident)
      (shorthand)
      (call
        (ident)
        (formula
          (ident)))))
  (parbreak))

====================
typst/interactions/math-text-size
====================

// Values retrieved from function are not resolved at the moment.
// Ideally the left size would match the right size.
#let size = context [#text.size.to-absolute() #1em.to-absolute()]
$ size x^size x^x^size $
--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (context
        (content
          (code
            (call
              (field
                (field
                  (ident)
                  (ident))
                (ident))
              (group)))
          (code
            (call
              (field
                (number
                  (unit))
                (ident))
              (group)))))))
  (math
    (formula
      (ident)
      (attach
        (letter)
        (ident))
      (attach
        (letter)
        (attach
          (letter)
          (ident))))))

====================
typst/frac/math-frac-baseline
====================

// Test that denominator baseline matches in the common case.
$ x = 1/2 = a/(a h) = a/a = a/(1/2) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (fraction
        (number)
        (number))
      (symbol)
      (fraction
        (letter)
        (group
          (formula
            (letter)
            (letter))))
      (symbol)
      (fraction
        (letter)
        (letter))
      (symbol)
      (fraction
        (letter)
        (group
          (formula
            (fraction
              (number)
              (number)))))))
  (parbreak))

====================
typst/frac/math-frac-paren-removal
====================

// Test parenthesis removal.
$ (|x| + |y|)/2 < [1+2]/3 $


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (group
          (formula
            (symbol)
            (letter)
            (symbol)
            (symbol)
            (symbol)
            (letter)
            (symbol)))
        (number))
      (symbol)
      (fraction
        (group
          (formula
            (number)
            (symbol)
            (number)))
        (number))))
  (parbreak))

====================
typst/frac/math-frac-large
====================

// Test large fraction.
$ x = (-b plus.minus sqrt(b^2 - 4a c))/(2a) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (fraction
        (group
          (formula
            (symbol)
            (letter)
            (field
              (ident)
              (ident))
            (call
              (ident)
              (formula
                (attach
                  (letter)
                  (number))
                (symbol)
                (number)
                (letter)
                (letter)))))
        (group
          (formula
            (number)
            (letter))))))
  (parbreak))

====================
typst/frac/math-binom
====================

// Test binomial.
$ binom(circle, square) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (formula
          (ident)))))
  (parbreak))

====================
typst/frac/math-binom-multiple
====================

// Test multinomial coefficients.
$ binom(n, k_1, k_2, k_3) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (letter)
            (number))))))
  (parbreak))

====================
typst/frac/math-binom-missing-lower
====================

// Error: 3-13 missing argument: lower
$ binom(x^2) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number))))))
  (parbreak))

====================
typst/frac/math-dif
====================

// Test dif.
$ (dif y)/(dif x), dif/x, x/dif, dif/dif \
  frac(dif y, dif x), frac(dif, x), frac(x, dif), frac(dif, dif) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (group
          (formula
            (ident)
            (letter)))
        (group
          (formula
            (ident)
            (letter))))
      (symbol)
      (fraction
        (ident)
        (letter))
      (symbol)
      (fraction
        (letter)
        (ident))
      (symbol)
      (fraction
        (ident)
        (ident))
      (linebreak)
      (call
        (ident)
        (formula
          (ident)
          (letter))
        (formula
          (ident)
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (ident)))
      (symbol)
      (call
        (ident)
        (formula
          (ident))
        (formula
          (ident)))))
  (parbreak))

====================
typst/frac/math-frac-associativity
====================

// Test associativity.
$ 1/2/3 = (1/2)/3 = 1/(2/3) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (fraction
          (number)
          (number))
        (number))
      (symbol)
      (fraction
        (group
          (formula
            (fraction
              (number)
              (number))))
        (number))
      (symbol)
      (fraction
        (number)
        (group
          (formula
            (fraction
              (number)
              (number)))))))
  (parbreak))

====================
typst/frac/math-frac-precedence
====================

// Test precedence.
$ a_1/b_2, 1/f(x), zeta(x)/2, "foo"[|x|]/2 \
  1.2/3.7, 2.3^3.4 \
  🏳️‍🌈[x]/2, f [x]/2, phi [x]/2, 🏳️‍🌈 [x]/2 \
  +[x]/2, 1(x)/2, 2[x]/2 \
  (a)b/2, b(a)[b]/2 \
  n!/2, 5!/2, n !/2, 1/n!, 1/5! $


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (attach
          (letter)
          (number))
        (attach
          (letter)
          (number)))
      (symbol)
      (fraction
        (number)
        (apply
          (letter)
          (formula
            (letter))))
      (symbol)
      (fraction
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (symbol)
      (fraction
        (apply
          (string)
          (formula
            (letter)))
        (number))
      (linebreak)
      (fraction
        (number)
        (number))
      (symbol)
      (attach
        (number)
        (number))
      (linebreak)
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (symbol)
      (letter)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (symbol)
      (ident)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (linebreak)
      (symbol)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (symbol)
      (number)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (symbol)
      (number)
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (linebreak)
      (group
        (formula
          (letter)))
      (fraction
        (letter)
        (number))
      (symbol)
      (apply
        (letter)
        (formula
          (letter)))
      (fraction
        (group
          (formula
            (letter)))
        (number))
      (linebreak)
      (fraction
        (fac
          (letter))
        (number))
      (symbol)
      (fraction
        (fac
          (number))
        (number))
      (symbol)
      (fraction
        (fac
          (letter))
        (number))
      (symbol)
      (fraction
        (number)
        (fac
          (letter)))
      (symbol)
      (fraction
        (number)
        (fac
          (number)))))
  (parbreak))

====================
typst/frac/math-frac-gap
====================

// Test that the gap above and below the fraction rule is correct.
$ sqrt(n^(2/3)) $
--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (attach
            (letter)
            (group
              (formula
                (fraction
                  (number)
                  (number))))))))))

====================
typst/cases/math-cases
====================

$ f(x, y) := cases(
  1 quad &"if" (x dot y)/2 <= 0,
  2 &"if" x divides 2,
  3 &"if" x in NN,
  4 &"else",
) $


--------------------

(source_file
  (math
    (formula
      (apply
        (letter)
        (formula
          (letter)
          (symbol)
          (letter)))
      (shorthand)
      (call
        (ident)
        (formula
          (number)
          (ident)
          (align)
          (string)
          (fraction
            (group
              (formula
                (letter)
                (ident)
                (letter)))
            (number))
          (shorthand)
          (number))
        (formula
          (number)
          (align)
          (string)
          (letter)
          (ident)
          (number))
        (formula
          (number)
          (align)
          (string)
          (letter)
          (ident)
          (ident))
        (formula
          (number)
          (align)
          (string)))))
  (parbreak))

====================
typst/cases/math-cases-gap
====================

#set math.cases(gap: 1em)
$ x = cases(1, 2) $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/cases/math-cases-delim
====================

#set math.cases(delim: sym.angle.l)
$ cases(a, b, c) $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (field
              (field
                (ident)
                (ident))
              (ident)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter)))))
  (parbreak))

====================
typst/cases/math-cases-linebreaks
====================

// Currently linebreaks are equivalent to commas, though this behaviour may
// change in the future.
$ cases(a, b, c) cases(reverse: #true, a \ b \ c) $
--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter)))
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (bool))))
        (formula
          (letter)
          (linebreak)
          (letter)
          (linebreak)
          (letter))))))

====================
typst/symbols/math-symbol-basic
====================

#let sym = symbol("s", ("basic", "s"))
#test($sym.basic$, $#"s"$)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (field
              (ident)
              (ident))))
        (math
          (formula
            (code
              (string)))))))
  (parbreak))

====================
typst/symbols/math-symbol-underscore
====================

#let sym = symbol("s", ("test_underscore", "s"))
// Error: 6-10 unknown symbol modifier
$sym.test_underscore$


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))))))
  (comment)
  (math
    (formula
      (attach
        (field
          (ident)
          (ident))
        (ident))))
  (parbreak))

====================
typst/symbols/math-symbol-dash
====================

#let sym = symbol("s", ("test-dash", "s"))
// Error: 6-10 unknown symbol modifier
$sym.test-dash$


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))))))
  (comment)
  (math
    (formula
      (field
        (ident)
        (ident))
      (symbol)
      (ident)))
  (parbreak))

====================
typst/symbols/math-symbol-double
====================

#let sym = symbol("s", ("test.basic", "s"))
#test($sym.test.basic$, $#"s"$)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (field
              (field
                (ident)
                (ident))
              (ident))))
        (math
          (formula
            (code
              (string)))))))
  (parbreak))

====================
typst/symbols/math-symbol-double-underscore
====================

#let sym = symbol("s", ("one.test_underscore", "s"))
// Error: 10-14 unknown symbol modifier
$sym.one.test_underscore$


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))))))
  (comment)
  (math
    (formula
      (attach
        (field
          (field
            (ident)
            (ident))
          (ident))
        (ident))))
  (parbreak))

====================
typst/symbols/math-symbol-double-dash
====================

#let sym = symbol("s", ("one.test-dash", "s"))
// Error: 10-14 unknown symbol modifier
$sym.one.test-dash$
--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))))))
  (comment)
  (math
    (formula
      (field
        (field
          (ident)
          (ident))
        (ident))
      (symbol)
      (ident))))

====================
typst/call/math-call-non-func
====================

$ pi(a) $
$ pi(a,) $
$ pi(a,b) $
$ pi(a,b,) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))))
  (parbreak))

====================
typst/call/math-call-unclosed-func
====================

#let func(x) = x
// Error: 6-7 unclosed delimiter
$func(a$


--------------------



====================
typst/call/math-call-unclosed-non-func
====================

// Error: 5-6 unclosed delimiter
$sin(x$


--------------------



====================
typst/call/math-call-named-args
====================

#let func1(my: none) = my
#let func2(_my: none) = _my
#let func3(my-body: none) = my-body
#let func4(_my-body: none) = _my-body
#let func5(m: none) = m
$ func1(my: a) $
$ func2(_my: a) $
$ func3(my-body: a) $
$ func4(_my-body: a) $
$ func5(m: a) $
$ func5(m: sigma : f) $
$ func5(m: sigma:pi) $


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (letter))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (ident)
          (symbol)
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)
          (symbol)
          (ident)
          (symbol)
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (ident)
          (symbol)
          (ident)
          (symbol)
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (letter))))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (ident)
            (symbol)
            (letter))))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (ident)
            (symbol)
            (ident))))))
  (parbreak))

====================
typst/call/math-call-named-args-no-expr
====================

#let func(m: none) = m
// Error: 10 expected expression
$ func(m: ) $


--------------------



====================
typst/call/math-call-named-args-duplicate
====================

#let func(my: none) = my
// Error: 15-17 duplicate argument: my
$ func(my: a, my: b) $


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (letter)))
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/call/math-call-named-args-shorthand-clash-1
====================

#let func(m: none) = m
// Error: 18-21 unexpected argument
$func(m: =) func(m:=)$


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (symbol))))
      (call
        (ident)
        (formula
          (letter)
          (shorthand)))))
  (parbreak))

====================
typst/call/math-call-named-args-shorthand-clash-2
====================

#let func(m: none) = m
// Error: 41-45 unexpected argument
$func(m::) func(m: :=) func(m:: =) func(m::=)$


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (symbol))))
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (shorthand))))
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (symbol)
            (symbol))))
      (call
        (ident)
        (formula
          (letter)
          (shorthand)))))
  (parbreak))

====================
typst/call/math-call-named-single-underscore
====================

#let func(x) = x
// Error: 8-9 expected identifier, found underscore
$ func(_: a) $


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (letter)))))
  (parbreak))

====================
typst/call/math-call-named-single-char-error
====================

#let func(m: none) = m
// Error: 8-13 unexpected argument
$ func(m : a) $


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (letter))))))
  (parbreak))

====================
typst/call/math-call-named-args-repr
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args(_a: a)$, "arguments(_a: [a])")
#check($args(_a-b: a)$, "arguments(_a-b: [a])")
#check($args(a-b: a)$, "arguments(a-b: [a])")
#check($args(a-b-c: a)$, "arguments(a-b-c: [a])")
#check($args(a--c: a)$, "arguments(a--c: [a])")
#check($args(a: a-b)$, "arguments(a: sequence([a], [−], [b]))")
#check($args(a-b: a-b)$, "arguments(a-b: sequence([a], [−], [b]))")
#check($args(a-b)$, "arguments(sequence([a], [−], [b]))")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (symbol)
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (letter)
                  (symbol)
                  (letter))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (letter)))))
        (string))))
  (parbreak))

====================
typst/call/math-call-spread-content-error
====================

#let args(..body) = body
// Error: 7-16 cannot spread content
$args(..(a + b))$


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (group
            (formula
              (letter)
              (symbol)
              (letter)))))))
  (parbreak))

====================
typst/call/math-call-spread-multiple-exprs
====================

#let args(..body) = body
// Error: 10 expected comma or semicolon
$args(..a + b)$


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (letter)
          (symbol)
          (letter)))))
  (parbreak))

====================
typst/call/math-call-spread-unexpected-dots
====================

#let args(..body) = body
// Error: 8-10 unexpected dots
$args(#..range(1, 5).chunks(2))$


--------------------



====================
typst/call/math-call-spread-shorthand-clash
====================

#let func(body) = body
$func(...)$


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (math
    (formula
      (call
        (ident)
        (formula
          (shorthand)))))
  (parbreak))

====================
typst/call/math-call-spread-repr
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args(..#range(0, 4).chunks(2))$, "arguments((0, 1), (2, 3))")
#check($#args(range(1, 5).chunks(2))$, "arguments(((1, 2), (3, 4)))")
#check($#args(..range(1, 5).chunks(2))$, "arguments((1, 2), (3, 4))")
#check($args(#(..range(2, 6).chunks(2)))$, "arguments(((2, 3), (4, 5)))")
#let nums = range(0, 4).chunks(2)
#check($args(..nums)$, "arguments((0, 1), (2, 3))")
#check($args(..nums;)$, "arguments(((0, 1), (2, 3)))")
#check($args(..nums, ..nums)$, "arguments((0, 1), (2, 3), (0, 1), (2, 3))")
#check($args(..nums, 4, 5)$, "arguments((0, 1), (2, 3), [4], [5])")
#check($args(..nums, ..#range(4, 6))$, "arguments((0, 1), (2, 3), 4, 5)")
#check($args(..nums, #range(4, 6))$, "arguments((0, 1), (2, 3), (4, 5))")
#check($args(..nums, 1, 2; 3, 4)$, "arguments(((0, 1), (2, 3), [1], [2]), ([3], [4]))")
#check($args(1, 2; ..nums)$, "arguments(([1], [2]), ((0, 1), (2, 3)))")
#check($args(1, 2; 3, 4)$, "arguments(([1], [2]), ([3], [4]))")
#check($args(1, 2; 3, 4; ..#range(5, 7))$, "arguments(([1], [2]), ([3], [4]), (5, 6))")
#check($args(1, 2; 3, 4, ..#range(5, 7))$, "arguments(([1], [2]), ([3], [4], 5, 6))")
#check($args(1, 2; 3, 4, ..#range(5, 7);)$, "arguments(([1], [2]), ([3], [4], 5, 6))")
#check($args(1, 2; 3, 4, ..#range(5, 7),)$, "arguments(([1], [2]), ([3], [4], 5, 6))")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (number)
                          (number)))
                      (ident))
                    (group
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (code
              (call
                (ident)
                (group
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (number)
                          (number)))
                      (ident))
                    (group
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (code
              (call
                (ident)
                (group
                  (elude
                    (call
                      (field
                        (call
                          (ident)
                          (group
                            (number)
                            (number)))
                        (ident))
                      (group
                        (number)))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (code
                  (group
                    (elude
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (number)
                              (number)))
                          (ident))
                        (group
                          (number))))))))))
        (string))))
  (code
    (let
      (ident)
      (call
        (field
          (call
            (ident)
            (group
              (number)
              (number)))
          (ident))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident))
              (formula
                (symbol)
                (symbol)
                (ident)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident))
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident))
              (formula
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (ident))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (symbol)
                (symbol)
                (ident)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (parbreak))

====================
typst/call/math-call-repr
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args(a)$, "arguments([a])")
#check($args(a,)$, "arguments([a])")
#check($args(a,b)$, "arguments([a], [b])")
#check($args(a,b,)$, "arguments([a], [b])")
#check($args(,a,b,,,)$, "arguments([], [a], [b], [], [])")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (parbreak))

====================
typst/call/math-call-2d-non-func
====================

// Error: 6-7 expected content, found array
// Error: 8-9 expected content, found array
$ pi(a;b) $


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))))
  (parbreak))

====================
typst/call/math-call-2d-semicolon-priority
====================

// If the semicolon directly follows a hash expression, it terminates that
// instead of indicating 2d arguments.
$ mat(#"math" ; "wins") $
$ mat(#"code"; "wins") $


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (code
            (string)))
        (formula
          (string)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (code
            (string))
          (string)))))
  (parbreak))

====================
typst/call/math-call-2d-repr
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args(a;b)$, "arguments(([a],), ([b],))")
#check($args(a,b;c)$, "arguments(([a], [b]), ([c],))")
#check($args(a,b;c,d;e,f)$, "arguments(([a], [b]), ([c], [d]), ([e], [f]))")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter))
              (formula
                (letter))
              (formula
                (letter))
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (parbreak))

====================
typst/call/math-call-2d-named-repr
====================

#let args(..body) = (body.pos(), body.named())
#let check(it, r) = test-repr(it.body.text, r)
#check($args(a: b)$, "((), (a: [b]))")
#check($args(1, 2; 3, 4)$, "((([1], [2]), ([3], [4])), (:))")
#check($args(a: b, 1, 2; 3, 4)$, "((([1], [2]), ([3], [4])), (a: [b]))")
#check($args(1, a: b, 2; 3, 4)$, "(([1], ([2],), ([3], [4])), (a: [b]))")
#check($args(1, 2, a: b; 3, 4)$, "(([1], [2], (), ([3], [4])), (a: [b]))")
#check($args(1, 2; a: b, 3, 4)$, "((([1], [2]), ([3], [4])), (a: [b]))")
#check($args(1, 2; 3, a: b, 4)$, "((([1], [2]), [3], ([4],)), (a: [b]))")
#check($args(1, 2; 3, 4, a: b)$, "((([1], [2]), [3], [4]), (a: [b]))")
#check($args(a: b, 1, 2, 3, c: d)$, "(([1], [2], [3]), (a: [b], c: [d]))")
#check($args(1, 2, 3; a: b)$, "((([1], [2], [3]),), (a: [b]))")
#check($args(a-b: a,, e:f;; d)$, "(([], (), ([],), ([d],)), (a-b: [a], e: [f]))")
#check($args(a: b, ..#range(0, 4))$, "((0, 1, 2, 3), (a: [b]))")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (letter))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (number))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (letter))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (letter)
                (symbol)
                (letter))
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (letter)))
              (formula
                (symbol)
                (symbol)
                (code
                  (call
                    (ident)
                    (group
                      (number)
                      (number))))))))
        (string))))
  (parbreak))

====================
typst/call/math-call-2d-escape-repr
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args(a\;b)$, "arguments(sequence([a], [;], [b]))")
#check($args(a\,b;c)$, "arguments((sequence([a], [,], [b]),), ([c],))")
#check($args(b\;c\,d;e)$, "arguments((sequence([b], [;], [c], [,], [d]),), ([e],))")
#check($args(a\: b)$, "arguments(sequence([a], [:], [ ], [b]))")
#check($args(a : b)$, "arguments(sequence([a], [ ], [:], [ ], [b]))")
#check($args(\..a)$, "arguments(sequence([.], [.], [a]))")
#check($args(.. a)$, "arguments(sequence([.], [.], [ ], [a]))")
#check($args(a..b)$, "arguments(sequence([a], [.], [.], [b]))")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (escape)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (escape)
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (escape)
                (letter)
                (escape)
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (escape)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (letter))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (escape)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (symbol)
                (symbol)
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (symbol)
                (symbol)
                (letter)))))
        (string))))
  (parbreak))

====================
typst/call/math-call-2d-repr-structure
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args( a; b; )$, "arguments(([a],), ([b],))")
#check($args(a;  ; c)$, "arguments(([a],), ([],), ([c],))")
#check($args(a b,/**/; b)$, "arguments((sequence([a], [ ], [b]), []), ([b],))")
#check($args(a/**/b, ; b)$, "arguments((sequence([a], [b]), []), ([b],))")
#check($args( ;/**/a/**/b/**/; )$, "arguments(([],), (sequence([a], [b]),))")
#check($args( ; , ; )$, "arguments(([],), ([], []))")
#check($args(/**/; // funky whitespace/trivia
    ,   /**/  ;/**/)$, "arguments(([],), ([], []))")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (letter))
              (comment)
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter)
                (comment)
                (letter))
              (formula
                (letter)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (comment)
              (formula
                (letter)
                (comment)
                (letter))
              (comment))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (comment)
              (comment)
              (comment)
              (comment))))
        (string))))
  (parbreak))

====================
typst/call/math-call-empty-args-non-func
====================

// Trailing commas and empty args introduce blank content in math
$ sin(,x,y,,,) $
// with whitespace/trivia:
$ sin( ,/**/x/**/, , /**/y, ,/**/, ) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))))
  (comment)
  (math
    (formula
      (call
        (ident)
        (comment)
        (formula
          (letter))
        (comment)
        (comment)
        (formula
          (letter))
        (comment))))
  (parbreak))

====================
typst/call/math-call-empty-args-repr
====================

#let args(..body) = body
#let check(it, r) = test-repr(it.body.text, r)
#check($args(,x,,y,,)$, "arguments([], [x], [], [y], [])")
// with whitespace/trivia:
#check($args( ,/**/x/**/, , /**/y, ,/**/, )$, "arguments([], [x], [], [y], [], [])")


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (elude
            (ident))))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (formula
                (letter))
              (formula
                (letter)))))
        (string))))
  (comment)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (call
              (ident)
              (comment)
              (formula
                (letter))
              (comment)
              (comment)
              (formula
                (letter))
              (comment))))
        (string))))
  (parbreak))

====================
typst/call/math-call-value-non-func
====================

$ sin(1) $
// Error: 8-9 expected content, found integer
$ sin(#1) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (formula
          (number)))))
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (code
            (number))))))
  (parbreak))

====================
typst/call/math-call-pass-to-box
====================

// When passing to a function, we lose the italic styling if we wrap the content
// in a non-math function unless it's already nested in some math element (lr,
// attach, etc.)
//
// This is not good, so this test should fail and be updated once it is fixed.
#let id(body) = body
#let bx(body) = box(body, stroke: blue+0.5pt, inset: (x:2pt, y:3pt))
#let eq(body) = math.equation(body)
$
     x y   &&quad     x (y z)   &quad     x y^z  \
  id(x y)  &&quad  id(x (y z))  &quad  id(x y^z) \
  eq(x y)  &&quad  eq(x (y z))  &quad  eq(x y^z) \
  bx(x y)  &&quad  bx(x (y z))  &quad  bx(x y^z) \
$


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (add
              (ident)
              (number
                (unit))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (field
          (ident)
          (ident))
        (group
          (ident)))))
  (math
    (formula
      (letter)
      (letter)
      (align)
      (align)
      (ident)
      (letter)
      (group
        (formula
          (letter)
          (letter)))
      (align)
      (ident)
      (letter)
      (attach
        (letter)
        (letter))
      (linebreak)
      (call
        (ident)
        (formula
          (letter)
          (letter)))
      (align)
      (align)
      (ident)
      (call
        (ident)
        (formula
          (letter)
          (group
            (formula
              (letter)
              (letter)))))
      (align)
      (ident)
      (call
        (ident)
        (formula
          (letter)
          (attach
            (letter)
            (letter))))
      (linebreak)
      (call
        (ident)
        (formula
          (letter)
          (letter)))
      (align)
      (align)
      (ident)
      (call
        (ident)
        (formula
          (letter)
          (group
            (formula
              (letter)
              (letter)))))
      (align)
      (ident)
      (call
        (ident)
        (formula
          (letter)
          (attach
            (letter)
            (letter))))
      (linebreak)
      (call
        (ident)
        (formula
          (letter)
          (letter)))
      (align)
      (align)
      (ident)
      (call
        (ident)
        (formula
          (letter)
          (group
            (formula
              (letter)
              (letter)))))
      (align)
      (ident)
      (call
        (ident)
        (formula
          (letter)
          (attach
            (letter)
            (letter))))
      (linebreak)))
  (parbreak))

====================
typst/call/math-call-unknown-var-hint
====================

// Error: 4-6 unknown variable: ab
// Hint: 4-6 if you meant to display multiple letters as is, try adding spaces between each letter: `a b`
// Hint: 4-6 or if you meant to display this as text, try placing it in quotes: `"ab"`
$ 5ab $


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (math
    (formula
      (number)
      (ident)))
  (parbreak))

====================
typst/call/issue-3774-math-call-empty-2d-args
====================

$ mat(;,) $
// Add some whitespace/trivia:
$ mat(; ,) $
$ mat(;/**/,) $
$ mat(;
,) $
$ mat(;// line comment
,) $
$ mat(
  1, , ;
   ,1, ;
   , ,1;
) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident))))
  (comment)
  (math
    (formula
      (call
        (ident))))
  (math
    (formula
      (call
        (ident)
        (comment))))
  (math
    (formula
      (call
        (ident))))
  (math
    (formula
      (call
        (ident)
        (comment))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/call/issue-2885-math-var-only-in-global
====================

// Error: 7-10 unknown variable: rgb
// Hint: 7-10 `rgb` is not available directly in math, try adding a hash before it: `#rgb`
$text(rgb(0, 0, 0), "foo")$
--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (number))
            (formula
              (number))
            (formula
              (number))))
        (formula
          (string))))))

====================
typst/size/math-size
====================

// Test forcing math size
$a/b, display(a/b), display(a)/display(b), inline(a/b), script(a/b), sscript(a/b) \
 mono(script(a/b)), script(mono(a/b))\
 script(a^b, cramped: #true), script(a^b, cramped: #false)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (letter)
        (letter))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (letter))))
      (symbol)
      (fraction
        (call
          (ident)
          (formula
            (letter)))
        (call
          (ident)
          (formula
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (letter))))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (letter))))
      (linebreak)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (fraction
                (letter)
                (letter))))))
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (fraction
                (letter)
                (letter))))))
      (linebreak)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (letter)))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))
      (symbol)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (letter)))
        (tagged
          (ident)
          (formula
            (code
              (bool)))))))
  (parbreak))

====================
typst/size/issue-3658-math-size
====================

$ #rect[$1/2$] $
$#rect[$1/2$]$
--------------------

(source_file
  (math
    (formula
      (code
        (call
          (ident)
          (content
            (math
              (formula
                (fraction
                  (number)
                  (number)))))))))
  (math
    (formula
      (code
        (call
          (ident)
          (content
            (math
              (formula
                (fraction
                  (number)
                  (number))))))))))

====================
typst/op/math-op-predefined
====================

// Test predefined.
$ max_(1<=n<=m) n $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (number)
            (shorthand)
            (letter)
            (shorthand)
            (letter))))
      (letter)))
  (parbreak))

====================
typst/op/math-op-call
====================

// With or without parens.
$  &sin x + log_2 x \
 = &sin(x) + log_2(x) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (align)
      (ident)
      (letter)
      (symbol)
      (attach
        (ident)
        (number))
      (letter)
      (linebreak)
      (symbol)
      (align)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (attach
        (ident)
        (number))
      (group
        (formula
          (letter)))))
  (parbreak))

====================
typst/op/math-op-scripts-vs-limits
====================

// Test scripts vs limits.
#set page(width: auto)
#set text(font: "New Computer Modern")
Discuss $lim_(n->oo) 1/n$ now.
$ lim_(n->infinity) 1/n = 0 $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (shorthand)
            (ident))))
      (fraction
        (number)
        (letter))))
  (text)
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (shorthand)
            (ident))))
      (fraction
        (number)
        (letter))
      (symbol)
      (number)))
  (parbreak))

====================
typst/op/math-op-custom
====================

// Test custom operator.
$ op("myop", limits: #false)_(x:=1) x \
  op("myop", limits: #true)_(x:=1) x $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (string))
          (tagged
            (ident)
            (formula
              (code
                (bool)))))
        (group
          (formula
            (letter)
            (shorthand)
            (number))))
      (letter)
      (linebreak)
      (attach
        (call
          (ident)
          (formula
            (string))
          (tagged
            (ident)
            (formula
              (code
                (bool)))))
        (group
          (formula
            (letter)
            (shorthand)
            (number))))
      (letter)))
  (parbreak))

====================
typst/op/math-op-styled
====================

// Test styled operator.
$ bold(op("bold", limits: #true))_x y $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (string))
              (tagged
                (ident)
                (formula
                  (code
                    (bool)))))))
        (letter))
      (letter)))
  (parbreak))

====================
typst/op/math-non-math-content
====================

// With non-text content
$ op(#underline[ul]) a $
--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (code
            (call
              (ident)
              (content
                (text))))))
      (letter))))

====================
typst/text/math-font-fallback
====================

// Test font fallback.
$ よ and 🏳️‍🌈 $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (ident)
      (symbol)
      (symbol)
      (symbol)
      (symbol)))
  (parbreak))

====================
typst/text/math-text-color
====================

// Test text properties.
$text(#red, "time"^2) + sqrt("place")$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (code
            (ident)))
        (formula
          (attach
            (string)
            (number))))
      (symbol)
      (call
        (ident)
        (formula
          (string)))))
  (parbreak))

====================
typst/text/math-font-features
====================

$ nothing $
$ "hi ∅ hey" $
$ sum_(i in NN) 1 + i $
#show math.equation: set text(features: ("cv01",), fallback: false)
$ nothing $
$ "hi ∅ hey" $
$ sum_(i in NN) 1 + i $


--------------------

(source_file
  (math
    (formula
      (ident)))
  (math
    (formula
      (string)))
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (ident))))
      (number)
      (symbol)
      (letter)))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (bool)))))))
  (math
    (formula
      (ident)))
  (math
    (formula
      (string)))
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (ident))))
      (number)
      (symbol)
      (letter)))
  (parbreak))

====================
typst/text/math-optical-size-nested-scripts
====================

// Test transition from script to scriptscript.
#[
#set text(size:20pt)
$  e^(e^(e^(e))) $
]
A large number: $e^(e^(e^(e)))$.


--------------------

(source_file
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (math
        (formula
          (attach
            (letter)
            (group
              (formula
                (attach
                  (letter)
                  (group
                    (formula
                      (attach
                        (letter)
                        (group
                          (formula
                            (letter))))))))))))))
  (text)
  (math
    (formula
      (attach
        (letter)
        (group
          (formula
            (attach
              (letter)
              (group
                (formula
                  (attach
                    (letter)
                    (group
                      (formula
                        (letter))))))))))))
  (text)
  (parbreak))

====================
typst/text/math-optical-size-primes
====================

//  Test prime/double prime via scriptsize
#let prime = [ \u{2032} ]
#let dprime = [ \u{2033} ]
#let tprime = [ \u{2034} ]
$ y^dprime-2y^prime + y = 0 $
$y^dprime-2y^prime + y = 0$
$ y^tprime_3 + g^(prime 2) $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (content
        (text
          (escape)))))
  (code
    (let
      (ident)
      (content
        (text
          (escape)))))
  (code
    (let
      (ident)
      (content
        (text
          (escape)))))
  (math
    (formula
      (attach
        (letter)
        (ident))
      (symbol)
      (number)
      (attach
        (letter)
        (ident))
      (symbol)
      (letter)
      (symbol)
      (number)))
  (math
    (formula
      (attach
        (letter)
        (ident))
      (symbol)
      (number)
      (attach
        (letter)
        (ident))
      (symbol)
      (letter)
      (symbol)
      (number)))
  (math
    (formula
      (attach
        (letter)
        (ident)
        (number))
      (symbol)
      (attach
        (letter)
        (group
          (formula
            (ident)
            (number))))))
  (parbreak))

====================
typst/text/math-optical-size-prime-large-operator
====================

// Test prime superscript on large symbol
$ scripts(sum_(k in NN))^prime 1/k^2 $
$sum_(k in NN)^prime 1/k^2$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (formula
            (attach
              (ident)
              (group
                (formula
                  (letter)
                  (ident)
                  (ident))))))
        (ident))
      (fraction
        (number)
        (attach
          (letter)
          (number)))))
  (math
    (formula
      (attach
        (ident)
        (group
          (formula
            (letter)
            (ident)
            (ident)))
        (ident))
      (fraction
        (number)
        (attach
          (letter)
          (number)))))
  (parbreak))

====================
typst/text/math-optical-size-frac-script-script
====================

// Test script-script in a fraction.
$ 1/(x^A) $
#[#set text(size:18pt); $1/(x^A)$] vs. #[#set text(size:14pt); $x^A$]
--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (number)
        (group
          (formula
            (attach
              (letter)
              (letter)))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (math
        (formula
          (fraction
            (number)
            (group
              (formula
                (attach
                  (letter)
                  (letter)))))))))
  (text)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (math
        (formula
          (attach
            (letter)
            (letter)))))))

====================
typst/underover/math-underover-brace
====================

// Test braces.
$ x = underbrace(
  1 + 2 + ... + 5,
  underbrace("numbers", x + y)
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (number)
          (symbol)
          (number)
          (symbol)
          (shorthand)
          (symbol)
          (number))
        (formula
          (call
            (ident)
            (formula
              (string))
            (formula
              (letter)
              (symbol)
              (letter)))))))
  (parbreak))

====================
typst/underover/math-underover-line-bracket
====================

// Test lines and brackets.
$ x = overbracket(
  overline(underline(x + y)),
  1 + 2 + ... + 5,
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (letter)
                  (symbol)
                  (letter))))))
        (formula
          (number)
          (symbol)
          (number)
          (symbol)
          (shorthand)
          (symbol)
          (number)))))
  (parbreak))

====================
typst/underover/math-underover-brackets
====================

// Test brackets.
$ underbracket([1, 2/3], "relevant stuff")
          arrow.l.r.double.long
  overbracket([4/5,6], "irrelevant stuff") $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (group
            (formula
              (number)
              (symbol)
              (fraction
                (number)
                (number)))))
        (formula
          (string)))
      (field
        (field
          (field
            (field
              (ident)
              (ident))
            (ident))
          (ident))
        (ident))
      (call
        (ident)
        (formula
          (group
            (formula
              (fraction
                (number)
                (number))
              (symbol)
              (number))))
        (formula
          (string)))))
  (parbreak))

====================
typst/underover/math-underover-parens
====================

// Test parentheses.
$ overparen(
  underparen(x + y, "long comment"),
  1 + 2 + ... + 5  
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (letter)
              (symbol)
              (letter))
            (formula
              (string))))
        (formula
          (number)
          (symbol)
          (number)
          (symbol)
          (shorthand)
          (symbol)
          (number)))))
  (parbreak))

====================
typst/underover/math-underover-shells
====================

// Test tortoise shell brackets.
$ undershell(
  1 + overshell(2 + ..., x + y),
  "all stuff"
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (number)
          (symbol)
          (call
            (ident)
            (formula
              (number)
              (symbol)
              (shorthand))
            (formula
              (letter)
              (symbol)
              (letter))))
        (formula
          (string)))))
  (parbreak))

====================
typst/underover/math-underover-line-subscript
====================

// Test effect of lines on subscripts.
$A_2 != overline(A)_2 != underline(A)_2 != underline(overline(A))_2 \
 V_y != overline(V)_y != underline(V)_y != underline(overline(V))_y \
 W_l != overline(W)_l != underline(W)_l != underline(overline(W))_l$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (letter)
        (number))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (number))
      (linebreak)
      (attach
        (letter)
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (letter))
      (linebreak)
      (attach
        (letter)
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (letter))))
  (parbreak))

====================
typst/underover/math-underover-line-superscript
====================

// Test effect of lines on superscripts.
$J^b != overline(J)^b != underline(J)^b != underline(overline(J))^b \
 K^3 != overline(K)^3 != underline(K)^3 != underline(overline(K))^3 \
 T^i != overline(T)^i != underline(T)^i != underline(overline(T))^i$


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (letter)
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (letter))
      (linebreak)
      (attach
        (letter)
        (number))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (number))
      (linebreak)
      (attach
        (letter)
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (letter)))
        (letter))
      (shorthand)
      (attach
        (call
          (ident)
          (formula
            (call
              (ident)
              (formula
                (letter)))))
        (letter))))
  (parbreak))

====================
typst/underover/math-underover-multiline-annotation
====================

// Test that multiline annotations do not change the baseline.
$ S = overbrace(beta (alpha) S I, "one line")
    - overbrace(mu (N), "two" \  "line") $
$ S = underbrace(beta (alpha) S I, "one line")
    - underbrace(mu (N), "two" \  "line") $
--------------------

(source_file
  (comment)
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (ident)
          (group
            (formula
              (ident)))
          (letter)
          (letter))
        (formula
          (string)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)
          (group
            (formula
              (letter))))
        (formula
          (string)
          (linebreak)
          (string)))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (ident)
          (group
            (formula
              (ident)))
          (letter)
          (letter))
        (formula
          (string)))
      (symbol)
      (call
        (ident)
        (formula
          (ident)
          (group
            (formula
              (letter))))
        (formula
          (string)
          (linebreak)
          (string))))))

====================
typst/mat/math-mat-semicolon
====================

// Test semicolon syntax.
#set align(center)
$mat() dot
 mat(;) dot
 mat(1, 2) dot
 mat(1, 2;) \
 mat(1; 2) dot
 mat(1, 2; 3, 4) dot
 mat(1 + &2, 1/2; &3, 4)$


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (math
    (formula
      (call
        (ident))
      (ident)
      (call
        (ident))
      (ident)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))
      (ident)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))
      (linebreak)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number)))
      (ident)
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))
      (ident)
      (call
        (ident)
        (formula
          (number)
          (symbol)
          (align)
          (number))
        (formula
          (fraction
            (number)
            (number)))
        (formula
          (align)
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-sparse
====================

// Test sparse matrix.
$ mat(
  1, 2, ..., 10;
  2, 2, ..., 10;
  dots.v, dots.v, dots.down, dots.v;
  10, 10, ..., 10;
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (shorthand))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (shorthand))
        (formula
          (number))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (shorthand))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-baseline
====================

// Test baseline alignment.
$ mat(
  a, b^2;
  sum_(x \ y) x, a^(1/2);
  zeta, alpha;
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (ident)
            (group
              (formula
                (letter)
                (linebreak)
                (letter))))
          (letter))
        (formula
          (attach
            (letter)
            (group
              (formula
                (fraction
                  (number)
                  (number))))))
        (formula
          (ident))
        (formula
          (ident)))))
  (parbreak))

====================
typst/mat/math-mat-delim-set
====================

// Test alternative delimiter with set rule.
#set math.mat(delim: "[")
$ mat(1, 2; 3, 4) $
$ a + mat(delim: #none, 1, 2; 3, 4) + b $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (letter)
      (symbol)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (none))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))
      (symbol)
      (letter)))
  (parbreak))

====================
typst/mat/math-mat-delim-direct
====================

// Test alternative math delimiter directly in call.
#set align(center)
#grid(
  columns: 3,
  gutter: 10pt,

  $ mat(1, 2, delim: "[") $,
  $ mat(1, 2; delim: "[") $,
  $ mat(delim: "[", 1, 2) $,

  $ mat(1; 2; delim: "[") $,
  $ mat(1; delim: "[", 2) $,
  $ mat(delim: "[", 1; 2) $,

  $ mat(1, 2; delim: "[", 3, 4) $,
  $ mat(delim: "[", 1, 2; 3, 4) $,
  $ mat(1, 2; 3, 4; delim: "[") $,
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (string))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (string))))))
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (string)))
              (formula
                (number))
              (formula
                (number)))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (string))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (string)))
              (formula
                (number)))))
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (string)))
              (formula
                (number))
              (formula
                (number)))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (string)))
              (formula
                (number))
              (formula
                (number)))))
        (math
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (string)))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number)))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (string)))))))))
  (parbreak))

====================
typst/mat/math-mat-spread
====================

// Test argument spreading in matrix.
$ mat(..#range(1, 5).chunks(2))
  mat(#(..range(2).map(_ => range(2)))) $

#let nums = ((1,) * 5).intersperse(0).chunks(3)
$ mat(..nums, delim: "[") $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (code
            (call
              (field
                (call
                  (ident)
                  (group
                    (number)
                    (number)))
                (ident))
              (group
                (number))))))
      (call
        (ident)
        (formula
          (code
            (group
              (elude
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (number)))
                    (ident))
                  (group
                    (lambda
                      (ident)
                      (call
                        (ident)
                        (group
                          (number)))))))))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (field
          (call
            (field
              (group
                (mul
                  (group
                    (number))
                  (number)))
              (ident))
            (group
              (number)))
          (ident))
        (group
          (number)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident))
        (tagged
          (ident)
          (formula
            (string))))))
  (parbreak))

====================
typst/mat/math-mat-spread-1d
====================

$ mat(..#range(1, 5) ; 1, ..#range(2, 5))
  mat(..#range(1, 3), ..#range(3, 5) ; ..#range(1, 4), 4) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (code
            (call
              (ident)
              (group
                (number)
                (number)))))
        (formula
          (number))
        (formula
          (symbol)
          (symbol)
          (code
            (call
              (ident)
              (group
                (number)
                (number))))))
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (code
            (call
              (ident)
              (group
                (number)
                (number)))))
        (formula
          (symbol)
          (symbol)
          (code
            (call
              (ident)
              (group
                (number)
                (number)))))
        (formula
          (symbol)
          (symbol)
          (code
            (call
              (ident)
              (group
                (number)
                (number)))))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-spread-2d
====================

#let nums = range(0, 2).map(i => (i, i+1))
$ mat(..nums, delim: "|",)
  mat(..nums; delim: "|",) $
$ mat(..nums) mat(..nums;) \
  mat(..nums;,) mat(..nums,) $


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (field
          (call
            (ident)
            (group
              (number)
              (number)))
          (ident))
        (group
          (lambda
            (ident)
            (group
              (ident)
              (add
                (ident)
                (number))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident))
        (tagged
          (ident)
          (formula
            (string))))
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident))
        (tagged
          (ident)
          (formula
            (string))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident)))
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident)))
      (linebreak)
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident)))
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident)))))
  (parbreak))

====================
typst/mat/math-mat-spread-expected-array-error
====================

#let nums = range(0, 2).map(i => (i, i+1))
// Error: 15-16 expected array, found content
$ mat(..nums, 0, 1) $


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (field
          (call
            (ident)
            (group
              (number)
              (number)))
          (ident))
        (group
          (lambda
            (ident)
            (group
              (ident)
              (add
                (ident)
                (number))))))))
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (ident))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-gap
====================

#set math.mat(gap: 1em)
$ mat(1, 2; 3, 4) $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-gaps
====================

#set math.mat(row-gap: 1em, column-gap: 2em)
$ mat(1, 2; 3, 4) $
$ mat(column-gap: #1em, 1, 2; 3, 4)
  mat(row-gap: #2em, 1, 2; 3, 4) $


--------------------

(source_file
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)
          (symbol)
          (ident)
          (symbol)
          (code
            (number
              (unit))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))
      (call
        (ident)
        (formula
          (ident)
          (symbol)
          (ident)
          (symbol)
          (code
            (number
              (unit))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-augment
====================

// Test matrix line drawing (augmentation).
#grid(
  columns: 2,
  gutter: 10pt,

  $ mat(10, 2, 3, 4; 5, 6, 7, 8; augment: #3) $,
  $ mat(10, 2, 3, 4; 5, 6, 7, 8; augment: #(-1)) $,
  $ mat(100, 2, 3; 4, 5, 6; 7, 8, 9; augment: #(hline: 2)) $,
  $ mat(100, 2, 3; 4, 5, 6; 7, 8, 9; augment: #(hline: -1)) $,
  $ mat(100, 2, 3; 4, 5, 6; 7, 8, 9; augment: #(hline: 1, vline: 1)) $,
  $ mat(100, 2, 3; 4, 5, 6; 7, 8, 9; augment: #(hline: -2, vline: -2)) $,
  $ mat(100, 2, 3; 4, 5, 6; 7, 8, 9; augment: #(vline: 2, stroke: 1pt + blue)) $,
  $ mat(100, 2, 3; 4, 5, 6; 7, 8, 9; augment: #(vline: -1, stroke: 1pt + blue)) $,
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (number)))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (sign
                        (number)))))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (tagged
                        (ident)
                        (number)))))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (tagged
                        (ident)
                        (sign
                          (number))))))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (tagged
                        (ident)
                        (number))
                      (tagged
                        (ident)
                        (number)))))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (tagged
                        (ident)
                        (sign
                          (number)))
                      (tagged
                        (ident)
                        (sign
                          (number))))))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (tagged
                        (ident)
                        (number))
                      (tagged
                        (ident)
                        (add
                          (number
                            (unit))
                          (ident))))))))))
        (math
          (formula
            (call
              (ident)
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (formula
                (number))
              (tagged
                (ident)
                (formula
                  (code
                    (group
                      (tagged
                        (ident)
                        (sign
                          (number)))
                      (tagged
                        (ident)
                        (add
                          (number
                            (unit))
                          (ident)))))))))))))
  (parbreak))

====================
typst/mat/math-mat-augment-set
====================

// Test using matrix line drawing with a set rule.
#set math.mat(augment: (hline: 2, vline: 1, stroke: 2pt + green))
$ mat(1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 1) $

#set math.mat(augment: 2)
$ mat(1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 1) $

#set math.mat(augment: none)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (add
                  (number
                    (unit))
                  (ident)))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (none))))))
  (parbreak))

====================
typst/mat/math-mat-augment-line-out-of-bounds
====================

// Error: 3-37 cannot draw a vertical line after column 3 of a matrix with 3 columns
$ mat(1, 0, 0; 0, 1, 1; augment: #3) $,


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (tagged
          (ident)
          (formula
            (code
              (number)))))))
  (text)
  (parbreak))

====================
typst/mat/math-mat-align
====================

$ mat(-1, 1, 1; 1, -1, 1; 1, 1, -1; align: #left) $
$ mat(-1, 1, 1; 1, -1, 1; 1, 1, -1; align: #center) $
$ mat(-1, 1, 1; 1, -1, 1; 1, 1, -1; align: #right) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (tagged
          (ident)
          (formula
            (code
              (ident)))))))
  (parbreak))

====================
typst/mat/math-mat-align-explicit-alternating
====================

// Test alternating explicit alignment in a matrix.
$ mat(
  "a" & "a a a" & "a a";
  "a a" & "a a" & "a";
  "a a a" & "a" & "a a a";
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (string)
          (align)
          (string)
          (align)
          (string))
        (formula
          (string)
          (align)
          (string)
          (align)
          (string))
        (formula
          (string)
          (align)
          (string)
          (align)
          (string)))))
  (parbreak))

====================
typst/mat/math-mat-align-implicit
====================

// Test alignment in a matrix.
$ mat(
  "a", "a a a", "a a";
  "a a", "a a", "a";
  "a a a", "a", "a a a";
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (string))
        (formula
          (string))
        (formula
          (string))
        (formula
          (string))
        (formula
          (string))
        (formula
          (string))
        (formula
          (string))
        (formula
          (string))
        (formula
          (string)))))
  (parbreak))

====================
typst/mat/math-mat-align-explicit-left
====================

// Test explicit left alignment in a matrix.
$ mat(
  &"a", &"a a a", &"a a";
  &"a a", &"a a", &"a";
  &"a a a", &"a", &"a a a";
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string))
        (formula
          (align)
          (string)))))
  (parbreak))

====================
typst/mat/math-mat-align-explicit-right
====================

// Test explicit right alignment in a matrix.
$ mat(
  "a"&, "a a a"&, "a a"&;
  "a a"&, "a a"&, "a"&;
  "a a a"&, "a"&, "a a a"&;
) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align))
        (formula
          (string)
          (align)))))
  (parbreak))

====================
typst/mat/math-mat-align-explicit-mixed
====================

// Test explicit alignment in some columns with align parameter in a matrix.
#let data = (
  ($&18&&.02$, $1$, $+1$),
  ($-&9&&.3$, $-1$, $-&21$),
  ($&&&.011$, $1$, $&0$)
)
$ #math.mat(align: left, ..data) $
$ #math.mat(align: center, ..data) $
$ #math.mat(align: right, ..data) $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (group
          (math
            (formula
              (align)
              (number)
              (align)
              (align)
              (symbol)
              (number)))
          (math
            (formula
              (number)))
          (math
            (formula
              (symbol)
              (number))))
        (group
          (math
            (formula
              (symbol)
              (align)
              (number)
              (align)
              (align)
              (symbol)
              (number)))
          (math
            (formula
              (symbol)
              (number)))
          (math
            (formula
              (symbol)
              (align)
              (number))))
        (group
          (math
            (formula
              (align)
              (align)
              (align)
              (symbol)
              (number)))
          (math
            (formula
              (number)))
          (math
            (formula
              (align)
              (number)))))))
  (math
    (formula
      (code
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (elude
              (ident)))))))
  (math
    (formula
      (code
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (elude
              (ident)))))))
  (math
    (formula
      (code
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (elude
              (ident)))))))
  (parbreak))

====================
typst/mat/math-mat-align-complex
====================

// Test #460 equations.
#let stop = {
  math.class("punctuation",$.$)
}
$ mat(&a+b,c;&d, e) $
$ mat(&a+b&,c;&d&, e) $
$ mat(&&&a+b,c;&&&d, e) $
$ mat(stop &a+b&stop,c;...stop stop&d&...stop stop, e) $


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (block
        (call
          (field
            (ident)
            (ident))
          (group
            (string)
            (math
              (formula
                (symbol))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (align)
          (letter)
          (symbol)
          (letter))
        (formula
          (letter))
        (formula
          (align)
          (letter))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (align)
          (letter)
          (symbol)
          (letter)
          (align))
        (formula
          (letter))
        (formula
          (align)
          (letter)
          (align))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (align)
          (align)
          (align)
          (letter)
          (symbol)
          (letter))
        (formula
          (letter))
        (formula
          (align)
          (align)
          (align)
          (letter))
        (formula
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)
          (align)
          (letter)
          (symbol)
          (letter)
          (align)
          (ident))
        (formula
          (letter))
        (formula
          (shorthand)
          (ident)
          (ident)
          (align)
          (letter)
          (align)
          (shorthand)
          (ident)
          (ident))
        (formula
          (letter)))))
  (parbreak))

====================
typst/mat/math-mat-align-signed-numbers
====================

// Test #454 equations.
$ mat(-1, 1, 1; 1, -1, 1; 1, 1, -1) $
$ mat(-1&, 1&, 1&; 1&, -1&, 1&; 1&, 1&, -1&) $
$ mat(-1&, 1&, 1&; 1, -1, 1; 1, 1, -1) $
$ mat(&-1, &1, &1; 1, -1, 1; 1, 1, -1) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (symbol)
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (symbol)
          (number)
          (align)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (number)
          (align))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (align)
          (symbol)
          (number))
        (formula
          (align)
          (number))
        (formula
          (align)
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (symbol)
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-bad-comma
====================

// This error message is bad.
// Error: 13-14 expected array, found content
$ mat(1, 2; 3, 4, delim: "[") $,


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (tagged
          (ident)
          (formula
            (string))))))
  (text)
  (parbreak))

====================
typst/mat/issue-852-mat-type
====================

$ mat(B, A B) $
$ mat(B, A B, dots) $
$ mat(B, A B, dots;) $
$ mat(#1, #(foo: "bar")) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)
          (letter)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)
          (letter))
        (formula
          (ident)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)
          (letter))
        (formula
          (ident)))))
  (math
    (formula
      (call
        (ident)
        (formula
          (code
            (number)))
        (formula
          (code
            (group
              (tagged
                (ident)
                (string))))))))
  (parbreak))

====================
typst/mat/issue-2268-mat-augment-color
====================

// The augment line should be of the same color as the text
#set text(
  font: "New Computer Modern",
  lang: "en",
  fill: yellow,
)

$mat(augment: #1, M, v) arrow.r.squiggly mat(augment: #1, R, b)$


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (number))))
        (formula
          (letter))
        (formula
          (letter)))
      (field
        (field
          (ident)
          (ident))
        (ident))
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (number))))
        (formula
          (letter))
        (formula
          (letter)))))
  (parbreak))

====================
typst/mat/math-mat-delims
====================

$ mat(delim: #none, 1, 2; 3, 4) $

$ mat(delim: "(", 1, 2; 3, 4) $
$ mat(delim: \(, 1, 2; 3, 4) $
$ mat(delim: paren.l, 1, 2; 3, 4) $

$ mat(delim: "[", 1, 2; 3, 4) $
$ mat(delim: \[, 1, 2; 3, 4) $
$ mat(delim: bracket.l, 1, 2; 3, 4) $

$ mat(delim: "⟦", 1, 2; 3, 4) $
$ mat(delim: bracket.double.l, 1, 2; 3, 4) $

$ mat(delim: "{", 1, 2; 3, 4) $
$ mat(delim: \{, 1, 2; 3, 4) $
$ mat(delim: brace.l, 1, 2; 3, 4) $

$ mat(delim: "|", 1, 2; 3, 4) $
$ mat(delim: \|, 1, 2; 3, 4) $
$ mat(delim: bar.v, 1, 2; 3, 4) $

$ mat(delim: "‖", 1, 2; 3, 4) $
$ mat(delim: bar.v.double, 1, 2; 3, 4) $

$ mat(delim: "⟨", 1, 2; 3, 4) $
$ mat(delim: angle.l, 1, 2; 3, 4) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (none))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (field
                (ident)
                (ident))
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (field
                (ident)
                (ident))
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-delims-inverted
====================

$ mat(delim: ")", 1, 2; 3, 4) $
$ mat(delim: \), 1, 2; 3, 4) $
$ mat(delim: paren.r, 1, 2; 3, 4) $

$ mat(delim: "]", 1, 2; 3, 4) $
$ mat(delim: \], 1, 2; 3, 4) $
$ mat(delim: bracket.r, 1, 2; 3, 4) $

$ mat(delim: "⟧", 1, 2; 3, 4) $
$ mat(delim: bracket.double.r, 1, 2; 3, 4) $

$ mat(delim: "}", 1, 2; 3, 4) $
$ mat(delim: \}, 1, 2; 3, 4) $
$ mat(delim: brace.r, 1, 2; 3, 4) $

$ mat(delim: "⟩", 1, 2; 3, 4) $
$ mat(delim: angle.r, 1, 2; 3, 4) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (field
                (ident)
                (ident))
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (escape)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (string)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (field
              (ident)
              (ident))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-delims-pair
====================

$ mat(delim: #(none, "["), 1, 2; 3, 4) $
$ mat(delim: #(sym.angle.r, sym.bracket.double.r), 1, 2; 3, 4) $


--------------------

(source_file
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (group
                (none)
                (string)))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (math
    (formula
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (group
                (field
                  (field
                    (ident)
                    (ident))
                  (ident))
                (field
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (ident))))))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number))
        (formula
          (number)))))
  (parbreak))

====================
typst/mat/math-mat-linebreaks
====================

// Unlike cases and vectors, linebreaks are discarded in matrices. This
// behaviour may change in the future.
$ mat(a; b; c) mat(a \ b \ c) $


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter)))
      (call
        (ident)
        (formula
          (letter)
          (linebreak)
          (letter)
          (linebreak)
          (letter)))))
  (parbreak))

====================
typst/mat/issue-1617-mat-align
====================

#set page(width: auto)
$ mat(a, b; c, d) mat(x; y) $

$ x mat(a; c) + y mat(b; d)
  = mat(a x+b y; c x+d y) $

$ mat(
    -d_0, lambda_0, 0, 0, dots;
    mu_1, -d_1, lambda_1, 0, dots;
    0, mu_2, -d_2, lambda_2, dots;
    dots.v, dots.v, dots.v, dots.v, dots.down;
  )
  mat(p_0; p_1; p_2; dots.v) $
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter))
        (formula
          (letter)))
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))))
  (parbreak)
  (math
    (formula
      (letter)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))
      (symbol)
      (letter)
      (call
        (ident)
        (formula
          (letter))
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (letter)
          (symbol)
          (letter)
          (letter))
        (formula
          (letter)
          (letter)
          (symbol)
          (letter)
          (letter)))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (ident)
            (number)))
        (formula
          (number))
        (formula
          (number))
        (formula
          (ident))
        (formula
          (attach
            (ident)
            (number)))
        (formula
          (symbol)
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (ident)
            (number)))
        (formula
          (number))
        (formula
          (ident))
        (formula
          (number))
        (formula
          (attach
            (ident)
            (number)))
        (formula
          (symbol)
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (ident)
            (number)))
        (formula
          (ident))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident)))
        (formula
          (field
            (ident)
            (ident))))
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (letter)
            (number)))
        (formula
          (attach
            (letter)
            (number)))
        (formula
          (field
            (ident)
            (ident)))))))

====================
typst/delimited/math-lr-matching
====================

// Test automatic matching.
#set page(width:122pt)
$ (a) + {b/2} + abs(a)/2 + (b) $
$f(x/2) < zeta(c^2 + abs(a + b/2))$


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (math
    (formula
      (group
        (formula
          (letter)))
      (symbol)
      (group
        (formula
          (fraction
            (letter)
            (number))))
      (symbol)
      (fraction
        (call
          (ident)
          (formula
            (letter)))
        (number))
      (symbol)
      (group
        (formula
          (letter)))))
  (math
    (formula
      (apply
        (letter)
        (formula
          (fraction
            (letter)
            (number))))
      (symbol)
      (call
        (ident)
        (formula
          (attach
            (letter)
            (number))
          (symbol)
          (call
            (ident)
            (formula
              (letter)
              (symbol)
              (fraction
                (letter)
                (number))))))))
  (parbreak))

====================
typst/delimited/math-lr-unmatched
====================

// Test unmatched.
$[1,2[ = [1,2) != zeta\(x/2\) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (group
        (formula
          (number)
          (symbol)
          (number)
          (group
            (formula
              (symbol)
              (group
                (formula
                  (number)
                  (symbol)
                  (number)))
              (shorthand)
              (ident)
              (escape)
              (fraction
                (letter)
                (number))
              (escape)))))))
  (parbreak))

====================
typst/delimited/math-lr-call
====================

// Test manual matching.
$ [|a/b|] != lr(|]a/b|]) != [a/b) $
$ lr(| ]1,2\[ + 1/2|) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (group
        (formula
          (fraction
            (letter)
            (letter))))
      (shorthand)
      (call
        (ident)
        (formula
          (symbol)
          (fraction
            (letter)
            (letter))
          (symbol)))
      (shorthand)
      (group
        (formula
          (fraction
            (letter)
            (letter))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (symbol)
          (number))
        (formula
          (number)
          (escape)
          (symbol)
          (fraction
            (number)
            (number))
          (symbol)))))
  (parbreak))

====================
typst/delimited/math-lr-fences
====================

// Test fence confusion.
$ |x + |y| + z/a| \
  lr(|x + |y| + z/a|) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (symbol)
      (letter)
      (symbol)
      (symbol)
      (letter)
      (symbol)
      (symbol)
      (fraction
        (letter)
        (letter))
      (symbol)
      (linebreak)
      (call
        (ident)
        (formula
          (symbol)
          (letter)
          (symbol)
          (symbol)
          (letter)
          (symbol)
          (symbol)
          (fraction
            (letter)
            (letter))
          (symbol)))))
  (parbreak))

====================
typst/delimited/math-lr-symbol-unmatched
====================

// Test that symbols aren't matched automatically.
$ bracket.l a/b bracket.r
  = lr(bracket.l a/b bracket.r) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (field
        (ident)
        (ident))
      (fraction
        (letter)
        (letter))
      (field
        (ident)
        (ident))
      (symbol)
      (call
        (ident)
        (formula
          (field
            (ident)
            (ident))
          (fraction
            (letter)
            (letter))
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/delimited/math-lr-half
====================

// Test half LRs.
$ lr(a/b\]) = a = lr(\{a/b) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (letter))
          (escape)))
      (symbol)
      (letter)
      (symbol)
      (call
        (ident)
        (formula
          (escape)
          (fraction
            (letter)
            (letter))))))
  (parbreak))

====================
typst/delimited/math-lr-size
====================

// Test manual scaling.
$ lr(]sum_(x=1)^n x], size: #70%)
  < lr((1, 2), size: #200%) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol)
          (attach
            (ident)
            (group
              (formula
                (letter)
                (symbol)
                (number)))
            (letter))
          (letter)
          (symbol))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))
      (symbol)
      (call
        (ident)
        (formula
          (group
            (formula
              (number)
              (symbol)
              (number))))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak))

====================
typst/delimited/math-lr-shorthands
====================

// Test predefined delimiter pairings.
$floor(x/2), ceil(x/2), abs(x), norm(x)$


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (number))))
      (symbol)
      (call
        (ident)
        (formula
          (fraction
            (letter)
            (number))))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)))))
  (parbreak))

====================
typst/delimited/math-lr-color
====================

// Test colored delimiters
$ lr(
    text("(", fill: #green) a/b
    text(")", fill: #blue)
  ) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (string))
            (tagged
              (ident)
              (formula
                (code
                  (ident)))))
          (fraction
            (letter)
            (letter))
          (call
            (ident)
            (formula
              (string))
            (tagged
              (ident)
              (formula
                (code
                  (ident)))))))))
  (parbreak))

====================
typst/delimited/math-lr-mid
====================

// Test middle functions
$ { x mid(|) sum_(i=1)^oo phi_i (x) < 1 } \
  { integral |dot|
      mid(bar.v.double)
    floor(hat(I) mid(slash) { dot mid(|) dot } mid(|) I/n) } $


--------------------

(source_file
  (comment)
  (math
    (formula
      (group
        (formula
          (letter)
          (call
            (ident)
            (formula
              (symbol)))
          (attach
            (ident)
            (group
              (formula
                (letter)
                (symbol)
                (number)))
            (ident))
          (attach
            (ident)
            (letter))
          (group
            (formula
              (letter)))
          (symbol)
          (number)))
      (linebreak)
      (group
        (formula
          (ident)
          (symbol)
          (ident)
          (symbol)
          (call
            (ident)
            (formula
              (field
                (field
                  (ident)
                  (ident))
                (ident))))
          (call
            (ident)
            (formula
              (call
                (ident)
                (formula
                  (letter)))
              (call
                (ident)
                (formula
                  (ident)))
              (group
                (formula
                  (ident)
                  (call
                    (ident)
                    (formula
                      (symbol)))
                  (ident)))
              (call
                (ident)
                (formula
                  (symbol)))
              (fraction
                (letter)
                (letter))))))))
  (parbreak))

====================
typst/delimited/math-lr-mid-size
====================

// Test mid when lr size is set.
#set page(width: auto)

$ lr({ A mid(|) integral }) quad
  lr(size: #1em, { A mid(|) integral }) quad
  lr(size: #(1em+20%), { A mid(|) integral }) \

  lr(] A mid(|) integral ]) quad
  lr(size: #1em, ] A mid(|) integral ]) quad
  lr(size: #(1em+20%), ] A mid(|) integral ]) \

  lr(( A mid(|) integral ]) quad
  lr(size: #1em, ( A mid(|) integral ]) quad
  lr(size: #(1em+20%), ( A mid(|) integral ]) $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit)))))
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (group
                (add
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))
      (linebreak)
      (call
        (ident)
        (formula
          (symbol)
          (letter)
          (call
            (ident)
            (formula
              (symbol)))
          (ident)
          (symbol)))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit)))))
        (formula
          (symbol)
          (letter)
          (call
            (ident)
            (formula
              (symbol)))
          (ident)
          (symbol)))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (group
                (add
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (formula
          (symbol)
          (letter)
          (call
            (ident)
            (formula
              (symbol)))
          (ident)
          (symbol)))
      (linebreak)
      (call
        (ident)
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit)))))
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (group
                (add
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))))
  (parbreak))

====================
typst/delimited/math-lr-mid-size-nested-equation
====================

// Test mid size when lr size is set, when nested in an equation.
#set page(width: auto)

#let body = ${ A mid(|) integral }$
$ lr(body) quad
  lr(size: #1em, body) quad
  lr(size: #(1em+20%), body) $


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (code
    (let
      (ident)
      (math
        (formula
          (group
            (formula
              (letter)
              (call
                (ident)
                (formula
                  (symbol)))
              (ident)))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident)))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit)))))
        (formula
          (ident)))
      (ident)
      (call
        (ident)
        (tagged
          (ident)
          (formula
            (code
              (group
                (add
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (formula
          (ident)))))
  (parbreak))

====================
typst/delimited/math-lr-unbalanced
====================

// Test unbalanced delimiters.
$ 1/(2 (x) $
$ 1_(2 y (x) () $
$ 1/(2 y (x) (2(3)) $


--------------------

(source_file
  (comment)
  (math
    (formula
      (fraction
        (number)
        (group
          (formula
            (number)
            (group
              (formula
                (letter))))))))
  (math
    (formula
      (attach
        (number)
        (group
          (formula
            (number)
            (letter)
            (group
              (formula
                (letter)))
            (group))))))
  (math
    (formula
      (fraction
        (number)
        (group
          (formula
            (number)
            (letter)
            (group
              (formula
                (letter)))
            (group
              (formula
                (number)
                (group
                  (formula
                    (number))))))))))
  (parbreak))

====================
typst/delimited/math-lr-weak-spacing
====================

// Test ignoring weak spacing immediately after the opening
// and immediately before the closing.
$ [#h(1em, weak: true)A(dif x, f(x) dif x)sum#h(1em, weak: true)] $
$ lr(\[#h(1em, weak: true)lr(A dif x, f(x) dif x\))sum#h(1em, weak:true)a) $


--------------------

(source_file
  (comment)
  (comment)
  (math
    (formula
      (group
        (formula
          (code
            (call
              (ident)
              (group
                (number
                  (unit))
                (tagged
                  (ident)
                  (bool)))))
          (apply
            (letter)
            (formula
              (ident)
              (letter)
              (symbol)
              (apply
                (letter)
                (formula
                  (letter)))
              (ident)
              (letter)))
          (ident)
          (code
            (call
              (ident)
              (group
                (number
                  (unit))
                (tagged
                  (ident)
                  (bool)))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (escape)
          (code
            (call
              (ident)
              (group
                (number
                  (unit))
                (tagged
                  (ident)
                  (bool)))))
          (call
            (ident)
            (formula
              (letter)
              (ident)
              (letter))
            (formula
              (apply
                (letter)
                (formula
                  (letter)))
              (ident)
              (letter)
              (escape)))
          (ident)
          (code
            (call
              (ident)
              (group
                (number
                  (unit))
                (tagged
                  (ident)
                  (bool)))))
          (letter)))))
  (parbreak))

====================
typst/delimited/math-lr-nested
====================

// Test nested lr calls.
#let body1 = math.lr($|$, size: 4em)
#let body2 = $lr(|, size: #4em)$

$lr(|, size: #2em)$
$lr(lr(|, size: #4em), size: #50%)$
$lr(body1, size: #50%)$
$lr(body2, size: #50%)$


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (math
            (formula
              (symbol)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (math
        (formula
          (call
            (ident)
            (formula
              (symbol))
            (tagged
              (ident)
              (formula
                (code
                  (number
                    (unit))))))))))
  (parbreak)
  (math
    (formula
      (call
        (ident)
        (formula
          (symbol))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (call
            (ident)
            (formula
              (symbol))
            (tagged
              (ident)
              (formula
                (code
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (math
    (formula
      (call
        (ident)
        (formula
          (ident))
        (tagged
          (ident)
          (formula
            (code
              (number
                (unit))))))))
  (parbreak))

====================
typst/delimited/math-lr-ignore-ignorant
====================

// Test ignoring leading and trailing ignorant fragments.
#box($ (1 / 2) $)
#box({
  show "(": it => context it
  $ (1 / 2) $
})
#box({
  show ")": it => context it
  $ (1 / 2) $
})
#box({
  show "(": it => context it
  show ")": it => context it
  $ (1 / 2) $
})


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (group
              (formula
                (fraction
                  (number)
                  (number)))))))))
  (code
    (call
      (ident)
      (group
        (block
          (show
            (string)
            (lambda
              (ident)
              (context
                (ident))))
          (math
            (formula
              (group
                (formula
                  (fraction
                    (number)
                    (number))))))))))
  (code
    (call
      (ident)
      (group
        (block
          (show
            (string)
            (lambda
              (ident)
              (context
                (ident))))
          (math
            (formula
              (group
                (formula
                  (fraction
                    (number)
                    (number))))))))))
  (code
    (call
      (ident)
      (group
        (block
          (show
            (string)
            (lambda
              (ident)
              (context
                (ident))))
          (show
            (string)
            (lambda
              (ident)
              (context
                (ident))))
          (math
            (formula
              (group
                (formula
                  (fraction
                    (number)
                    (number))))))))))
  (parbreak))

====================
typst/delimited/math-lr-scripts
====================

// Test interactions with script attachments.
$ lr(size: #3em, |)_a^b lr(size: #3em, zws|)_a^b
  lr(size: #3em, [x])_0^1 [x]_0^1
  lr(size: #1em, lr(size: #10em, [x]))_0^1 $


--------------------

(source_file
  (comment)
  (math
    (formula
      (attach
        (call
          (ident)
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit)))))
          (formula
            (symbol)))
        (letter)
        (letter))
      (attach
        (call
          (ident)
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit)))))
          (formula
            (ident)
            (symbol)))
        (letter)
        (letter))
      (attach
        (call
          (ident)
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit)))))
          (formula
            (group
              (formula
                (letter)))))
        (number)
        (number))
      (attach
        (group
          (formula
            (letter)))
        (number)
        (number))
      (attach
        (call
          (ident)
          (tagged
            (ident)
            (formula
              (code
                (number
                  (unit)))))
          (formula
            (call
              (ident)
              (tagged
                (ident)
                (formula
                  (code
                    (number
                      (unit)))))
              (formula
                (group
                  (formula
                    (letter)))))))
        (number)
        (number))))
  (parbreak))

====================
typst/delimited/issue-4188-lr-corner-brackets
====================

// Test positioning of U+231C to U+231F
$⌜a⌟⌞b⌝$ = $⌜$$a$$⌟$$⌞$$b$$⌝$
--------------------

(source_file
  (comment)
  (math
    (formula
      (symbol)
      (letter)
      (symbol)
      (symbol)
      (letter)
      (symbol)))
  (text)
  (math
    (formula
      (symbol)))
  (math
    (formula
      (letter)))
  (math
    (formula
      (symbol)))
  (math
    (formula
      (symbol)))
  (math
    (formula
      (letter)))
  (math
    (formula
      (symbol))))

====================
typst/csv/csv
====================

// Test reading CSV data.
#set page(width: auto)
#let data = csv("/assets/data/zoo.csv")
#let cells = data.at(0).map(strong) + data.slice(1).flatten()
#table(columns: data.at(0).len(), ..cells)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (ident)
      (add
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (number)))
            (ident))
          (group
            (ident)))
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (number)))
            (ident))
          (group)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (number)))
              (ident))
            (group)))
        (elude
          (ident)))))
  (parbreak))

====================
typst/csv/csv-row-type-dict
====================

// Test reading CSV data with dictionary rows enabled.
#let data = csv("/assets/data/zoo.csv", row-type: dictionary)
#test(data.len(), 3)
#test(data.at(0).Name, "Debby")
#test(data.at(2).Weight, "150kg")
#test(data.at(1).Species, "Tiger")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (ident))
        (string))))
  (parbreak))

====================
typst/csv/csv-file-not-found
====================

// Error: 6-16 file not found (searched at tests/suite/loading/nope.csv)
#csv("nope.csv")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/csv/csv-invalid
====================

// Error: 6-28 failed to parse CSV (found 3 instead of 2 fields in line 3)
#csv("/assets/data/bad.csv")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/csv/csv-invalid-row-type-dict
====================

// Test error numbering with dictionary rows.
// Error: 6-28 failed to parse CSV (found 3 instead of 2 fields in line 3)
#csv("/assets/data/bad.csv", row-type: dictionary)
--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (ident))))))

====================
typst/xml/xml
====================

// Test reading XML data.
#let data = xml("/assets/data/hello.xml")
#test(data, ((
  tag: "data",
  attrs: (:),
  children: (
    "\n  ",
    (tag: "hello", attrs: (name: "hi"), children: ("1",)),
    "\n  ",
    (
      tag: "data",
      attrs: (:),
      children: (
        "\n    ",
        (tag: "hello", attrs: (:), children: ("World",)),
        "\n    ",
        (tag: "hello", attrs: (:), children: ("World",)),
        "\n  ",
      ),
    ),
    "\n",
  ),
),))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (group))
            (tagged
              (ident)
              (group
                (string
                  (escape))
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (string))))
                  (tagged
                    (ident)
                    (group
                      (string))))
                (string
                  (escape))
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (group))
                  (tagged
                    (ident)
                    (group
                      (string
                        (escape))
                      (group
                        (tagged
                          (ident)
                          (string))
                        (tagged
                          (ident)
                          (group))
                        (tagged
                          (ident)
                          (group
                            (string))))
                      (string
                        (escape))
                      (group
                        (tagged
                          (ident)
                          (string))
                        (tagged
                          (ident)
                          (group))
                        (tagged
                          (ident)
                          (group
                            (string))))
                      (string
                        (escape)))))
                (string
                  (escape)))))))))
  (parbreak))

====================
typst/xml/xml-invalid
====================

// Error: 6-28 failed to parse XML (found closing tag 'data' instead of 'hello' in line 3)
#xml("/assets/data/bad.xml")
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)))))

====================
typst/json/json
====================

// Test reading JSON data.
#let data = json("/assets/data/zoo.json")
#test(data.len(), 3)
#test(data.at(0).name, "Debby")
#test(data.at(2).weight, 150)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (ident))
        (number))))
  (parbreak))

====================
typst/json/json-invalid
====================

// Error: 7-30 failed to parse JSON (expected value at line 3 column 14)
#json("/assets/data/bad.json")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/json/issue-3363-json-large-number
====================

// Big numbers (larger than what i64 can store) should just lose some precision
// but not overflow
#let bignum = json("/assets/data/big-number.json")
#bignum
--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (ident)))

====================
typst/yaml/yaml
====================

// Test reading YAML data
#let data = yaml("/assets/data/yaml-types.yaml")
#test(data.len(), 9)
#test(data.null_key, (none, none))
#test(data.string, "text")
#test(data.integer, 5)
#test(data.float, 1.12)
#test(data.mapping, ("1": "one", "2": "two"))
#test(data.seq, (1,2,3,4))
#test(data.bool, false)
#test(data.keys().contains("true"), true)
#test(data.at("1"), "ok")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (none)
          (none)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (tagged
            (string)
            (string))
          (tagged
            (string)
            (string))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group))
            (ident))
          (group
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (string))))
  (parbreak))

====================
typst/yaml/yaml-invalid
====================

// Error: 7-30 failed to parse YAML (did not find expected ',' or ']' at line 2 column 1, while parsing a flow sequence at line 1 column 18)
#yaml("/assets/data/bad.yaml")
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)))))

====================
typst/read/read-text
====================

// Test reading plain text files
#let data = read("/assets/text/hello.txt")
#test(data, "Hello, world!\n")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (string
          (escape)))))
  (parbreak))

====================
typst/read/read-file-not-found
====================

// Error: 18-44 file not found (searched at assets/text/missing.txt)
#let data = read("/assets/text/missing.txt")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak))

====================
typst/read/read-invalid-utf-8
====================

// Error: 18-40 file is not valid utf-8
#let data = read("/assets/text/bad.txt")
--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string))))))

====================
typst/toml/toml
====================

// Test reading TOML data.
#let data = toml("/assets/data/toml-types.toml")
#test(data.string, "wonderful")
#test(data.integer, 42)
#test(data.float, 3.14)
#test(data.boolean, true)
#test(data.array, (1, "string", 3.0, false))
#test(data.inline_table, ("first": "amazing", "second": "greater") )
#test(data.table.element, 5)
#test(data.table.others, (false, "indeed", 7))
#test(data.date_time, datetime(
  year: 2023,
  month: 2,
  day: 1,
  hour: 15,
  minute: 38,
  second: 57,
))
#test(data.date_time2, datetime(
  year: 2023,
  month: 2,
  day: 1,
  hour: 15,
  minute: 38,
  second: 57,
))
#test(data.date, datetime(
  year: 2023,
  month: 2,
  day: 1,
))
#test(data.time, datetime(
  hour: 15,
  minute: 38,
  second: 57,
))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (number)
          (string)
          (number)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (group
          (tagged
            (string)
            (string))
          (tagged
            (string)
            (string))))))
  (code
    (call
      (ident)
      (group
        (field
          (field
            (ident)
            (ident))
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (bool)
          (string)
          (number)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/toml/toml-invalid
====================

// Error: 7-30 failed to parse TOML (expected `.`, `=` at line 1 column 16)
#toml("/assets/data/bad.toml")
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)))))

====================
typst/escape/escape
====================

// Escapable symbols.
\\ \/ \[ \] \{ \} \# \* \_ \+ \= \~ \
\` \$ \" \' \< \> \@ \( \) \A

// No need to escape.
( ) ;

// Escaped comments.
\//
\/\* \*\/
\/* \*/ *

// Unicode escape sequence.
\u{1F3D5} == 🏕

// Escaped escape sequence.
\u{41} vs. \\u\{41\}

// Some code stuff in text.
let f() , ; : | + - /= == 12 "string"

// Escaped dot.
10\. May


--------------------

(source_file
  (comment)
  (text
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape))
  (linebreak)
  (text
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape)
    (escape))
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text
    (escape))
  (text
    (escape)
    (escape)
    (escape)
    (escape))
  (text
    (escape))
  (strong
    (text
      (escape)))
  (parbreak)
  (comment)
  (text
    (escape))
  (parbreak)
  (comment)
  (text
    (escape)
    (escape)
    (escape)
    (escape))
  (parbreak)
  (comment)
  (text)
  (quote)
  (text)
  (quote)
  (parbreak)
  (comment)
  (text
    (escape))
  (parbreak))

====================
typst/escape/escape-invalid-codepoint
====================

// Unicode codepoint does not exist.
// Error: 1-11 invalid Unicode codepoint: FFFFFF
\u{FFFFFF}


--------------------

(source_file
  (comment)
  (comment)
  (text
    (escape))
  (parbreak))

====================
typst/escape/escape-unclosed
====================

// Unterminated.
// Error: 1-6 unclosed Unicode escape sequence
\u{41[*Bold*]
--------------------

(source_file
  (comment)
  (comment)
  (text
    (escape))
  (text)
  (strong
    (text))
  (text))

====================
typst/newlines/newline-continuation-code
====================

#{
  "hello"
    .clusters()
  if false {

  }
  else {
    ("1", "2")
  }
}


--------------------

(source_file
  (code
    (block
      (call
        (field
          (string)
          (ident))
        (group))
      (branch
        (bool)
        (block)
        (block
          (group
            (string)
            (string))))))
  (parbreak))

====================
typst/newlines/newline-continuation-markup
====================

#"hello"
  .codepoints()

#if false {

}
else {
  ("1", "2")
}


--------------------

(source_file
  (code
    (string))
  (text)
  (parbreak)
  (code
    (branch
      (bool)
      (block)))
  (text)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (text)
  (parbreak))

====================
typst/newlines/newline-continuation-method-blank
====================

#test({
  "hi 1"

    .clusters()
}, ("h", "i", " ", "1"))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (block
          (call
            (field
              (string)
              (ident))
            (group)))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (parbreak))

====================
typst/newlines/newline-continuation-method-line-comment-after
====================

#test({
  "hi 2"// comment
    .clusters()
}, ("h", "i", " ", "2"))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (block
          (call
            (field
              (string)
              (comment)
              (ident))
            (group)))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (parbreak))

====================
typst/newlines/newline-continuation-method-block-comment-after
====================

#test({
  "hi 3"/* comment */
    .clusters()
}, ("h", "i", " ", "3"))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (block
          (call
            (field
              (string)
              (comment)
              (ident))
            (group)))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (parbreak))

====================
typst/newlines/newline-continuation-method-line-comment-between
====================

#test({
  "hi 4"
  // comment
    .clusters()
}, ("h", "i", " ", "4"))


--------------------



====================
typst/newlines/newline-continuation-method-block-comment-between
====================

#test({
  "hi 5"
  /*comment*/.clusters()
}, ("h", "i", " ", "5"))


--------------------



====================
typst/newlines/newline-continuation-method-comments-and-blanks
====================

#test({
  "hi 6"
  // comment


  /* comment */
    .clusters()
}, ("h", "i", " ", "6"))


--------------------



====================
typst/newlines/newline-continuation-if-else-comment
====================

#test({
  let foo(x) = {
    if x < 0 { "negative" }
    // comment
    else { "non-negative" }
  }

  foo(1)
}, "non-negative")
--------------------



====================
typst/numbers/numbers
====================

// Test numbers in text mode.
12 \
12.0 \
3.14 \
1234567890 \
0123456789 \
0 \
0.0 \
+0 \
+0.0 \
-0 \
-0.0 \
-1 \
-3.14 \
-9876543210 \
-0987654321 \
٣٫١٤ \
-٣٫١٤ \
-¾ \
#text(fractions: true)[-3/2] \
2022 - 2023 \
2022 -- 2023 \
2022--2023 \
2022-2023 \
٢٠٢٢ - ٢٠٢٣ \
٢٠٢٢ -- ٢٠٢٣ \
٢٠٢٢--٢٠٢٣ \
٢٠٢٢-٢٠٢٣ \
-500 -- -400
--------------------

(source_file
  (comment)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (linebreak)
  (text)
  (linebreak)
  (text)
  (shorthand)
  (text)
  (linebreak)
  (text)
  (shorthand)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (shorthand)
  (text)
  (linebreak)
  (text)
  (shorthand)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (shorthand)
  (text))

====================
typst/backtracking/parser-backtracking-param-default-value
====================

#{
  let s = "(x: 1) => x"
  let pat = "(x: {}) => 1 + x()"
  for _ in range(50) {
    s = pat.replace("{}", s)
  }
  test(eval(s)(), 51)
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (string))
      (let
        (ident)
        (string))
      (for
        (ident)
        (call
          (ident)
          (group
            (number)))
        (block
          (assign
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (string)
                (ident))))))
      (call
        (ident)
        (group
          (call
            (call
              (ident)
              (group
                (ident)))
            (group))
          (number)))))
  (parbreak))

====================
typst/backtracking/parser-backtracking-destructuring-assignment
====================

#{
  let s = "(x) = 1"
  let pat = "(x: {_}) = 1"
  for _ in range(100) {
    s = pat.replace("_", s)
  }
  // Error: 8-9 cannot destructure integer
  eval(s)
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (string))
      (let
        (ident)
        (string))
      (for
        (ident)
        (call
          (ident)
          (group
            (number)))
        (block
          (assign
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (string)
                (ident))))))
      (comment)
      (call
        (ident)
        (group
          (ident)))))
  (parbreak))

====================
typst/backtracking/parser-backtracking-destructuring-whitespace
====================

// Test whitespace after memoized part.
#( (x: () => 1 ) => 1 )
//     
--------------------

(source_file
  (comment)
  (code
    (group
      (lambda
        (group
          (tagged
            (ident)
            (lambda
              (group)
              (number))))
        (number))))
  (comment))

====================
typst/comment/comments
====================

// Line comment acts as spacing.
A// you
B

// Block comment does not act as spacing, nested block comments.
C/*
 /* */
*/D

// Works in code.
#test(type(/*1*/ 1) //
, int)

// End of block comment in line comment.
// Hello */

// Nested "//" doesn't count as line comment.
/* // */
E

/*//*/
This is a comment.
*/*/


--------------------

(source_file
  (comment)
  (text)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text
    (comment))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (comment)
            (number)))
        (comment)
        (ident))))
  (parbreak)
  (comment)
  (comment)
  (parbreak)
  (comment)
  (comment)
  (text)
  (parbreak)
  (comment)
  (parbreak))

====================
typst/comment/comment-end-of-line
====================

// Test comments at the end of a line
First part//
Second part

// Test comments at the end of a line with pre-spacing
First part          //
Second part


--------------------

(source_file
  (comment)
  (text)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (comment)
  (text)
  (parbreak))

====================
typst/comment/issue-4632-sth-followed-by-comment
====================

// Test heading markers followed by comments.
#test([
  =// Comment
  =/* Comment */
], [
  =
  =
])

// Test list markers followed by comments.
#test([
  -// Comment
  -/* Comment */
], [
  -
  -
])

// Test enum markers followed by comments.
#test([
  +// Comment
  +/* Comment */

  1.// Comment
  2./* Comment */
], [
  +
  +

  1.
  2.
])



--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (comment)
          (text)
          (comment))
        (content
          (section
            (heading)
            (content))
          (section
            (heading)
            (content))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (comment)
          (text)
          (comment))
        (content
          (item)
          (item)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (comment)
          (text)
          (comment)
          (parbreak)
          (text)
          (comment)
          (text)
          (comment))
        (content
          (item)
          (item)
          (parbreak)
          (item)
          (item)))))
  (parbreak))

====================
typst/comment/comment-block-unclosed
====================

// End should not appear without start.
// Error: 7-9 unexpected end of block comment
// Hint: 7-9 consider escaping the `*` with a backslash or opening the block comment with `/*`
/* */ */

// Unterminated is okay.
/*
--------------------



====================
typst/shorthand/shorthand-nbsp-and-shy-hyphen
====================

The non-breaking space~does work, soft-?hyphen also does.


--------------------

(source_file
  (text)
  (shorthand)
  (text)
  (shorthand)
  (text)
  (parbreak))

====================
typst/shorthand/shorthand-nbsp-width
====================

// Make sure non-breaking and normal space always
// have the same width. Even if the font decided
// differently.
#set text(font: "New Computer Modern")
a b \
a~b


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (linebreak)
  (text)
  (shorthand)
  (text)
  (parbreak))

====================
typst/shorthand/shorthand-dashes
====================

- En dash: --
- Em dash: 
--------------------

(source_file
  (item
    (text)
    (shorthand))
  (item
    (text)))

====================
typst/shorthand/shorthand-ellipsis
====================

#set text(font: "Roboto")
A... vs #"A..."


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (shorthand)
  (text)
  (code
    (string))
  (parbreak))

====================
typst/shorthand/shorthand-minus
====================

// Make sure shorthand is applied only before a digit.
-a -1


--------------------

(source_file
  (comment)
  (text)
  (parbreak))

====================
typst/shorthand/shorthands-math
====================

// Check all math shorthands.
$...$\
$-$\
$'$\
$*$\
$~$\
$!=$\
$:=$\
$::=$\
$=:$\
$<<$\
$<<<$\
$>>$\
$>>>$\
$<=$\
$>=$\
$->$\
$-->$\
$|->$\
$>->$\
$->>$\
$<-$\
$<--$\
$<-<$\
$<<-$\
$<->$\
$<-->$\
$~>$\
$~~>$\
$<~$\
$<~~$\
$=>$\
$|=>$\
$==>$\
$<==$\
$<=>$\
$<==>$\
$[|$\
$|]$\
$||$
--------------------

(source_file
  (comment)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (symbol)))
  (linebreak)
  (math
    (formula
      (symbol)))
  (linebreak)
  (math
    (formula
      (symbol)))
  (linebreak)
  (math
    (formula
      (symbol)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (symbol)
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)
      (symbol)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (symbol)
      (symbol)))
  (linebreak)
  (math
    (formula
      (symbol)
      (symbol)
      (symbol)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (symbol)
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (shorthand)))
  (linebreak)
  (math
    (formula
      (group)))
  (linebreak)
  (math
    (formula
      (symbol)))
  (linebreak)
  (math
    (formula
      (symbol))))

====================
typst/bugs/issue-4571-panic-when-compiling-invalid-file
====================

// Test that trying to parse the following does not result in a panic.

// Error: 1:9-10 unclosed delimiter
// Error: 1:22 expected pattern
// Error: 1:23-24 unexpected star
// Error: 2:1-2:2 the character `#` is not valid in code
// Error: 2:2-2:8 expected pattern, found keyword `import`
// Hint: 2:2-2:8 keyword `import` is not allowed as an identifier; try `import_` instead
// Error: 2:9-2:20 expected identifier, found string
// Error: 3:1-3:2 the character `#` is not valid in code
// Error: 3:2-3:5 expected pattern, found keyword `let`
// Hint: 3:2-3:5 keyword `let` is not allowed as an identifier; try `let_` instead
// Error: 4:3-4:4 unexpected equals sign
// Error: 4:5-4:6 unclosed delimiter
// Error: 4:6 expected equals sign
#import (hntle-clues: *
#import "/util.typ": qrlink
#let auton(
) = {

--------------------



====================
typst/embedded/markup-expr-incomplete
====================

// Error: 2-2 expected expression
#


--------------------



====================
typst/embedded/markup-expr-incomplete-followed-by-text
====================

// Error: 2-2 expected expression
#  hello
--------------------

(source_file
  (comment)
  (code
    (ident)))

====================
typst/calc/calc-round
====================

#test(calc.round(calc.e, digits: 2), 2.72)
#test(calc.round(calc.pi, digits: 2), 3.14)
#test(type(calc.round(3.1415, digits: 2)), float)
#test(type(calc.round(5, digits: 2)), int)
#test(type(calc.round(decimal("3.1415"), digits: 2)), decimal)
#test(type(calc.round(314.15, digits: -2)), float)
#test(type(calc.round(523, digits: -2)), int)
#test(type(calc.round(decimal("314.15"), digits: -2)), decimal)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (field
              (ident)
              (ident))
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (field
              (ident)
              (ident))
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (number)
                (tagged
                  (ident)
                  (number))))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (number)
                (tagged
                  (ident)
                  (number))))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (string)))
                (tagged
                  (ident)
                  (number))))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (number)
                (tagged
                  (ident)
                  (sign
                    (number)))))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (number)
                (tagged
                  (ident)
                  (sign
                    (number)))))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (string)))
                (tagged
                  (ident)
                  (sign
                    (number)))))))
        (ident))))
  (parbreak))

====================
typst/calc/calc-round-large-inputs
====================

#test(calc.round(31114, digits: 4000000000), 31114)
#test(calc.round(9223372036854775807, digits: 12), 9223372036854775807)
#test(calc.round(9223372036854775807, digits: -20), 0)
#test(calc.round(238959235.129590203, digits: 4000000000), 238959235.129590203)
#test(calc.round(1.7976931348623157e+308, digits: 12), 1.7976931348623157e+308)
#test(calc.round(1.7976931348623157e+308, digits: -308), float.inf)
#test(calc.round(-1.7976931348623157e+308, digits: -308), -float.inf)
#test(calc.round(12.34, digits: -312), 0.0)
#test(calc.round(decimal("238959235.129590203"), digits: 4000000000), decimal("238959235.129590203"))
#test(calc.round(decimal("79228162514264337593543950335"), digits: 12), decimal("79228162514264337593543950335"))
#test(calc.round(decimal("79228162514264337593543950335"), digits: -50), decimal("0"))
#test(calc.round(decimal("-79228162514264337593543950335"), digits: -2), decimal("-79228162514264337593543950300"))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (sign
                (number)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (sign
                (number)))))
        (field
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (tagged
              (ident)
              (sign
                (number)))))
        (sign
          (field
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (sign
                (number)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (number))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (number))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (sign
                (number)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (sign
                (number)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-abs
====================

// Test the `abs` function.
#test(calc.abs(-3), 3)
#test(calc.abs(3), 3)
#test(calc.abs(-0.0), 0.0)
#test(calc.abs(0.0), -0.0)
#test(calc.abs(-3.14), 3.14)
#test(calc.abs(50%), 50%)
#test(calc.abs(-25%), 25%)
#test(calc.abs(decimal("4932.493249324932")), decimal("4932.493249324932"))
#test(calc.abs(decimal("-12402.593295932041")), decimal("12402.593295932041"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number
              (unit))))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number
                (unit)))))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-abs-bad-type
====================

// Error: 11-22 expected integer, float, length, angle, ratio, fraction, or decimal, found string
#calc.abs("no number")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/calc/calc-even-and-odd
====================

// Test the `even` and `odd` functions.
#test(calc.even(2), true)
#test(calc.odd(2), false)
#test(calc.odd(-1), true)
#test(calc.even(-11), false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))))
        (bool))))
  (parbreak))

====================
typst/calc/calc-rem
====================

// Test the `rem` function.
#test(calc.rem(1, 1), 0)
#test(calc.rem(5, 3), 2)
#test(calc.rem(5, -3), 2)
#test(calc.rem(22.5, 10), 2.5)
#test(calc.rem(9, 4.5), 0)
#test(calc.rem(decimal("5"), -3), decimal("2"))
#test(calc.rem(decimal("22.5"), decimal("10")), decimal("2.5"))
#test(calc.rem(9, decimal("4.5")), decimal("0"))
#test(calc.rem(decimal("7"), decimal("3")), decimal("1"))
#test(calc.rem(decimal("7"), decimal("-3")), decimal("1"))
#test(calc.rem(decimal("-7"), decimal("3")), decimal("-1"))
#test(calc.rem(decimal("-7"), decimal("-3")), decimal("-1"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (sign
              (number))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-rem-divisor-zero-1
====================

// Error: 14-15 divisor must not be zero
#calc.rem(5, 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-rem-divisor-zero-2
====================

// Error: 16-19 divisor must not be zero
#calc.rem(3.0, 0.0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-rem-divisor-zero-3
====================

// Error: 27-39 divisor must not be zero
#calc.rem(decimal("4.0"), decimal("0"))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-div-euclid
====================

// Test the `div-euclid` function.
#test(calc.div-euclid(7, 3), 2)
#test(calc.div-euclid(7, -3), -2)
#test(calc.div-euclid(-7, 3), -3)
#test(calc.div-euclid(-7, -3), 3)
#test(calc.div-euclid(2.5, 2), 1)
#test(calc.div-euclid(decimal("7"), decimal("3")), decimal("2"))
#test(calc.div-euclid(decimal("7"), decimal("-3")), decimal("-2"))
#test(calc.div-euclid(decimal("-7"), decimal("3")), decimal("-3"))
#test(calc.div-euclid(decimal("-7"), decimal("-3")), decimal("3"))
#test(calc.div-euclid(decimal("2.5"), decimal("2")), decimal("1"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-div-euclid-divisor-zero-1
====================

// Error: 21-22 divisor must not be zero
#calc.div-euclid(5, 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-div-euclid-divisor-zero-2
====================

// Error: 23-26 divisor must not be zero
#calc.div-euclid(3.0, 0.0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-div-euclid-divisor-zero-3
====================

// Error: 35-50 divisor must not be zero
#calc.div-euclid(decimal("3.00"), decimal("0.00"))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-rem-euclid
====================

// Test the `rem-euclid` function.
#test(calc.rem-euclid(7, 3), 1)
#test(calc.rem-euclid(7, -3), 1)
#test(calc.rem-euclid(-7, 3), 2)
#test(calc.rem-euclid(-7, -3), 2)
#test(calc.rem-euclid(2.5, 2), 0.5)
#test(calc.rem-euclid(decimal("7"), decimal("3")), decimal("1"))
#test(calc.rem-euclid(decimal("7"), decimal("-3")), decimal("1"))
#test(calc.rem-euclid(decimal("-7"), decimal("3")), decimal("2"))
#test(calc.rem-euclid(decimal("-7"), decimal("-3")), decimal("2"))
#test(calc.rem-euclid(decimal("2.5"), decimal("2")), decimal("0.5"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-rem-euclid-divisor-zero-1
====================

// Error: 21-22 divisor must not be zero
#calc.rem-euclid(5, 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-rem-euclid-divisor-zero-2
====================

// Error: 23-26 divisor must not be zero
#calc.rem-euclid(3.0, 0.0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-rem-euclid-divisor-zero-3
====================

// Error: 35-50 divisor must not be zero
#calc.rem-euclid(decimal("3.00"), decimal("0.00"))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-quo
====================

// Test the `quo` function.
#test(calc.quo(1, 1), 1)
#test(calc.quo(5, 3), 1)
#test(calc.quo(5, -3), -1)
#test(calc.quo(22.5, 10), 2)
#test(calc.quo(9, 4.5), 2)
#test(calc.quo(decimal("22.5"), 10), 2)
#test(calc.quo(decimal("9"), decimal("4.5")), 2)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (number))))
  (parbreak))

====================
typst/calc/calc-quo-divisor-zero-1
====================

// Error: 14-15 divisor must not be zero
#calc.quo(5, 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-quo-divisor-zero-2
====================

// Error: 16-19 divisor must not be zero
#calc.quo(3.0, 0.0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-quo-divisor-zero-3
====================

// Error: 27-41 divisor must not be zero
#calc.quo(decimal("4.0"), decimal("0.0"))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-min-and-max
====================

// Test the `min` and `max` functions.
#test(calc.min(2, -4), -4)
#test(calc.min(3.5, 1e2, -0.1, 3), -0.1)
#test(calc.min(decimal("3.5"), 4, decimal("-3213.99999")), decimal("-3213.99999"))
#test(calc.max(-3, 11), 11)
#test(calc.max(decimal("3"), 45), 45)
#test(calc.min("hi"), "hi")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)
            (sign
              (number))
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (number)
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (string))))
  (parbreak))

====================
typst/calc/calc-pow-log-exp-ln
====================

// Test the `pow`, `log`, `exp`, and `ln` functions.
#test(calc.pow(10, 0), 1)
#test(calc.pow(2, 4), 16)
#test(calc.pow(decimal("0.5"), 18), decimal("0.000003814697265625"))
#test(calc.exp(2), calc.pow(calc.e, 2))
#test(calc.ln(10), calc.log(10, base: calc.e))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (number)))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (call
          (field
            (ident)
            (ident))
          (group
            (field
              (ident)
              (ident))
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (field
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/calc/calc-bit-logical
====================

// Test the `bit-not`, `bit-and`, `bit-or` and `bit-xor` functions.
#test(64.bit-not(), -65)
#test(0.bit-not(), -1)
#test((-56).bit-not(), 55)
#test(128.bit-and(192), 128)
#test(192.bit-and(224), 192)
#test((-1).bit-and(325532), 325532)
#test(0.bit-and(-53), 0)
#test(0.bit-or(-1), -1)
#test(5.bit-or(3), 7)
#test((-50).bit-or(3), -49)
#test(64.bit-or(32), 96)
#test((-1).bit-xor(1), -2)
#test(64.bit-xor(96), 32)
#test((-1).bit-xor(-7), 6)
#test(0.bit-xor(492), 492)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (not
            (group)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (not
            (group)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (sign
                (number)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (sign
                (number)))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (parbreak))

====================
typst/calc/calc-bit-shift
====================

// Test the `bit-lshift` and `bit-rshift` functions.
#test(32.bit-lshift(2), 128)
#test(694.bit-lshift(0), 694)
#test(128.bit-rshift(2), 32)
#test(128.bit-rshift(12345), 0)
#test((-7).bit-rshift(2), -2)
#test((-7).bit-rshift(12345), -1)
#test(128.bit-rshift(2, logical: true), 32)
#test((-7).bit-rshift(61, logical: true), 7)
#test(128.bit-rshift(12345, logical: true), 0)
#test((-7).bit-rshift(12345, logical: true), 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number)
              (tagged
                (ident)
                (bool)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (sub
          (number
            (unit))
          (call
            (ident)
            (group
              (number)
              (tagged
                (ident)
                (bool)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (sign
                (number)))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (bool))))
        (number))))
  (parbreak))

====================
typst/calc/calc-bit-shift-too-large
====================

// Error: 2-18 the result is too large
#1.bit-lshift(64)


--------------------

(source_file
  (comment)
  (code
    (number
      (unit)))
  (text)
  (parbreak))

====================
typst/calc/calc-bit-lshift-negative
====================

// Error: 15-17 number must be at least zero
#1.bit-lshift(-1)


--------------------

(source_file
  (comment)
  (code
    (number
      (unit)))
  (text)
  (parbreak))

====================
typst/calc/calc-bit-rshift-negative
====================

// Error: 15-17 number must be at least zero
#1.bit-rshift(-1)


--------------------

(source_file
  (comment)
  (code
    (number
      (unit)))
  (text)
  (parbreak))

====================
typst/calc/calc-pow-zero-to-power-of-zero
====================

// Error: 2-16 zero to the power of zero is undefined
#calc.pow(0, 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-pow-exponent-too-large
====================

// Error: 14-31 exponent is too large
#calc.pow(2, 10000000000000000)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-pow-too-large
====================

// Error: 2-25 the result is too large
#calc.pow(2, 2147483647)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-pow-too-large-decimal
====================

// Error: 2-56 the result is too large
#calc.pow(decimal("2222222222222222222222222222"), 100)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/calc/calc-pow-bad-exponent
====================

// Error: 14-36 exponent may not be infinite, subnormal, or NaN
#calc.pow(2, calc.pow(2.0, 10000.0))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number))))))
  (parbreak))

====================
typst/calc/calc-pow-not-real
====================

// Error: 2-19 the result is not a real number
#calc.pow(-1, 0.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (sign
          (number))
        (number))))
  (parbreak))

====================
typst/calc/calc-sqrt-not-real
====================

// Error: 12-14 cannot take square root of negative number
#calc.sqrt(-1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/calc/calc-root
====================

#test(calc.root(12.0, 1), 12.0)
#test(calc.root(9.0, 2), 3.0)
#test(calc.root(27.0, 3), 3.0)
#test(calc.root(-27.0, 3), -3.0)
// 100^(-1/2) = (100^(1/2))^-1 = 1/sqrt(100)
#test(calc.root(100.0, -2), 0.1)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (number)))
        (sign
          (number)))))
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (number))))
  (parbreak))

====================
typst/calc/calc-root-zeroth
====================

// Error: 17-18 cannot take the 0th root of a number
#calc.root(1.0, 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-root-negative-even
====================

// Error: 24-25 negative numbers do not have a real nth root when n is even
#test(calc.root(-27.0, 4), -3.0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))
            (number)))
        (sign
          (number)))))
  (parbreak))

====================
typst/calc/calc-log-negative
====================

// Error: 11-13 value must be strictly positive
#calc.log(-1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/calc/calc-log-bad-base
====================

// Error: 20-21 base may not be zero, NaN, infinite, or subnormal
#calc.log(1, base: 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/calc/calc-log-not-real
====================

// Error: 2-24 the result is not a real number
#calc.log(10, base: -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (tagged
          (ident)
          (sign
            (number))))))
  (parbreak))

====================
typst/calc/calc-fact
====================

// Test the `fact` function.
#test(calc.fact(0), 1)
#test(calc.fact(5), 120)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-fact-too-large
====================

// Error: 2-15 the result is too large
#calc.fact(21)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/calc/calc-perm
====================

// Test the `perm` function.
#test(calc.perm(0, 0), 1)
#test(calc.perm(5, 3), 60)
#test(calc.perm(5, 5), 120)
#test(calc.perm(5, 6), 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-perm-too-large
====================

// Error: 2-19 the result is too large
#calc.perm(21, 21)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-binom
====================

// Test the `binom` function.
#test(calc.binom(0, 0), 1)
#test(calc.binom(5, 3), 10)
#test(calc.binom(5, 5), 1)
#test(calc.binom(5, 6), 0)
#test(calc.binom(6, 2), 15)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-gcd
====================

// Test the `gcd` function.
#test(calc.gcd(112, 77), 7)
#test(calc.gcd(12, 96), 12)
#test(calc.gcd(13, 9), 1)
#test(calc.gcd(13, -9), 1)
#test(calc.gcd(272557, 272557), 272557)
#test(calc.gcd(0, 0), 0)
#test(calc.gcd(7, 0), 7)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-lcm
====================

// Test the `lcm` function.
#test(calc.lcm(112, 77), 1232)
#test(calc.lcm(12, 96), 96)
#test(calc.lcm(13, 9), 117)
#test(calc.lcm(13, -9), 117)
#test(calc.lcm(272557, 272557), 272557)
#test(calc.lcm(0, 0), 0)
#test(calc.lcm(8, 0), 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-lcm-too-large
====================

// Error: 2-41 the result is too large
#calc.lcm(15486487489457, 4874879896543)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-round-larger-than-max-int
====================

#test(calc.round(decimal("9223372036854775809.5")), decimal("9223372036854775810"))
#test(calc.round(9223372036854775809.5), 9223372036854775810.0)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-floor-float-larger-than-max-int
====================

// Error: 2-35 the result is too large
#calc.floor(9223372036854775809.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/calc/calc-floor-decimal-larger-than-max-int
====================

// Error: 2-46 the result is too large
#calc.floor(decimal("9223372036854775809.5"))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-round-smaller-than-min-int
====================

#test(calc.round(decimal("-9223372036854775809.5")), decimal("-9223372036854775810"))
#test(calc.round(-9223372036854775809.5), -9223372036854775810.0)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sign
              (number))))
        (sign
          (number)))))
  (parbreak))

====================
typst/calc/calc-floor-float-smaller-than-min-int
====================

// Error: 2-36 the result is too large
#calc.floor(-9223372036854775809.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/calc/calc-floor-decimal-smaller-than-min-int
====================

// Error: 2-47 the result is too large
#calc.floor(decimal("-9223372036854775809.5"))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/calc/calc-round-int-too-large
====================

// Error: 2-45 the result is too large
#calc.round(9223372036854775807, digits: -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (tagged
          (ident)
          (sign
            (number))))))
  (parbreak))

====================
typst/calc/calc-round-int-negative-too-large
====================

// Error: 2-46 the result is too large
#calc.round(-9223372036854775807, digits: -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (sign
          (number))
        (tagged
          (ident)
          (sign
            (number))))))
  (parbreak))

====================
typst/calc/calc-round-decimal-too-large
====================

// Error: 2-66 the result is too large
#calc.round(decimal("79228162514264337593543950335"), digits: -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (tagged
          (ident)
          (sign
            (number))))))
  (parbreak))

====================
typst/calc/calc-round-decimal-negative-too-large
====================

// Error: 2-67 the result is too large
#calc.round(decimal("-79228162514264337593543950335"), digits: -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (tagged
          (ident)
          (sign
            (number))))))
  (parbreak))

====================
typst/calc/calc-min-nothing
====================

// Error: 2-12 expected at least one value
#calc.min()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/calc/calc-min-uncomparable
====================

// Error: 14-18 cannot compare string and integer
#calc.min(1, "hi")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (string))))
  (parbreak))

====================
typst/calc/calc-max-uncomparable
====================

// Error: 16-19 cannot compare 1pt with 1em
#calc.max(1em, 1pt)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number
          (unit))
        (number
          (unit)))))
  (parbreak))

====================
typst/calc/calc-clamp-decimal-float
====================

// Error: 2-37 cannot apply this operation to a decimal and a float
// Hint: 2-37 if loss of precision is acceptable, explicitly cast the decimal to a float with `float(value)`
#calc.clamp(decimal("10"), 5.5, 6.6)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (number)
        (number))))
  (parbreak))

====================
typst/calc/calc-norm
====================

#test(calc.norm(1, 2, -3, 0.5), calc.sqrt(14.25))
#test(calc.norm(3, 4), 5.0)
#test(calc.norm(3, 4), 5.0)
#test(calc.norm(), 0.0)
#test(calc.norm(p: 3, 1, -2), calc.pow(9, 1/3))
#test(calc.norm(p: calc.inf, 1, -2), 2.0)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)
            (sign
              (number))
            (number)))
        (call
          (field
            (ident)
            (ident))
          (group
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (number)
            (sign
              (number))))
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (div
              (number)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (field
                (ident)
                (ident)))
            (number)
            (sign
              (number))))
        (number))))
  (parbreak))

====================
typst/calc/calc-norm-negative-p
====================

// Error: 15-17 p must be greater than zero
#calc.norm(p: -1, 1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (sign
            (number)))
        (number))))
  (parbreak))

====================
typst/calc/calc-norm-expected-float
====================

// Error: 12-15 expected float, found ratio
#calc.norm(10%)
--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number
          (unit))))))

====================
typst/assert/assert-fail
====================

// Test failing assertions.
// Error: 2-16 assertion failed
#assert(1 == 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number)))))
  (parbreak))

====================
typst/assert/assert-fail-message
====================

// Test failing assertions.
// Error: 2-51 assertion failed: two is smaller than one
#assert(2 < 1, message: "two is smaller than one")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number))
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/assert/assert-bad-type
====================

// Test failing assertions.
// Error: 9-15 expected boolean, found string
#assert("true")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/assert/assert-eq-fail
====================

// Test failing assertions.
// Error: 2-19 equality assertion failed: value 10 was not equal to 11
#assert.eq(10, 11)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/assert/assert-eq-fail-message
====================

// Test failing assertions.
// Error: 2-55 equality assertion failed: 10 and 12 are not equal
#assert.eq(10, 12, message: "10 and 12 are not equal")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/assert/assert-ne-fail
====================

// Test failing assertions.
// Error: 2-19 inequality assertion failed: value 11 was equal to 11
#assert.ne(11, 11)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/assert/assert-ne-fail-message
====================

// Test failing assertions.
// Error: 2-57 inequality assertion failed: must be different from 11
#assert.ne(11, 11, message: "must be different from 11")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/assert/assert-success
====================

// Test successful assertions.
#assert(5 > 3)
#assert.eq(15, 15)
#assert.ne(10, 12)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (number)
          (number)))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number)
        (number)))))

====================
typst/int/int-base-alternative
====================

// Test numbers with alternative bases.
#test(0x10, 16)
#test(0b1101, 13)
#test(0xA + 0xa, 0x14)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (code
    (call
      (ident)
      (group
        (add
          (number)
          (number))
        (number))))
  (parbreak))

====================
typst/int/int-base-binary-invalid
====================

// Error: 2-7 invalid binary number: 0b123
#0b123


--------------------

(source_file
  (comment)
  (code
    (number))
  (text)
  (parbreak))

====================
typst/int/int-base-hex-invalid
====================

// Error: 2-8 invalid hexadecimal number: 0x123z
#0x123z


--------------------

(source_file
  (comment)
  (code
    (number
      (unit)))
  (parbreak))

====================
typst/int/int-constructor
====================

// Test conversion to numbers.
#test(int(false), 0)
#test(int(true), 1)
#test(int(10), 10)
#test(int("150"), 150)
#test(int("-834"), -834)
#test(int("\u{2212}79"), -79)
#test(int(10 / 3), 3)
#test(int(-58.34), -58)
#test(int(decimal("92492.193848921")), 92492)
#test(int(decimal("-224.342211")), -224)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (bool)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (bool)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string
              (escape))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (div
              (number)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (sign
          (number)))))
  (parbreak))

====================
typst/int/int-constructor-bad-type
====================

// Error: 6-10 expected integer, boolean, float, decimal, or string, found length
#int(10pt)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (parbreak))

====================
typst/int/int-constructor-bad-value
====================

// Error: 6-12 invalid integer: nope
#int("nope")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/int/int-constructor-float-too-large
====================

// Error: 6-27 number too large
#int(9223372036854775809.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/int/int-constructor-float-too-large-min
====================

// Error: 6-28 number too large
#int(-9223372036854775809.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/int/int-constructor-decimal-too-large
====================

// Error: 6-38 number too large
#int(decimal("9223372036854775809.5"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/int/int-constructor-decimal-too-large-min
====================

// Error: 6-39 number too large
#int(decimal("-9223372036854775809.5"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/int/int-signum
====================

// Test int `signum()`
#test(int(0).signum(), 0)
#test(int(1.0).signum(), 1)
#test(int(-1.0).signum(), -1)
#test(int(10.0).signum(), 1)
#test(int(-10.0).signum(), -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (number))))
            (ident))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (number))))
            (ident))
          (group))
        (sign
          (number)))))
  (parbreak))

====================
typst/int/int-from-and-to-bytes
====================

// Test `int.from-bytes` and `int.to-bytes`.
#test(int.from-bytes(bytes(())), 0)
#test(int.from-bytes(bytes((1, 0, 0, 0, 0, 0, 0, 0)), endian: "little", signed: true), 1)
#test(int.from-bytes(bytes((1, 0, 0, 0, 0, 0, 0, 0)), endian: "big", signed: true), 72057594037927936)
#test(int.from-bytes(bytes((1, 0, 0, 0, 0, 0, 0, 0)), endian: "little", signed: false), 1)
#test(int.from-bytes(bytes((255,)), endian: "big", signed: true), -1)
#test(int.from-bytes(bytes((255,)), endian: "big", signed: false), 255)
#test(int.from-bytes((-1000).to-bytes(endian: "big", size: 5), endian: "big", signed: true), -1000)
#test(int.from-bytes((-1000).to-bytes(endian: "little", size: 5), endian: "little", signed: true), -1000)
#test(int.from-bytes(1000.to-bytes(endian: "big", size: 5), endian: "big", signed: true), 1000)
#test(int.from-bytes(1000.to-bytes(endian: "little", size: 5), endian: "little", signed: true), 1000)
#test(int.from-bytes(1000.to-bytes(endian: "little", size: 5), endian: "little", signed: false), 1000)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (group
                  (sign
                    (number)))
                (ident))
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (group
                  (sign
                    (number)))
                (ident))
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (number))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sub
              (number
                (unit))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (number)))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sub
              (number
                (unit))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (number)))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (sub
              (number
                (unit))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))
                  (tagged
                    (ident)
                    (number)))))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (bool))))
        (number))))
  (parbreak))

====================
typst/int/int-from-and-to-bytes-too-many
====================

// Error: 2-34 too many bytes to convert to a 64 bit number
#int.from-bytes(bytes((0,) * 16))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (mul
              (group
                (number))
              (number)))))))
  (parbreak))

====================
typst/int/int-repr
====================

// Test the `repr` function with integers.
#test(repr(12), "12")
#test(repr(1234567890), "1234567890")
#test(repr(0123456789), "123456789")
#test(repr(0), "0")
#test(repr(-0), "0")
#test(repr(-1), "-1")
#test(repr(-9876543210), "-9876543210")
#test(repr(-0987654321), "-987654321")
#test(repr(4 - 8), "-4")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (number)
              (number))))
        (string))))
  (parbreak))

====================
typst/int/int-display
====================

// Test integers.
#12 \
#1234567890 \
#0123456789 \
#0 \
#(-0) \
#(-1) \
#(-9876543210) \
#(-0987654321) \
#(4 - 8)


--------------------

(source_file
  (comment)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sub
        (number)
        (number))))
  (parbreak))

====================
typst/int/issue-int-constructor
====================

// Test that integer -> integer conversion doesn't do a roundtrip through float.
#let x = 9223372036854775800
#test(type(x), int)
#test(int(x), x)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (ident))))
  (parbreak))

====================
typst/int/number-invalid-suffix
====================

// Error: 2-4 invalid number suffix: u
#1u
--------------------

(source_file
  (comment)
  (code
    (number
      (unit))))

====================
typst/context/context-body-atomic-in-markup
====================

// Test that context body is parsed as atomic expression.
#let c = [#context "hello".]
#test(c.children.first().func(), (context none).func())
#test(c.children.last(), [.])


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (content
        (code
          (context
            (string)))
        (text))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (field
                  (ident)
                  (ident))
                (ident))
              (group))
            (ident))
          (group))
        (call
          (field
            (group
              (context
                (none)))
            (ident))
          (group)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (field
              (ident)
              (ident))
            (ident))
          (group))
        (content
          (text)))))
  (parbreak))

====================
typst/context/context-element-constructor-forbidden
====================

// Test that manual construction is forbidden.
// Error: 2-25 cannot be constructed manually
#(context none).func()()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (call
        (field
          (group
            (context
              (none)))
          (ident))
        (group))
      (group)))
  (parbreak))

====================
typst/context/context-in-show-rule
====================

// Test that show rule establishes context.
#set heading(numbering: "1.")
#show heading: it => test(
  counter(heading).get(),
  (intro: (1,), back: (2,)).at(str(it.label)),
)

= Introduction <intro>
= Background <back>


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (ident)
                  (group
                    (ident)))
                (ident))
              (group))
            (call
              (field
                (group
                  (tagged
                    (ident)
                    (group
                      (number)))
                  (tagged
                    (ident)
                    (group
                      (number))))
                (ident))
              (group
                (call
                  (ident)
                  (group
                    (field
                      (ident)
                      (ident)))))))))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content))
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak))))

====================
typst/context/context-in-show-rule-query
====================

// Test that show rule on non-locatable element allows `query`.
// Error: 18-47 Assertion failed: 2 != 3
#show emph: _ => test(query(heading).len(), 3)
#show strong: _ => test(query(heading).len(), 2)
= Introduction
= Background
*Hi* _there_


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (ident)
                  (group
                    (ident)))
                (ident))
              (group))
            (number))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (ident)
                  (group
                    (ident)))
                (ident))
              (group))
            (number))))))
  (section
    (heading
      (text))
    (content))
  (section
    (heading
      (text))
    (content
      (strong
        (text))
      (emph
        (text))
      (parbreak))))

====================
typst/context/context-assign-to-captured-variable
====================

// Test error when captured variable is assigned to.
#let i = 0
// Error: 11-12 variables from outside the context expression are read-only and cannot be modified
#context (i = 1)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number)))
  (comment)
  (code
    (context
      (group
        (assign
          (ident)
          (number)))))
  (parbreak))

====================
typst/context/context-delayed-warning
====================

// Ensure that the warning that triggers in the first layout iteration is not
// surfaced since it goes away in the second one. Just like errors in show
// rules.
#show heading: none

= A <a>
#context {
  let n = query(<a>).len()
  let fonts = ("nope", "Roboto")
  set text(font: fonts.at(n))
}
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (show
      (ident)
      (none)))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (code
        (context
          (block
            (let
              (ident)
              (call
                (field
                  (call
                    (ident)
                    (group
                      (label)))
                  (ident))
                (group)))
            (let
              (ident)
              (group
                (string)
                (string)))
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (ident)))))))))))))

====================
typst/panic/panic
====================

// Test panic.
// Error: 2-9 panicked
#panic()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/panic/panic-with-int
====================

// Test panic.
// Error: 2-12 panicked with: 123
#panic(123)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/panic/panic-with-str
====================

// Test panic.
// Error: 2-24 panicked with: "this is wrong"
#panic("this is wrong")
--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (string)))))

====================
typst/str/str-constructor
====================

// Test conversion to string.
#test(str(123), "123")
#test(str(123, base: 3), "11120")
#test(str(-123, base: 16), "−7b")
#test(str(9223372036854775807, base: 36), "1y2p0ij32e8e7")
#test(str(50.14), "50.14")
#test(str(10 / 3).len() > 10, true)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (field
              (call
                (ident)
                (group
                  (div
                    (number)
                    (number))))
              (ident))
            (group))
          (number))
        (bool))))
  (parbreak))

====================
typst/str/str-from-float
====================

// Test the `str` function with floats.
#test(str(12.0), "12")
#test(str(3.14), "3.14")
#test(str(1234567890.0), "1234567890")
#test(str(0123456789.0), "123456789")
#test(str(0.0), "0")
#test(str(-0.0), "0")
#test(str(-1.0), "−1")
#test(str(-9876543210.0), "−9876543210")
#test(str(-0987654321.0), "−987654321")
#test(str(-3.14), "−3.14")
#test(str(4.0 - 8.0), "−4")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (number)
              (number))))
        (string))))
  (parbreak))

====================
typst/str/str-from-decimal
====================

// Test the `str` function with decimals.
#test(str(decimal("12")), "12")
#test(str(decimal("12.0")), "12.0")
#test(str(decimal("3.14")), "3.14")
#test(str(decimal("1234567890.0")), "1234567890.0")
#test(str(decimal("0123456789.0")), "123456789.0")
#test(str(decimal("0.0")), "0.0")
#test(str(decimal("-0.0")), "0.0")
#test(str(decimal("-1.0")), "−1.0")
#test(str(decimal("-9876543210.0")), "−9876543210.0")
#test(str(decimal("-0987654321.0")), "−987654321.0")
#test(str(decimal("-3.14")), "−3.14")
#test(str(decimal("-3.9191919191919191919191919195")), "−3.9191919191919191919191919195")
#test(str(decimal("5.0000000000")), "5.0000000000")
#test(str(decimal("4.0") - decimal("8.0")), "−4.0")
#test(str(decimal("4") - decimal("8")), "−4")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (call
                (ident)
                (group
                  (string)))
              (call
                (ident)
                (group
                  (string))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (call
                (ident)
                (group
                  (string)))
              (call
                (ident)
                (group
                  (string))))))
        (string))))
  (parbreak))

====================
typst/str/str-from-int
====================

// Test the `str` function with integers.
#test(str(12), "12")
#test(str(1234567890), "1234567890")
#test(str(0123456789), "123456789")
#test(str(0), "0")
#test(str(-0), "0")
#test(str(-1), "−1")
#test(str(-9876543210), "−9876543210")
#test(str(-0987654321), "−987654321")
#test(str(4 - 8), "−4")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (number)
              (number))))
        (string))))
  (parbreak))

====================
typst/str/str-constructor-bad-type
====================

// Error: 6-8 expected integer, float, decimal, version, bytes, label, type, or string, found content
#str([])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (content))))
  (parbreak))

====================
typst/str/str-constructor-bad-base
====================

// Error: 17-19 base must be between 2 and 36
#str(123, base: 99)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/str/str-constructor-unsupported-base
====================

// Error: 18-19 base is only supported for integers
#str(1.23, base: 2)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/str/str-from-and-to-unicode
====================

// Test the unicode function.
#test(str.from-unicode(97), "a")
#test(str.to-unicode("a"), 97)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/str/str-from-unicode-bad-type
====================

// Error: 19-22 expected integer, found content
#str.from-unicode([a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (content
          (text)))))
  (parbreak))

====================
typst/str/str-to-unicode-bad-type
====================

// Error: 17-21 expected exactly one character
#str.to-unicode("ab")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/str/str-from-unicode-negative
====================

// Error: 19-21 number must be at least zero
#str.from-unicode(-1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/str/str-from-unicode-bad-value
====================

// Error: 2-28 0x110000 is not a valid codepoint
#str.from-unicode(0x110000) // 0x10ffff is the highest valid code point


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (comment)
  (parbreak))

====================
typst/str/string-len
====================

// Test the `len` method.
#test("Hello World!".len(), 12)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/str/string-first-and-last
====================

// Test the `first` and `last` methods.
#test("Hello".first(), "H")
#test("Hello".last(), "o")
#test("🏳️‍🌈A🏳️‍⚧️".first(), "🏳️‍🌈")
#test("🏳️‍🌈A🏳️‍⚧️".last(), "🏳️‍⚧️")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (parbreak))

====================
typst/str/string-first-empty
====================

// Error: 2-12 string is empty
#"".first()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group)))
  (parbreak))

====================
typst/str/string-last-empty
====================

// Error: 2-11 string is empty
#"".last()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group)))
  (parbreak))

====================
typst/str/string-at
====================

// Test the `at` method.
#test("Hello".at(1), "e")
#test("Hello".at(4), "o")
#test("Hello".at(-1), "o")
#test("Hello".at(-2), "l")
#test("Hey: 🏳️‍🌈 there!".at(5), "🏳️‍🌈")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)))
        (string))))
  (parbreak))

====================
typst/str/string-at-default
====================

// Test `at`'s 'default' parameter.
#test("z", "Hello".at(5, default: "z"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (call
          (field
            (string)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (string)))))))
  (parbreak))

====================
typst/str/string-at-not-a-char-boundary
====================

// Error: 2-14 string index 2 is not a character boundary
#"🏳️‍🌈".at(2)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/str/string-at-out-of-bounds
====================

// Error: 2-15 no default value was specified and string index out of bounds (index: 5, len: 5)
#"Hello".at(5)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/str/string-at-at-default-other-type
====================

#test("Hello".at(5, default: (a: 10)), (a: 10))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number))))))
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/str/string-slice
====================

// Test the `slice` method.
#test("abc".slice(1, 2), "b")
#test("abc🏡def".slice(2, 7), "c🏡")
#test("abc🏡def".slice(2, -2), "c🏡d")
#test("abc🏡def".slice(-3, -1), "de")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (number)
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (sign
              (number))
            (sign
              (number))))
        (string))))
  (parbreak))

====================
typst/str/string-slice-not-a-char-boundary
====================

// Error: 2-21 string index -1 is not a character boundary
#"🏳️‍🌈".slice(0, -1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group
        (number)
        (sign
          (number)))))
  (parbreak))

====================
typst/str/string-clusters
====================

// Test the `clusters` and `codepoints` methods.
#test("abc".clusters(), ("a", "b", "c"))
#test("abc".clusters(), ("a", "b", "c"))
#test("🏳️‍🌈!".clusters(), ("🏳️‍🌈", "!"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (group
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (group
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/str/string-codepoints
====================

#test("🏳️‍🌈!".codepoints(), ("🏳", "\u{fe0f}", "\u{200d}", "🌈", "!"))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (group
          (string)
          (string
            (escape))
          (string
            (escape))
          (string)
          (string)))))
  (parbreak))

====================
typst/str/string-contains
====================

// Test the `contains` method.
#test("abc".contains("b"), true)
#test("b" in "abc", true)
#test("1234f".contains(regex("\d")), true)
#test(regex("\d") in "1234f", true)
#test("abc".contains("d"), false)
#test("1234g" in "1234f", false)
#test("abc".contains(regex("^[abc]$")), false)
#test("abc".contains(regex("^[abc]+$")), true)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (call
            (ident)
            (group
              (string
                (escape))))
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (string))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (bool))))
  (parbreak))

====================
typst/str/string-starts-with
====================

// Test the `starts-with` and `ends-with` methods.
#test("Typst".starts-with("Ty"), true)
#test("Typst".starts-with(regex("[Tt]ys")), false)
#test("Typst".starts-with("st"), false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (bool))))
  (parbreak))

====================
typst/str/string-ends-with
====================

#test("Typst".ends-with("st"), true)
#test("Typst".ends-with(regex("\d*")), true)
#test("Typst".ends-with(regex("\d+")), false)
#test("Typ12".ends-with(regex("\d+")), true)
#test("typst13".ends-with(regex("1[0-9]")), true)
#test("typst113".ends-with(regex("1[0-9]")), true)
#test("typst23".ends-with(regex("1[0-9]")), false)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (bool))))
  (parbreak))

====================
typst/str/string-find-and-position
====================

// Test the `find` and `position` methods.
#let date = regex("\d{2}:\d{2}")
#test("Hello World".find("World"), "World")
#test("Hello World".position("World"), 6)
#test("It's 12:13 now".find(date), "12:13")
#test("It's 12:13 now".position(date), 5)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string
            (escape)
            (escape))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (ident)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (ident)))
        (number))))
  (parbreak))

====================
typst/str/string-match
====================

// Test the `match` method.
#test("Is there a".match("for this?"), none)
#test(
  "The time of my life.".match(regex("[mit]+e")),
  (start: 4, end: 8, text: "time", captures: ()),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group))))))
  (parbreak))

====================
typst/str/string-matches
====================

// Test the `matches` method.
#test("Hello there".matches("\d"), ())
#test("Day by Day.".matches("Day"), (
  (start: 0, end: 3, text: "Day", captures: ()),
  (start: 7, end: 10, text: "Day", captures: ()),
))

// Compute the sum of all timestamps in the text.
#let timesum(text) = {
  let time = 0
  for match in text.matches(regex("(\d+):(\d+)")) {
    let caps = match.captures
    time += 60 * int(caps.at(0)) + int(caps.at(1))
  }
  str(int(time / 60)) + ":" + str(calc.rem(time, 60))
}

#test(timesum(""), "0:0")
#test(timesum("2:70"), "3:10")
#test(timesum("1:20, 2:10, 0:40"), "4:10")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string
              (escape))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (group
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (group)))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (group)))))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (let
          (ident)
          (number))
        (for
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (call
                (ident)
                (group
                  (string
                    (escape)
                    (escape))))))
          (block
            (let
              (ident)
              (field
                (ident)
                (ident)))
            (assign
              (ident)
              (add
                (mul
                  (number)
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (number))))))
                (call
                  (ident)
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (number)))))))))
        (add
          (add
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (div
                      (ident)
                      (number))))))
            (string))
          (call
            (ident)
            (group
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)
                  (number)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (string))))
  (parbreak))

====================
typst/str/string-replace
====================

// Test the `replace` method with `Str` replacements.
#test("ABC".replace("", "-"), "-A-B-C-")
#test("Ok".replace("Ok", "Nope", count: 0), "Ok")
#test("to add?".replace("", "How ", count: 1), "How to add?")
#test("AB C DEF GH J".replace(" ", ",", count: 2), "AB,C,DEF GH J")
#test("Walcemo"
  .replace("o", "k")
  .replace("e", "o")
  .replace("k", "e")
  .replace("a", "e"),
  "Welcome"
)
#test("123".replace(regex("\d$"), "_"), "12_")
#test("123".replace(regex("\d{1,2}$"), "__"), "1__")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (string)
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (string)
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (string)
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (call
                  (field
                    (call
                      (field
                        (string)
                        (ident))
                      (group
                        (string)
                        (string)))
                    (ident))
                  (group
                    (string)
                    (string)))
                (ident))
              (group
                (string)
                (string)))
            (ident))
          (group
            (string)
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (string)))
        (string))))
  (parbreak))

====================
typst/str/string-replace-function
====================

// Test the `replace` method with `Func` replacements.

#test("abc".replace(regex("[a-z]"), m => {
  str(m.start) + m.text + str(m.end)
}), "0a11b22c3")
#test("abcd, efgh".replace(regex("\w+"), m => {
  upper(m.text)
}), "ABCD, EFGH")
#test("hello : world".replace(regex("^(.+)\s*(:)\s*(.+)$"), m => {
  upper(m.captures.at(0)) + m.captures.at(1) + " " + upper(m.captures.at(2))
}), "HELLO : WORLD")
#test("hello world, lorem ipsum".replace(regex("(\w+) (\w+)"), m => {
  m.captures.at(1) + " " + m.captures.at(0)
}), "world hello, ipsum lorem")
#test("hello world, lorem ipsum".replace(regex("(\w+) (\w+)"), count: 1, m => {
  m.captures.at(1) + " " + m.captures.at(0)
}), "world hello, lorem ipsum")
#test("123 456".replace(regex("[a-z]+"), "a"), "123 456")

#test("abc".replace("", m => "-"), "-a-b-c-")
#test("abc".replace("", m => "-", count: 1), "-abc")
#test("123".replace("abc", m => ""), "123")
#test("123".replace("abc", m => "", count: 2), "123")
#test("a123b123c".replace("123", m => {
  str(m.start) + "-" + str(m.end)
}), "a1-4b5-8c")
#test("halla warld".replace("a", m => {
  if m.start == 1 { "e" }
  else if m.start == 4 or m.start == 7 { "o" }
}), "hello world")
#test("aaa".replace("a", m => str(m.captures.len())), "000")


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (lambda
              (ident)
              (block
                (add
                  (add
                    (call
                      (ident)
                      (group
                        (field
                          (ident)
                          (ident))))
                    (field
                      (ident)
                      (ident)))
                  (call
                    (ident)
                    (group
                      (field
                        (ident)
                        (ident)))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (lambda
              (ident)
              (block
                (call
                  (ident)
                  (group
                    (field
                      (ident)
                      (ident))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape)
                  (escape))))
            (lambda
              (ident)
              (block
                (add
                  (add
                    (add
                      (call
                        (ident)
                        (group
                          (call
                            (field
                              (field
                                (ident)
                                (ident))
                              (ident))
                            (group
                              (number)))))
                      (call
                        (field
                          (field
                            (ident)
                            (ident))
                          (ident))
                        (group
                          (number))))
                    (string))
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (field
                            (ident)
                            (ident))
                          (ident))
                        (group
                          (number))))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape)
                  (escape))))
            (lambda
              (ident)
              (block
                (add
                  (add
                    (call
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident))
                      (group
                        (number)))
                    (string))
                  (call
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident))
                    (group
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape)
                  (escape))))
            (tagged
              (ident)
              (number))
            (lambda
              (ident)
              (block
                (add
                  (add
                    (call
                      (field
                        (field
                          (ident)
                          (ident))
                        (ident))
                      (group
                        (number)))
                    (string))
                  (call
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident))
                    (group
                      (number))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (string)))
        (string))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (string))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (string))
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (string))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (string))
            (tagged
              (ident)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (block
                (add
                  (add
                    (call
                      (ident)
                      (group
                        (field
                          (ident)
                          (ident))))
                    (string))
                  (call
                    (ident)
                    (group
                      (field
                        (ident)
                        (ident)))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (block
                (branch
                  (cmp
                    (field
                      (ident)
                      (ident))
                    (number))
                  (block
                    (string))
                  (branch
                    (or
                      (cmp
                        (field
                          (ident)
                          (ident))
                        (number))
                      (cmp
                        (field
                          (ident)
                          (ident))
                        (number)))
                    (block
                      (string))))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (lambda
              (ident)
              (call
                (ident)
                (group
                  (call
                    (field
                      (field
                        (ident)
                        (ident))
                      (ident))
                    (group)))))))
        (string))))
  (parbreak))

====================
typst/str/string-replace-function-bad-type
====================

// Error: 23-24 expected string, found integer
#"123".replace("123", m => 1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group
        (string)
        (lambda
          (ident)
          (number)))))
  (parbreak))

====================
typst/str/string-replace-bad-type
====================

// Error: 23-32 expected string or function, found array
#"123".replace("123", (1, 2, 3))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group
        (string)
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/str/string-trim-basic
====================

// Test the `trim` method; the pattern is not provided.
#let str = "Typst, LaTeX, Word, InDesign"
#let array = ("Typst", "LaTeX", "Word", "InDesign")
#test(str.split(",").map(s => s.trim()), array)
#test("".trim(), "")
#test("  ".trim(), "")
#test("\t".trim(), "")
#test("\n".trim(), "")
#test("\t \n".trim(), "")
#test(" abc ".trim(at: start), "abc ")
#test("\tabc ".trim(at: start), "abc ")
#test("abc\n".trim(at: end), "abc")
#test(" abc ".trim(at: end, repeat: true), " abc")
#test("  abc".trim(at: start, repeat: false), "abc")


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (string)))
  (code
    (let
      (ident)
      (group
        (string)
        (string)
        (string)
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (string)))
            (ident))
          (group
            (lambda
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group)))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string
              (escape))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string
              (escape))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string
              (escape)
              (escape))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string
              (escape))
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string
              (escape))
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (bool))))
        (string))))
  (parbreak))

====================
typst/str/string-trim-pattern-str
====================

// Test the `trim` method; the pattern is a string.
#test("aabcaa".trim("a", repeat: false), "abca")
#test("aabca".trim("a", at: start), "bca")
#test("aabcaa".trim("a", at: end, repeat: false), "aabca")
#test(" abc\n".trim("\n"), " abc")
#test("whole".trim("whole", at: start), "")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string
              (escape))
            (ident))
          (group
            (string
              (escape))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (ident))))
        (string))))
  (parbreak))

====================
typst/str/string-trim-pattern-regex
====================

// Test the `trim` method; the pattern is a regex.
#test("".trim(regex(".")), "")
#test("123abc456".trim(regex("\d")), "abc")
#test("123abc456".trim(regex("\d"), repeat: false), "23abc45")
#test("123a4b5c678".trim(regex("\d"), repeat: true), "a4b5c")
#test("123a4b5c678".trim(regex("\d"), repeat: false), "23a4b5c67")
#test("123abc456".trim(regex("\d"), at: start), "abc456")
#test("123abc456".trim(regex("\d"), at: end), "123abc")
#test("123abc456".trim(regex("\d+"), at: end, repeat: false), "123abc")
#test("123abc456".trim(regex("\d{1,2}$"), repeat: false), "123abc4")
#test("hello world".trim(regex(".")), "")
#test("12306".trim(regex("\d"), at: start), "")
#test("12306abc".trim(regex("\d"), at: start), "abc")
#test("whole".trim(regex("whole"), at: start), "")
#test("12306".trim(regex("\d"), at: end), "")
#test("abc12306".trim(regex("\d"), at: end), "abc")
#test("whole".trim(regex("whole"), at: end), "")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (bool))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))
            (tagged
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (tagged
              (ident)
              (ident))))
        (string))))
  (parbreak))

====================
typst/str/string-trim-at-bad-alignment
====================

// Error: 17-21 expected either `start` or `end`
#"abc".trim(at: left)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (string)
        (ident))
      (group
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/str/string-split
====================

// Test the `split` method.
#test("abc".split(""), ("", "a", "b", "c", ""))
#test("abc".split("b"), ("a", "c"))
#test("a123c".split(regex("\d")), ("a", "", "", "c"))
#test("a123c".split(regex("\d+")), ("a", "c"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (group
          (string)
          (string)
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (string)))
        (group
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group
            (call
              (ident)
              (group
                (string
                  (escape))))))
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/str/string-rev
====================

// Test the `rev` method.
#test("abc".rev(), "cba")
#test("ax̂e".rev(), "ex̂a")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (string)
            (ident))
          (group))
        (string))))
  (parbreak))

====================
typst/str/string-unclosed
====================

// Error: 2-2:1 unclosed string
#"hello\"
--------------------



====================
typst/content/content-at-default
====================

// Test .at() default values for content.
#test(auto, [a].at("doesn't exist", default: auto))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (auto)
        (call
          (field
            (content
              (text))
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (auto)))))))
  (parbreak))

====================
typst/content/content-field-syntax
====================

// Test fields on elements.
#show list: it => {
  test(it.children.len(), 3)
}

- A
- B
- C


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (call
                (field
                  (field
                    (ident)
                    (ident))
                  (ident))
                (group))
              (number)))))))
  (parbreak)
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/content/content-field-missing
====================

// Error: 25-28 heading does not have field "fun"
#show heading: it => it.fun
= A


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (field
          (ident)
          (ident)))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/content/content-fields
====================

// Test content fields method.
#test([a].fields(), (text: "a"))
#test([a *b*].fields(),  (children: ([a], [ ], strong[b])))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (content
              (text))
            (ident))
          (group))
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (content
              (text)
              (strong
                (text)))
            (ident))
          (group))
        (group
          (tagged
            (ident)
            (group
              (content
                (text))
              (content)
              (call
                (ident)
                (content
                  (text)))))))))
  (parbreak))

====================
typst/content/content-fields-mutable-invalid
====================

#{
  let object = [hi]
  // Error: 3-9 cannot mutate fields on content
  object.property = "value"
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (content
          (text)))
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (string))))
  (parbreak))

====================
typst/content/content-field-materialized-table
====================

// Ensure that fields from set rules are materialized into the element before
// a show rule runs.
#set table(columns: (10pt, auto))
#show table: it => it.columns
#table[A][B][C][D]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (auto)))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (field
          (ident)
          (ident)))))
  (code
    (call
      (call
        (call
          (call
            (ident)
            (content
              (text)))
          (content
            (text)))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/content/content-field-materialized-heading
====================

// Test it again with a different element.
#set heading(numbering: "(I)")
#show heading: set text(size: 11pt, weight: "regular")
#show heading: it => it.numbering
= Heading


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string)))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (field
          (ident)
          (ident)))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/content/content-field-materialized-query
====================

// Test it with query.
#set raw(lang: "rust")
#context query(<myraw>).first().lang
`raw` <myraw>


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (context
      (field
        (call
          (field
            (call
              (ident)
              (group
                (label)))
            (ident))
          (group))
        (ident))))
  (raw_span
    (blob))
  (label)
  (parbreak))

====================
typst/content/content-fields-complex
====================

// Integrated test for content fields.
#let compute(equation, ..vars) = {
  let vars = vars.named()
  let f(elem) = {
    let func = elem.func()
    if func == text {
      let text = elem.text
      if regex("^\d+$") in text {
        int(text)
      } else if text in vars {
        int(vars.at(text))
      } else {
        panic("unknown math variable: " + text)
      }
    } else if func == math.attach {
      let value = f(elem.base)
      if elem.has("t") {
        value = calc.pow(value, f(elem.t))
      }
      value
    } else if elem.has("children") {
      elem
        .children
        .filter(v => v != [ ])
        .split[+]
        .map(xs => xs.fold(1, (prod, v) => prod * f(v)))
        .fold(0, (sum, v) => sum + v)
    }
  }
  let result = f(equation.body)
  [With ]
  vars
    .pairs()
    .map(p => $#p.first() = #p.last()$)
    .join(", ", last: " and ")
  [ we have:]
  $ equation = result $
}

#compute($x y + y^2$, x: 2, y: 3)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (elude
            (ident))))
      (block
        (let
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group)))
        (let
          (call
            (ident)
            (group
              (ident)))
          (block
            (let
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group)))
            (branch
              (cmp
                (ident)
                (ident))
              (block
                (let
                  (ident)
                  (field
                    (ident)
                    (ident)))
                (branch
                  (in
                    (call
                      (ident)
                      (group
                        (string
                          (escape))))
                    (ident))
                  (block
                    (call
                      (ident)
                      (group
                        (ident))))
                  (branch
                    (in
                      (ident)
                      (ident))
                    (block
                      (call
                        (ident)
                        (group
                          (call
                            (field
                              (ident)
                              (ident))
                            (group
                              (ident))))))
                    (block
                      (call
                        (ident)
                        (group
                          (add
                            (string)
                            (ident))))))))
              (branch
                (cmp
                  (ident)
                  (field
                    (ident)
                    (ident)))
                (block
                  (let
                    (ident)
                    (call
                      (ident)
                      (group
                        (field
                          (ident)
                          (ident)))))
                  (branch
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (string)))
                    (block
                      (assign
                        (ident)
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (ident)
                            (call
                              (ident)
                              (group
                                (field
                                  (ident)
                                  (ident)))))))))
                  (ident))
                (branch
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (string)))
                  (block
                    (call
                      (field
                        (call
                          (field
                            (call
                              (field
                                (call
                                  (field
                                    (field
                                      (ident)
                                      (ident))
                                    (ident))
                                  (group
                                    (lambda
                                      (ident)
                                      (cmp
                                        (ident)
                                        (content)))))
                                (ident))
                              (content
                                (text)))
                            (ident))
                          (group
                            (lambda
                              (ident)
                              (call
                                (field
                                  (ident)
                                  (ident))
                                (group
                                  (number)
                                  (lambda
                                    (group
                                      (ident)
                                      (ident))
                                    (mul
                                      (ident)
                                      (call
                                        (ident)
                                        (group
                                          (ident))))))))))
                        (ident))
                      (group
                        (number)
                        (lambda
                          (group
                            (ident)
                            (ident))
                          (add
                            (ident)
                            (ident)))))))))))
        (let
          (ident)
          (call
            (ident)
            (group
              (field
                (ident)
                (ident)))))
        (content
          (text))
        (call
          (field
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group))
                (ident))
              (group
                (lambda
                  (ident)
                  (math
                    (formula
                      (code
                        (call
                          (field
                            (ident)
                            (ident))
                          (group)))
                      (symbol)
                      (code
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))))))))
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (string))))
        (content
          (text))
        (math
          (formula
            (ident)
            (symbol)
            (ident))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (math
          (formula
            (letter)
            (letter)
            (symbol)
            (attach
              (letter)
              (number))))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/content/content-label-has-method
====================

// Test whether the label is accessible through the `has` method.
#show heading: it => {
  assert(it.has("label"))
  it
}

= Hello, world! <my-label>


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (string)))))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak))))

====================
typst/content/content-label-field-access
====================

// Test whether the label is accessible through field syntax.
#show heading: it => {
  assert(str(it.label) == "my-label")
  it
}

= Hello, world! <my-label>


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (cmp
                (call
                  (ident)
                  (group
                    (field
                      (ident)
                      (ident))))
                (string))))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak))))

====================
typst/content/content-label-fields-method
====================

// Test whether the label is accessible through the fields method.
#show heading: it => {
  assert("label" in it.fields())
  assert(str(it.fields().label) == "my-label")
  it
}

= Hello, world! <my-label>


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (in
                (string)
                (call
                  (field
                    (ident)
                    (ident))
                  (group)))))
          (call
            (ident)
            (group
              (cmp
                (call
                  (ident)
                  (group
                    (field
                      (call
                        (field
                          (ident)
                          (ident))
                        (group))
                      (ident))))
                (string))))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak))))

====================
typst/content/content-fields-unset
====================

// Error: 10-15 field "block" in raw is not known at this point
#raw("").block


--------------------

(source_file
  (comment)
  (code
    (field
      (call
        (ident)
        (group
          (string)))
      (ident)))
  (parbreak))

====================
typst/content/content-fields-unset-no-default
====================

// Error: 2-21 field "block" in raw is not known at this point and no default was specified
#raw("").at("block")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (string)))
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/content/content-try-to-access-internal-field
====================

// Error: 9-15 hide does not have field "hidden"
#hide[].hidden
--------------------

(source_file
  (comment)
  (code
    (field
      (call
        (ident)
        (content))
      (ident))))

====================
typst/array/array-basic-syntax
====================

#set page(width: 150pt)

// Empty.
#()

// Not an array, just a parenthesized expression.
#(1)

// One item and trailing comma.
#(-1,)

// No trailing comma.
#(true, false)

// Multiple lines and items and trailing comma.
#("1"
    , rgb("002")
    ,)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (code
    (group))
  (parbreak)
  (comment)
  (code
    (group
      (number)))
  (parbreak)
  (comment)
  (code
    (group
      (sign
        (number))))
  (parbreak)
  (comment)
  (code
    (group
      (bool)
      (bool)))
  (parbreak)
  (comment)
  (code
    (group
      (string)
      (call
        (ident)
        (group
          (string)))))
  (parbreak))

====================
typst/array/array-bad-token
====================

// Error: 4-6 unexpected end of block comment
// Hint: 4-6 consider escaping the `*` with a backslash or opening the block comment with `/*`
#(1*/2)


--------------------



====================
typst/array/array-bad-number-suffix
====================

// Error: 6-8 invalid number suffix: u
#(1, 1u 2)


--------------------



====================
typst/array/array-leading-comma
====================

// Error: 3-4 unexpected comma
#(,1)


--------------------



====================
typst/array/array-incomplete-pair
====================

// Missing expression makes named pair incomplete, making this an empty array.
// Error: 5 expected expression
#(a:)


--------------------



====================
typst/array/array-named-pair
====================

// Named pair after this is already identified as an array.
// Error: 6-10 expected expression, found named pair
#(1, b: 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (number)
      (tagged
        (ident)
        (number))))
  (parbreak))

====================
typst/array/array-keyed-pair
====================

// Keyed pair after this is already identified as an array.
// Error: 6-14 expected expression, found keyed pair
#(1, "key": 2)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (number)
      (tagged
        (string)
        (number))))
  (parbreak))

====================
typst/array/array-bad-conversion-from-string
====================

// Error: 8-15 expected array, bytes, or version, found string
#array("hello")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/array/spread-into-array
====================

// Test spreading into array and dictionary.
#{
  let l = (1, 2, 3)
  let r = (5, 6, 7)
  test((..l, 4, ..r), range(1, 8))
  test((..none), ())
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (call
        (ident)
        (group
          (group
            (elude
              (ident))
            (number)
            (elude
              (ident)))
          (call
            (ident)
            (group
              (number)
              (number)))))
      (call
        (ident)
        (group
          (group
            (elude
              (none)))
          (group)))))
  (parbreak))

====================
typst/array/spread-dict-into-array
====================

// Error: 9-17 cannot spread dictionary into array
#(1, 2, ..(a: 1))


--------------------

(source_file
  (comment)
  (code
    (group
      (number)
      (number)
      (elude
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/array/array-len
====================

// Test the `len` method.
#test(().len(), 0)
#test(("A", "B", "C").len(), 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/array-at-lvalue
====================

// Test lvalue and rvalue access.
#{
  let array = (1, 2)
  array.at(1) += 5 + array.at(0)
  test(array, (1, 8))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)))
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (add
          (number)
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))))
      (call
        (ident)
        (group
          (ident)
          (group
            (number)
            (number))))))
  (parbreak))

====================
typst/array/array-first-and-at-lvalue
====================

// Test different lvalue method.
#{
  let array = (1, 2, 3)
  array.first() = 7
  array.at(1) *= 8
  test(array, (7, 16, 3))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (assign
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))
      (call
        (ident)
        (group
          (ident)
          (group
            (number)
            (number)
            (number))))))
  (parbreak))

====================
typst/array/array-at-out-of-bounds
====================

// Test rvalue out of bounds.
// Error: 2-17 array index out of bounds (index: 5, len: 3) and no default value was specified
#(1, 2, 3).at(5)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/array/array-at-out-of-bounds-negative
====================

// Error: 2-18 array index out of bounds (index: -4, len: 3) and no default value was specified
#(1, 2, 3).at(-4)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/array/array-at-out-of-bounds-lvalue
====================

// Test lvalue out of bounds.
#{
  let array = (1, 2, 3)
  // Error: 3-14 array index out of bounds (index: 3, len: 3)
  array.at(3) = 5
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/array/array-at-with-default
====================

// Test default value.
#test((1, 2, 3).at(2, default: 5), 3)
#test((1, 2, 3).at(3, default: 5), 5)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (parbreak))

====================
typst/array/array-remove-with-default
====================

// Test remove with default value.

#{
  let array = (1, 2, 3)
  test(array.remove(2, default: 5), 3)
}

#{
  let array = (1, 2, 3)
  test(array.remove(3, default: 5), 5)
}


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (number))))
          (number)))))
  (parbreak)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (number))))
          (number)))))
  (parbreak))

====================
typst/array/array-range
====================

// Test the `range` function.
#test(range(4), (0, 1, 2, 3))
#test(range(1, 4), (1, 2, 3))
#test(range(-4, 2), (-4, -3, -2, -1, 0, 1))
#test(range(10, 5), ())
#test(range(10, step: 3), (0, 3, 6, 9))
#test(range(1, 4, step: 1), (1, 2, 3))
#test(range(1, 8, step: 2), (1, 3, 5, 7))
#test(range(5, 2, step: -1), (5, 4, 3))
#test(range(10, 0, step: -3), (10, 7, 4, 1))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (group
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))
            (number)))
        (group
          (sign
            (number))
          (sign
            (number))
          (sign
            (number))
          (sign
            (number))
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (tagged
              (ident)
              (number))))
        (group
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (tagged
              (ident)
              (number))))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (tagged
              (ident)
              (sign
                (number)))))
        (group
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)
            (tagged
              (ident)
              (sign
                (number)))))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/array/array-range-end-missing
====================

// Error: 2-9 missing argument: end
#range()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/array/array-range-float-invalid
====================

// Error: 11-14 expected integer, found float
#range(1, 2.0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (number))))
  (parbreak))

====================
typst/array/array-range-bad-step-type
====================

// Error: 17-22 expected integer, found string
#range(4, step: "one")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/array/array-range-step-zero
====================

// Error: 18-19 number must not be zero
#range(10, step: 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/array/array-bad-method-lvalue
====================

// Test bad lvalue.
// Error: 2:3-2:14 cannot mutate a temporary value
#let array = (1, 2, 3)
#(array.len() = 4)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/array-unknown-method-lvalue
====================

// Test bad lvalue.
// Error: 2:9-2:13 type array has no method `yolo`
#let array = (1, 2, 3)
#(array.yolo() = 4)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (group
        (number)
        (number)
        (number))))
  (code
    (group
      (assign
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/array-negative-indices
====================

// Test negative indices.
#{
  let array = (1, 2, 3, 4)
  test(array.at(0), 1)
  test(array.at(-1), 4)
  test(array.at(-2), 3)
  test(array.at(-3), 2)
  test(array.at(-4), 1)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number)))
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (sign
                (number))))
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (sign
                (number))))
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (sign
                (number))))
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (sign
                (number))))
          (number)))))
  (parbreak))

====================
typst/array/array-first-and-last
====================

// The `first` and `last` methods.
#test((1,).first(), 1)
#test((2,).last(), 2)
#test((1, 2, 3).first(), 1)
#test((1, 2, 3).last(), 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/array-first-empty
====================

// Error: 2-12 array is empty
#().first()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-last-empty
====================

// Error: 2-11 array is empty
#().last()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-push-and-pop
====================

// Test the `push` and `pop` methods.
#{
  let tasks = (a: (1, 2, 3), b: (4, 5, 6))
  test(tasks.at("a").pop(), 3)
  tasks.b.push(7)
  test(tasks.a, (1, 2))
  test(tasks.at("b"), (4, 5, 6, 7))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number)
              (number)
              (number)))
          (tagged
            (ident)
            (group
              (number)
              (number)
              (number)))))
      (call
        (ident)
        (group
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (string)))
              (ident))
            (group))
          (number)))
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (number)))
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (group
            (number)
            (number))))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (string)))
          (group
            (number)
            (number)
            (number)
            (number))))))
  (parbreak))

====================
typst/array/array-insert-and-remove
====================

// Test the `insert` and `remove` methods.
#{
  let array = (0, 1, 2, 4, 5)
  array.insert(3, 3)
  test(array, range(6))
  array.remove(1)
  test(array, (0, 2, 3, 4, 5))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (number)
          (number)
          (number)
          (number)
          (number)))
      (call
        (field
          (ident)
          (ident))
        (group
          (number)
          (number)))
      (call
        (ident)
        (group
          (ident)
          (call
            (ident)
            (group
              (number)))))
      (call
        (field
          (ident)
          (ident))
        (group
          (number)))
      (call
        (ident)
        (group
          (ident)
          (group
            (number)
            (number)
            (number)
            (number)
            (number))))))
  (parbreak))

====================
typst/array/array-insert-missing-index
====================

// Error: 2:2-2:18 missing argument: index
#let numbers = ()
#numbers.insert()


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group)))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-slice
====================

// Test the `slice` method.
#test((1, 2, 3, 4).slice(2), (3, 4))
#test(range(10).slice(2, 6), (2, 3, 4, 5))
#test(range(10).slice(4, count: 3), (4, 5, 6))
#test(range(10).slice(-5, count: 2), (5, 6))
#test((1, 2, 3).slice(2, -2), ())
#test((1, 2, 3).slice(-2, 2), (2,))
#test((1, 2, 3).slice(-3, 2), (1, 2))
#test("ABCD".split("").slice(1, -1).join("-"), "A-B-C-D")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group
            (number)
            (number)))
        (group
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (group
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group
            (sign
              (number))
            (tagged
              (ident)
              (number))))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (sign
              (number))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (sign
              (number))
            (number)))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (sign
              (number))
            (number)))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (call
                  (field
                    (string)
                    (ident))
                  (group
                    (string)))
                (ident))
              (group
                (number)
                (sign
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (parbreak))

====================
typst/array/array-slice-out-of-bounds
====================

// Error: 2-30 array index out of bounds (index: 12, len: 10)
#range(10).slice(9, count: 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (number)))
        (ident))
      (group
        (number)
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/array/array-slice-out-of-bounds-negative
====================

// Error: 2-24 array index out of bounds (index: -4, len: 3)
#(1, 2, 3).slice(0, -4)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (number)
        (sign
          (number)))))
  (parbreak))

====================
typst/array/array-position
====================

// Test the `position` method.
#test(("Hi", "❤️", "Love").position(s => s == "❤️"), 1)
#test(("Bye", "💘", "Apart").position(s => s == "❤️"), none)
#test(("A", "B", "CDEF", "G").position(v => v.len() > 2), 2)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group
            (lambda
              (ident)
              (cmp
                (ident)
                (string)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group
            (lambda
              (ident)
              (cmp
                (ident)
                (string)))))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group
            (lambda
              (ident)
              (cmp
                (call
                  (field
                    (ident)
                    (ident))
                  (group))
                (number)))))
        (number))))
  (parbreak))

====================
typst/array/array-filter
====================

// Test the `filter` method.
#test(().filter(calc.even), ())
#test((1, 2, 3, 4).filter(calc.even), (2, 4))
#test((7, 3, 2, 5, 1).filter(x => x < 5), (3, 2, 1))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (field
              (ident)
              (ident))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (field
              (ident)
              (ident))))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (lambda
              (ident)
              (cmp
                (ident)
                (number)))))
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/array/array-map
====================

// Test the `map` method.
#test(().map(x => x * 2), ())
#test((2, 3).map(x => x * 2), (4, 6))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (lambda
              (ident)
              (mul
                (ident)
                (number)))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number))
            (ident))
          (group
            (lambda
              (ident)
              (mul
                (ident)
                (number)))))
        (group
          (number)
          (number)))))
  (parbreak))

====================
typst/array/array-fold
====================

// Test the `fold` method.
#test(().fold("hi", grid), "hi")
#test((1, 2, 3, 4).fold(0, (s, x) => s + x), 10)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (string)
            (ident)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (lambda
              (group
                (ident)
                (ident))
              (add
                (ident)
                (ident)))))
        (number))))
  (parbreak))

====================
typst/array/array-fold-closure-without-params
====================

// Error: 20-22 unexpected argument
#(1, 2, 3).fold(0, () => none)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (number)
        (lambda
          (group)
          (none)))))
  (parbreak))

====================
typst/array/array-sum
====================

// Test the `sum` method.
#test(().sum(default: 0), 0)
#test(().sum(default: []), [])
#test((1, 2, 3).sum(), 6)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (tagged
              (ident)
              (content))))
        (content))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/array-sum-empty
====================

// Error: 2-10 cannot calculate sum of empty array with no default
#().sum()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-product
====================

// Test the `product` method.
#test(().product(default: 0), 0)
#test(().product(default: []), [])
#test(([ab], 3).product(), [ab]*3)
#test((1, 2, 3).product(), 6)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (tagged
              (ident)
              (content))))
        (content))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (content
                (text))
              (number))
            (ident))
          (group))
        (mul
          (content
            (text))
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/array-product-empty
====================

// Error: 2-14 cannot calculate product of empty array with no default
#().product()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-rev
====================

// Test the `rev` method.
#test(range(3).rev(), (2, 1, 0))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (group
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/array/array-join
====================

// Test the `join` method.
#test(().join(), none)
#test((1,).join(), 1)
#test(("a", "b", "c").join(), "abc")
#test("(" + ("a", "b", "c").join(", ") + ")", "(a, b, c)")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (add
          (add
            (string)
            (call
              (field
                (group
                  (string)
                  (string)
                  (string))
                (ident))
              (group
                (string))))
          (string))
        (string))))
  (parbreak))

====================
typst/array/array-join-bad-values
====================

// Error: 2-22 cannot join boolean with boolean
#(true, false).join()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (bool)
          (bool))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-join-bad-separator
====================

// Error: 2-20 cannot join string with integer
#("a", "b").join(1)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (string)
          (string))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/array/array-join-content
====================

// Test joining content.
#([One], [Two], [Three]).join([, ], last: [ and ]).


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (content
            (text))
          (content
            (text))
          (content
            (text)))
        (ident))
      (group
        (content
          (text))
        (tagged
          (ident)
          (content
            (text))))))
  (text)
  (parbreak))

====================
typst/array/array-intersperse
====================

// Test the `intersperse` method
#test(().intersperse("a"), ())
#test((1,).intersperse("a"), (1,))
#test((1, 2).intersperse("a"), (1, "a", 2))
#test((1, 2, "b").intersperse("a"), (1, "a", 2, "a", "b"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (string)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group
            (string)))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number))
            (ident))
          (group
            (string)))
        (group
          (number)
          (string)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (string))
            (ident))
          (group
            (string)))
        (group
          (number)
          (string)
          (number)
          (string)
          (string)))))
  (parbreak))

====================
typst/array/array-chunks
====================

// Test the `chunks` method.
#test(().chunks(10), ())
#test((1, 2, 3).chunks(10), ((1, 2, 3),))
#test((1, 2, 3, 4, 5, 6).chunks(3), ((1, 2, 3), (4, 5, 6)))
#test((1, 2, 3, 4, 5, 6, 7, 8).chunks(3), ((1, 2, 3), (4, 5, 6), (7, 8)))

#test(().chunks(10, exact: true), ())
#test((1, 2, 3).chunks(10, exact: true), ())
#test((1, 2, 3, 4, 5, 6).chunks(3, exact: true), ((1, 2, 3), (4, 5, 6)))
#test((1, 2, 3, 4, 5, 6, 7, 8).chunks(3, exact: true), ((1, 2, 3), (4, 5, 6)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (number)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (bool))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (bool))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (bool))))
        (group
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (bool))))
        (group
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))))))
  (parbreak))

====================
typst/array/array-chunks-size-zero
====================

// Error: 19-20 number must be positive
#(1, 2, 3).chunks(0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/array/array-chunks-size-negative
====================

// Error: 19-21 number must be positive
#(1, 2, 3).chunks(-5)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/array/array-windows
====================

// Test the `windows` method.
#test(().windows(5), ())
#test((1, 2, 3).windows(5), ())
#test((1, 2, 3, 4, 5).windows(3), ((1, 2, 3), (2, 3, 4), (3, 4, 5)))
#test((1, 2, 3, 4, 5, 6, 7, 8).windows(5), ((1, 2, 3, 4, 5), (2, 3, 4, 5, 6), (3, 4, 5, 6, 7), (4, 5, 6, 7, 8)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (number)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (number)))
        (group
          (group
            (number)
            (number)
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number)
            (number)
            (number))))))
  (parbreak))

====================
typst/array/array-windows-size-zero
====================

// Error: 20-21 number must be positive
#(1, 2, 3).windows(0)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/array/array-windows-size-negative
====================

// Error: 20-22 number must be positive
#(1, 2, 3).windows(-5)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/array/array-sorted
====================

// Test the `sorted` method.
#test(().sorted(), ())
#test(().sorted(key: x => x), ())
#test(((true, false) * 10).sorted(), (false,) * 10 + (true,) * 10)
#test(("it", "the", "hi", "text").sorted(), ("hi", "it", "text", "the"))
#test(("I", "the", "hi", "text").sorted(key: x => x), ("I", "hi", "text", "the"))
#test(("I", "the", "hi", "text").sorted(key: x => x.len()), ("I", "hi", "the", "text"))
#test((2, 1, 3, 10, 5, 8, 6, -7, 2).sorted(), (-7, 1, 2, 2, 3, 5, 6, 8, 10))
#test((2, 1, 3, -10, -5, 8, 6, -7, 2).sorted(key: x => x), (-10, -7, -5, 1, 2, 2, 3, 6, 8))
#test((2, 1, 3, -10, -5, 8, 6, -7, 2).sorted(key: x => x * x), (1, 2, 2, 3, -5, 6, -7, 8, -10))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (ident)))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (mul
                (group
                  (bool)
                  (bool))
                (number)))
            (ident))
          (group))
        (add
          (mul
            (group
              (bool))
            (number))
          (mul
            (group
              (bool))
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (ident)))))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group))))))
        (group
          (string)
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (sign
                (number))
              (number))
            (ident))
          (group))
        (group
          (sign
            (number))
          (number)
          (number)
          (number)
          (number)
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (sign
                (number))
              (sign
                (number))
              (number)
              (number)
              (sign
                (number))
              (number))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (ident)))))
        (group
          (sign
            (number))
          (sign
            (number))
          (sign
            (number))
          (number)
          (number)
          (number)
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (sign
                (number))
              (sign
                (number))
              (number)
              (number)
              (sign
                (number))
              (number))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (mul
                  (ident)
                  (ident))))))
        (group
          (number)
          (number)
          (number)
          (number)
          (sign
            (number))
          (number)
          (sign
            (number))
          (number)
          (sign
            (number))))))
  (parbreak))

====================
typst/array/array-sorted-key-function-positional-1
====================

// Error: 12-18 unexpected argument
#().sorted(x => x)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group
        (lambda
          (ident)
          (ident)))))
  (parbreak))

====================
typst/array/array-zip
====================

// Test the `zip` method.
#test(().zip(()), ())
#test((1,).zip(()), ())
#test((1,).zip((2,)), ((1, 2),))
#test((1, 2).zip((3, 4)), ((1, 3), (2, 4)))
#test((1, 2).zip((3, 4), exact: true), ((1, 3), (2, 4)))
#test((1, 2, 3, 4).zip((5, 6)), ((1, 5), (2, 6)))
#test(((1, 2), 3).zip((4, 5)), (((1, 2), 4), (3, 5)))
#test((1, "hi").zip((true, false)), ((1, true), ("hi", false)))
#test((1, 2, 3).zip((3, 4, 5), (6, 7, 8)), ((1, 3, 6), (2, 4, 7), (3, 5, 8)))
#test(().zip((), ()), ())
#test((1,).zip((2,), (3,)), ((1, 2, 3),))
#test((1, 2, 3).zip(), ((1,), (2,), (3,)))
#test(array.zip(()), ())


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (group)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group
            (group)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group
            (group
              (number))))
        (group
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number))
            (ident))
          (group
            (group
              (number)
              (number))))
        (group
          (group
            (number)
            (number))
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number))
            (ident))
          (group
            (group
              (number)
              (number))
            (tagged
              (ident)
              (bool))))
        (group
          (group
            (number)
            (number))
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (group
              (number)
              (number))))
        (group
          (group
            (number)
            (number))
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (group
                (number)
                (number))
              (number))
            (ident))
          (group
            (group
              (number)
              (number))))
        (group
          (group
            (group
              (number)
              (number))
            (number))
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (string))
            (ident))
          (group
            (group
              (bool)
              (bool))))
        (group
          (group
            (number)
            (bool))
          (group
            (string)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group
            (group
              (number)
              (number)
              (number))
            (group
              (number)
              (number)
              (number))))
        (group
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (group)
            (group)))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group
            (group
              (number))
            (group
              (number))))
        (group
          (group
            (number)
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group))
        (group
          (group
            (number))
          (group
            (number))
          (group
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (group)))
        (group))))
  (parbreak))

====================
typst/array/array-zip-exact-error
====================

// Error: 13-22 second array has different length (3) from first array (2)
#(1, 2).zip((1, 2, 3), exact: true)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number))
        (ident))
      (group
        (group
          (number)
          (number)
          (number))
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/array/array-zip-exact-multi-error
====================

// Error: 13-22 array has different length (3) from first array (2)
// Error: 24-36 array has different length (4) from first array (2)
#(1, 2).zip((1, 2, 3), (1, 2, 3, 4), exact: true)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number))
        (ident))
      (group
        (group
          (number)
          (number)
          (number))
        (group
          (number)
          (number)
          (number)
          (number))
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/array/array-enumerate
====================

// Test the `enumerate` method.
#test(().enumerate(), ())
#test(().enumerate(start: 5), ())
#test(("a", "b", "c").enumerate(), ((0, "a"), (1, "b"), (2, "c")))
#test(("a", "b", "c").enumerate(start: 1), ((1, "a"), (2, "b"), (3, "c")))
#test(("a", "b", "c").enumerate(start: 42), ((42, "a"), (43, "b"), (44, "c")))
#test(("a", "b", "c").enumerate(start: -7), ((-7, "a"), (-6, "b"), (-5, "c")))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (tagged
              (ident)
              (number))))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group))
        (group
          (group
            (number)
            (string))
          (group
            (number)
            (string))
          (group
            (number)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (number))))
        (group
          (group
            (number)
            (string))
          (group
            (number)
            (string))
          (group
            (number)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (number))))
        (group
          (group
            (number)
            (string))
          (group
            (number)
            (string))
          (group
            (number)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (sign
                (number)))))
        (group
          (group
            (sign
              (number))
            (string))
          (group
            (sign
              (number))
            (string))
          (group
            (sign
              (number))
            (string))))))
  (parbreak))

====================
typst/array/array-dedup
====================

// Test the `dedup` method.
#test(().dedup(), ())
#test((1,).dedup(), (1,))
#test((1, 1).dedup(), (1,))
#test((1, 2, 1).dedup(), (1, 2))
#test(("Jane", "John", "Eric").dedup(), ("Jane", "John", "Eric"))
#test(("Jane", "John", "Eric", "John").dedup(), ("Jane", "John", "Eric"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number))
            (ident))
          (group))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number))
            (ident))
          (group))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number))
            (ident))
          (group))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string))
            (ident))
          (group))
        (group
          (string)
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group))
        (group
          (string)
          (string)
          (string)))))
  (parbreak))

====================
typst/array/array-dedup-key
====================

// Test the `dedup` method with the `key` argument.
#test((1, 2, 3, 4, 5, 6).dedup(key: x => calc.rem(x, 2)), (1, 2))
#test((1, 2, 3, 4, 5, 6).dedup(key: x => calc.rem(x, 3)), (1, 2, 3))
#test(("Hello", "World", "Hi", "There").dedup(key: x => x.len()), ("Hello", "Hi"))
#test(("Hello", "World", "Hi", "There").dedup(key: x => x.at(0)), ("Hello", "World", "There"))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (group
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (group
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group))))))
        (group
          (string)
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (string)
              (string)
              (string)
              (string))
            (ident))
          (group
            (tagged
              (ident)
              (lambda
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number)))))))
        (group
          (string)
          (string)
          (string)))))
  (parbreak))

====================
typst/array/array-to-dict
====================

// Test the `to-dict` method.
#test(().to-dict(), (:))
#test((("a", 1), ("b", 2), ("c", 3)).to-dict(), (a: 1, b: 2, c: 3))
#test((("a", 1), ("b", 2), ("c", 3), ("b", 4)).to-dict(), (a: 1, b: 4, c: 3))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group))
        (group))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (group
                (string)
                (number))
              (group
                (string)
                (number))
              (group
                (string)
                (number)))
            (ident))
          (group))
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (group
                (string)
                (number))
              (group
                (string)
                (number))
              (group
                (string)
                (number))
              (group
                (string)
                (number)))
            (ident))
          (group))
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/array/array-to-dict-bad-item-type
====================

// Error: 2-16 expected (str, any) pairs, found integer
#(1,).to-dict()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-to-dict-bad-pair-length-1
====================

// Error: 2-19 expected pairs of length 2, found length 1
#((1,),).to-dict()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (group
            (number)))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-to-dict-bad-pair-length-3
====================

// Error: 2-26 expected pairs of length 2, found length 3
#(("key",1,2),).to-dict()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (group
            (string)
            (number)
            (number)))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-to-dict-bad-key-type
====================

// Error: 2-21 expected key of type str, found integer
#((1, 2),).to-dict()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (group
            (number)
            (number)))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-zip-positional-and-named-argument
====================

// Error: 13-30 unexpected argument: val
#().zip((), val: "applicable")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group
        (group)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/array/array-sorted-bad-key
====================

// Error: 32-37 cannot divide by zero
#(1, 2, 0, 3).sorted(key: x => 5 / x)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number)
          (number))
        (ident))
      (group
        (tagged
          (ident)
          (lambda
            (ident)
            (div
              (number)
              (ident)))))))
  (parbreak))

====================
typst/array/array-sorted-uncomparable
====================

// Error: 2-26 cannot compare content and content
#([Hi], [There]).sorted()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (content
            (text))
          (content
            (text)))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-sorted-uncomparable-lengths
====================

// Error: 2-26 cannot compare 3em with 2pt
#(1pt, 2pt, 3em).sorted()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number
            (unit))
          (number
            (unit))
          (number
            (unit)))
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-sorted-key-function-positional-2
====================

// Error: 42-52 unexpected argument
#((k: "a", v: 2), (k: "b", v: 1)).sorted(it => it.v)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (number)))
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (number))))
        (ident))
      (group
        (lambda
          (ident)
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/array/issue-3014-mix-array-dictionary
====================

// Error: 8-17 expected expression, found named pair
#(box, fill: red)


--------------------

(source_file
  (comment)
  (code
    (group
      (ident)
      (tagged
        (ident)
        (ident))))
  (parbreak))

====================
typst/array/issue-3154-array-first-empty
====================

#{
  let array = ()
  // Error: 3-16 array is empty
  array.first()
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group))
      (comment)
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/array/issue-3154-array-first-mutable-empty
====================

#{
  let array = ()
  // Error: 3-16 array is empty
  array.first() = 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group))
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/issue-3154-array-last-empty
====================

#{
  let array = ()
  // Error: 3-15 array is empty
  array.last()
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group))
      (comment)
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/array/issue-3154-array-last-mutable-empty
====================

#{
  let array = ()
  // Error: 3-15 array is empty
  array.last() = 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group))
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/array/issue-3154-array-at-out-of-bounds
====================

#{
  let array = (1,)
  // Error: 3-14 array index out of bounds (index: 1, len: 1) and no default value was specified
  array.at(1)
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (number)))
      (comment)
      (call
        (field
          (ident)
          (ident))
        (group
          (number)))))
  (parbreak))

====================
typst/array/issue-3154-array-at-out-of-bounds-default
====================

#{
  let array = (1,)
  test(array.at(1, default: 0), 0)
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (number)))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (number)
              (tagged
                (ident)
                (number))))
          (number)))))
  (parbreak))

====================
typst/array/issue-3154-array-at-out-of-bounds-mutable
====================

#{
  let array = (1,)
  // Error: 3-14 array index out of bounds (index: 1, len: 1)
  array.at(1) = 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (number)))
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/array/issue-3154-array-at-out-of-bounds-mutable-default
====================

#{
  let array = (1,)
  // Error: 3-26 array index out of bounds (index: 1, len: 1)
  array.at(1, default: 0) = 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (number)))
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (number))))
  (parbreak))

====================
typst/array/array-unopened
====================

// Error: 2-3 unclosed delimiter
#{)}


--------------------



====================
typst/array/array-unclosed
====================

// Error: 3-4 unclosed delimiter
#{(}


--------------------



====================
typst/array/array-reduce
====================

// Test the `reduce` method.
#test(().reduce(grid), none)
#test((1, 2, 3, 4).reduce((s, x) => s + x), 10)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group)
            (ident))
          (group
            (ident)))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number)
              (number)
              (number)
              (number))
            (ident))
          (group
            (lambda
              (group
                (ident)
                (ident))
              (add
                (ident)
                (ident)))))
        (number))))
  (parbreak))

====================
typst/array/array-reduce-missing-reducer
====================

// Error: 2-13 missing argument: reducer
#().reduce()


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group)
        (ident))
      (group)))
  (parbreak))

====================
typst/array/array-reduce-unexpected-argument
====================

// Error: 19-21 unexpected argument
#(1, 2, 3).reduce(() => none)
--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (group
          (number)
          (number)
          (number))
        (ident))
      (group
        (lambda
          (group)
          (none))))))

====================
typst/type/type
====================

#test(type(1), int)
#test(type(ltr), direction)
#test(type(10 / 3), float)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (div
              (number)
              (number))))
        (ident))))
  (parbreak))

====================
typst/type/issue-3110-type-constructor
====================

// Let the error message report the type name.
// Error: 2-9 type content does not have a constructor
#content()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/type/issue-3110-associated-field
====================

// Error: 6-12 type integer does not contain field `MAXVAL`
#int.MAXVAL


--------------------

(source_file
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/type/issue-3110-associated-function
====================

// Error: 6-18 type string does not contain field `from-unïcode`
#str.from-unïcode(97)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/type/issue-2747-repr-auto-none
====================

#test(repr(none), "none")
#test(repr(auto), "auto")
#test(repr(type(none)), "type(none)")
#test(repr(type(auto)), "type(auto)")
--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (none)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (auto)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (none)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (auto)))))
        (string)))))

====================
typst/arguments/arguments-at
====================

#let args = arguments(0, 1, a: 2, 3)
#test(args.at(0), 0)
#test(args.at(1), 1)
#test(args.at(2), 3)
#test(args.at("a"), 2)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)
          (tagged
            (ident)
            (number))
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/arguments/arguments-at-invalid-index
====================

#let args = arguments(0, 1, a: 2, 3)
// Error: 2-12 arguments do not contain key 4 and no default value was specified
#args.at(4)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)
          (tagged
            (ident)
            (number))
          (number)))))
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/arguments/arguments-at-invalid-name
====================

#let args = arguments(0, 1, a: 2, 3)
// Error: 2-14 arguments do not contain key "b" and no default value was specified
#args.at("b")


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)
          (tagged
            (ident)
            (number))
          (number)))))
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/arguments/arguments-plus-sum-join
====================

#let lhs = arguments(0, "1", key: "value", 3)
#let rhs = arguments(other-key: 4, key: "other value", 3)
#let result = arguments(0, "1", 3, other-key: 4, key: "other value", 3)
#test(lhs + rhs, result)
#test({lhs; rhs}, result)
#test((lhs, rhs).sum(), result)
#test((lhs, rhs).join(), result)
--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)
          (string)
          (tagged
            (ident)
            (string))
          (number)))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (string))
          (number)))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)
          (string)
          (number)
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (string))
          (number)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (block
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (ident)
              (ident))
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (ident)
              (ident))
            (ident))
          (group))
        (ident)))))

====================
typst/eval/eval
====================

// Test the eval function.
#test(eval("1 + 2"), 3)
#test(eval("1 + x", scope: (x: 3)), 4)
#test(eval("let x = x + 1; x + 1", scope: (x: 1)), 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number))))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number))))))
        (number))))
  (parbreak))

====================
typst/eval/eval-mode
====================

// Test evaluation in other modes.
#eval("[_Hello" + " World!_]") \
#eval("_Hello" + " World!_", mode: "markup") \
#eval("RR_1^NN", mode: "math", scope: (RR: math.NN, NN: math.RR))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (string)
          (string)))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (add
          (string)
          (string))
        (tagged
          (ident)
          (string)))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (field
                (ident)
                (ident)))
            (tagged
              (ident)
              (field
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/eval/eval-syntax-error-1
====================

// Error: 7-12 expected pattern
#eval("let")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/eval/eval-in-show-rule
====================

#show raw: it => text(font: "PT Sans", eval("[" + it.text + "]"))

Interacting
```
#set text(blue)
Blue #move(dy: -0.15em)[🌊]
```


--------------------

(source_file
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (call
              (ident)
              (group
                (add
                  (add
                    (string)
                    (field
                      (ident)
                      (ident)))
                  (string)))))))))
  (parbreak)
  (text)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/eval/eval-runtime-error
====================

// Error: 7-17 cannot continue outside of loop
#eval("continue")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/eval/eval-syntax-error-2
====================

// Error: 7-12 expected semicolon or line break
#eval("1 2")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/eval/eval-path-resolve
====================

// Test absolute path.
#eval("image(\"/assets/images/tiger.jpg\", width: 50%)")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string
          (escape)
          (escape)))))
  (parbreak))

====================
typst/eval/eval-path-resolve-in-show-rule
====================

#show raw: it => eval(it.text, mode: "markup")

```
#show emph: image("/assets/images/tiger.jpg", width: 50%)
_Tiger!_
```


--------------------

(source_file
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))
            (tagged
              (ident)
              (string)))))))
  (parbreak)
  (raw_blck
    (blob))
  (parbreak))

====================
typst/eval/eval-path-resolve-relative
====================

// Test relative path.
#test(eval(`"HELLO" in read("./eval.typ")`.text), true)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (raw_span
                (blob))
              (ident))))
        (bool))))
  (parbreak))

====================
typst/eval/issue-2055-math-eval
====================

// Evaluating a math expr should renders the same as an equation
#eval(mode: "math", "f(a) = cases(a + b\, space space x >= 3,a + b\, space space x = 5)")

$f(a) = cases(a + b\, space space x >= 3,a + b\, space space x = 5)$
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (string
          (escape)
          (escape)))))
  (parbreak)
  (math
    (formula
      (apply
        (letter)
        (formula
          (letter)))
      (symbol)
      (call
        (ident)
        (formula
          (letter)
          (symbol)
          (letter)
          (escape)
          (ident)
          (ident)
          (letter)
          (shorthand)
          (number))
        (formula
          (letter)
          (symbol)
          (letter)
          (escape)
          (ident)
          (ident)
          (letter)
          (symbol)
          (number))))))

====================
typst/std/std-basic-access
====================

#test(std.grid, grid)
#test(std.calc, calc)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (ident))))
  (parbreak))

====================
typst/std/std-import
====================

#import std: grid as banana
#test(grid, banana)


--------------------

(source_file
  (code
    (import
      (ident)
      (binding
        (ident)
        (as
          (ident)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (parbreak))

====================
typst/std/std-of-shadowed
====================

#let my-grid = grid[a][b]
#let grid = "oh no!"
#test(my-grid.func(), std.grid)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (call
          (ident)
          (content
            (text)))
        (content
          (text)))))
  (code
    (let
      (ident)
      (string)))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (field
          (ident)
          (ident)))))
  (parbreak))

====================
typst/std/std-shadowing
====================

#let std = 5
// Error: 6-10 cannot access fields on type integer
#std.grid


--------------------

(source_file
  (code
    (let
      (ident)
      (number)))
  (comment)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/std/std-mutation
====================

// Error: 3-6 cannot mutate a constant: std
#(std = 10)


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (ident)
        (number))))
  (parbreak))

====================
typst/std/std-shadowed-mutation
====================

#let std = 10
#(std = 7)
#test(std, 7)


--------------------

(source_file
  (code
    (let
      (ident)
      (number)))
  (code
    (group
      (assign
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/std/std-math
====================

$ std.rect(x + y = 5) $
--------------------

(source_file
  (math
    (formula
      (call
        (field
          (ident)
          (ident))
        (formula
          (letter)
          (symbol)
          (letter)
          (symbol)
          (number))))))

====================
typst/float/float-constructor
====================

#test(float(10), 10.0)
#test(float(50% * 30%), 0.15)
#test(float("31.4e-1"), 3.14)
#test(float("31.4e\u{2212}1"), 3.14)
#test(float("3.1415"), 3.1415)
#test(float("-7654.321"), -7654.321)
#test(float("\u{2212}7654.321"), -7654.321)
#test(float(decimal("4.89")), 4.89)
#test(float(decimal("3.1234567891234567891234567891")), 3.123456789123457)
#test(float(decimal("79228162514264337593543950335")), 79228162514264340000000000000.0)
#test(float(decimal("-79228162514264337593543950335")), -79228162514264340000000000000.0)
#test(type(float(10)), float)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (mul
              (number
                (unit))
              (number
                (unit)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string
              (escape))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string
              (escape))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)))))
        (ident))))
  (parbreak))

====================
typst/float/float-constructor-bad-type
====================

// Error: 8-13 expected float, boolean, integer, decimal, ratio, or string, found type
#float(float)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak))

====================
typst/float/float-constructor-bad-value
====================

// Error: 8-15 invalid float: 1.2.3
#float("1.2.3")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/float/float-is-nan
====================

// Test float `is-nan()`.
#test(float(float.nan).is-nan(), true)
#test(float(10).is-nan(), false)
#test(float(calc.inf).is-nan(), false)
#test(float(-calc.inf).is-nan(), false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (field
                    (ident)
                    (ident)))))
            (ident))
          (group))
        (bool))))
  (parbreak))

====================
typst/float/float-is-infinite
====================

// Test float `is-infinite()`.
#test(float(calc.inf).is-infinite(), true)
#test(float(-calc.inf).is-infinite(), true)
#test(float(10).is-infinite(), false)
#test(float(-10).is-infinite(), false)
#test(float(float.nan).is-infinite(), false)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (field
                    (ident)
                    (ident)))))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (number))))
            (ident))
          (group))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))))
            (ident))
          (group))
        (bool))))
  (parbreak))

====================
typst/float/float-signum
====================

// Test float `signum()`
#test(float(0.0).signum(), 1.0)
#test(float(1.0).signum(), 1.0)
#test(float(-1.0).signum(), -1.0)
#test(float(10.0).signum(), 1.0)
#test(float(-10.0).signum(), -1.0)
#test(float(calc.inf).signum(), 1.0)
#test(float(-calc.inf).signum(), -1.0)
#test(float(float.nan).signum().is-nan(), true)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (number))))
            (ident))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (number))))
            (ident))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (sign
                  (field
                    (ident)
                    (ident)))))
            (ident))
          (group))
        (sign
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (call
                  (ident)
                  (group
                    (field
                      (ident)
                      (ident))))
                (ident))
              (group))
            (ident))
          (group))
        (bool))))
  (parbreak))

====================
typst/float/float-from-and-to-bytes
====================

// Test float `from-bytes()` and `to-bytes()`.
#test(float.from-bytes(bytes((0, 0, 0, 0, 0, 0, 240, 63))), 1.0)
#test(float.from-bytes(bytes((63, 240, 0, 0, 0, 0, 0, 0)), endian: "big"), 1.0)
#test(1.0.to-bytes(), bytes((0, 0, 0, 0, 0, 0, 240, 63)))
#test(1.0.to-bytes(endian: "big"), bytes((63, 240, 0, 0, 0, 0, 0, 0)))

#test(float.from-bytes(bytes((0, 0, 32, 64))), 2.5)
#test(float.from-bytes(bytes((64, 32, 0, 0)), endian: "big"), 2.5)
#test(2.5.to-bytes(size: 4), bytes((0, 0, 32, 64)))
#test(2.5.to-bytes(size: 4, endian: "big"), bytes((64, 32, 0, 0)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number))))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number)
                  (number))))
            (tagged
              (ident)
              (string))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number)
            (ident))
          (group))
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number)
            (ident))
          (group
            (tagged
              (ident)
              (string))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number))))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (group
                  (number)
                  (number)
                  (number)
                  (number))))
            (tagged
              (ident)
              (string))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number)
            (ident))
          (group
            (tagged
              (ident)
              (number))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (string))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)))))))
  (parbreak))

====================
typst/float/float-from-bytes-bad-length
====================

// Error: 2-54 bytes must have a length of 4 or 8
#float.from-bytes(bytes((0, 0, 0, 0, 0, 0, 0, 1, 0)))


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)
              (number)))))))
  (parbreak))

====================
typst/float/float-repr
====================

// Test the `repr` function with floats.
#test(repr(12.0), "12.0")
#test(repr(3.14), "3.14")
#test(repr(1234567890.0), "1234567890.0")
#test(repr(0123456789.0), "123456789.0")
#test(repr(0.0), "0.0")
#test(repr(-0.0), "-0.0")
#test(repr(-1.0), "-1.0")
#test(repr(-9876543210.0), "-9876543210.0")
#test(repr(-0987654321.0), "-987654321.0")
#test(repr(-3.14), "-3.14")
#test(repr(4.0 - 8.0), "-4.0")
#test(repr(float.inf), "float.inf")
#test(repr(-float.inf), "-float.inf")
#test(repr(float.nan), "float.nan")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (number)
              (number))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sign
              (field
                (ident)
                (ident)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (string))))
  (parbreak))

====================
typst/float/float-display
====================

// Test floats.
#12.0 \
#3.14 \
#1234567890.0 \
#0123456789.0 \
#0.0 \
#(-0.0) \
#(-1.0) \
#(-9876543210.0) \
#(-0987654321.0) \
#(-3.14) \
#(4.0 - 8.0) \
#float.inf \
#(-float.inf) \
#float.nan


--------------------

(source_file
  (comment)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (number))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sign
        (number))))
  (linebreak)
  (code
    (group
      (sub
        (number)
        (number))))
  (linebreak)
  (code
    (field
      (ident)
      (ident)))
  (linebreak)
  (code
    (group
      (sign
        (field
          (ident)
          (ident)))))
  (linebreak)
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/float/float-syntax-edge-cases
====================

// Test float syntax edge cases and which spans of text are highlighted. Valid
// items are those not annotated with an error comment since syntax is handled
// at parse time.

#123.456e+789
#000.000E-000
#.9e0
#123.E // this is a field access, so is fine syntactically
#0.e
#1.E+020
// Error: 2-10 invalid number: 123.456e
#123.456e
// Error: 2-11 invalid number: 123.456e+
#123.456e+
// Error: 2-6 invalid number: .1E-
#.1E-
// Error: 2-4 invalid number: 0e
#0e
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (parbreak)
  (code
    (number))
  (code
    (number))
  (text)
  (code
    (number))
  (code
    (number))
  (text)
  (comment)
  (code
    (number
      (unit)))
  (code
    (number))
  (text)
  (comment)
  (code
    (number
      (unit)))
  (comment)
  (code
    (number
      (unit)))
  (text)
  (comment)
  (code
    (number))
  (text)
  (comment)
  (code
    (number
      (unit))))

====================
typst/plugin/plugin-basic
====================

#let p = plugin("/assets/plugins/hello.wasm")
#test(p.hello(), bytes("Hello from wasm!!!"))
#test(p.double_it(bytes("hey!")), bytes("hey!.hey!"))
#test(
  p.shuffle(bytes("value1"), bytes("value2"), bytes("value3")),
  bytes("value3-value1-value2"),
)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/plugin/plugin-wrong-number-of-arguments
====================

#let p = plugin("/assets/plugins/hello.wasm")

// Error: 2-20 plugin function takes 0 arguments, but 1 was given
#p.hello(bytes(""))


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/plugin/plugin-wrong-argument-type
====================

#let p = plugin("/assets/plugins/hello.wasm")

// Error: 10-14 expected bytes, found boolean
// Error: 27-29 expected bytes, found integer
#p.hello(true, bytes(()), 10)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (bool)
        (call
          (ident)
          (group
            (group)))
        (number))))
  (parbreak))

====================
typst/plugin/plugin-error
====================

#let p = plugin("/assets/plugins/hello.wasm")

// Error: 2-17 plugin errored with: This is an `Err`
#p.returns_err()


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/plugin/plugin-panic
====================

#let p = plugin("/assets/plugins/hello.wasm")

// Error: 2-16 plugin panicked: wasm `unreachable` instruction executed
#p.will_panic()


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/plugin/plugin-out-of-bounds-read
====================

#let p = plugin("/assets/plugins/plugin-oob.wasm")

// Error: 2-14 plugin tried to read out of bounds: pointer 0x40000000 is out of bounds for read of length 1
#p.read_oob()


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/plugin/plugin-out-of-bounds-write
====================

#let p = plugin("/assets/plugins/plugin-oob.wasm")

// Error: 2-27 plugin tried to write out of bounds: pointer 0x40000000 is out of bounds for write of length 3
#p.write_oob(bytes("xyz"))
--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))))))

====================
typst/label/label-show-where-selector
====================

// Test labelled headings.
#show heading: set text(10pt)
#show heading.where(label: <intro>): underline

= Introduction <intro>
The beginning.

= Conclusion
The end.


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (label))))
      (ident)))
  (parbreak)
  (section
    (heading
      (text)
      (label))
    (content
      (text)
      (parbreak)))
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak))))

====================
typst/label/label-after-expression
====================

// Test label after expression.
#show strong.where(label: <v>): set text(red)

#let a = [*A*]
#let b = [*B*]
#a <v> #b


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (label))))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (parbreak)
  (code
    (let
      (ident)
      (content
        (strong
          (text)))))
  (code
    (let
      (ident)
      (content
        (strong
          (text)))))
  (code
    (ident))
  (label)
  (code
    (ident))
  (parbreak))

====================
typst/label/label-dynamic-show-set
====================

// Test abusing dynamic labels for styling.
#show <red>: set text(red)
#show <blue>: set text(blue)

*A* *B* <red> *C* #label("bl" + "ue") *D*


--------------------

(source_file
  (comment)
  (code
    (show
      (label)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (label)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (parbreak)
  (strong
    (text))
  (strong
    (text))
  (label)
  (strong
    (text))
  (code
    (call
      (ident)
      (group
        (add
          (string)
          (string)))))
  (strong
    (text))
  (parbreak))

====================
typst/label/label-after-parbreak
====================

// Test that label ignores parbreak.
#show <hide>: none

_Hidden_
<hide>

_Hidden_

<hide>
_Visible_


--------------------

(source_file
  (comment)
  (code
    (show
      (label)
      (none)))
  (parbreak)
  (emph
    (text))
  (label)
  (parbreak)
  (emph
    (text))
  (parbreak)
  (label)
  (emph
    (text))
  (parbreak))

====================
typst/label/label-in-block
====================

// Test that label only works within one content block.
#show <strike>: strike
// Warning: 13-21 label `<strike>` is not attached to anything
*This is* #[<strike>] *protected.*
*This is not.* <strike>


--------------------

(source_file
  (comment)
  (code
    (show
      (label)
      (ident)))
  (comment)
  (strong
    (text))
  (code
    (content
      (label)))
  (strong
    (text))
  (strong
    (text))
  (label)
  (parbreak))

====================
typst/label/label-unclosed-is-text
====================

// Test that incomplete label is text.
1 < 2 is #if 1 < 2 [not] a label.


--------------------



====================
typst/label/label-text-styled-and-sequence
====================

// Test label on text, styled, and sequence.
#test([Hello<hi>].label, <hi>)
#test([#[A *B* C]<hi>].label, <hi>)
#test([#text(red)[Hello]<hi>].label, <hi>)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (content
            (text)
            (label))
          (ident))
        (label))))
  (code
    (call
      (ident)
      (group
        (field
          (content
            (code
              (content
                (text)
                (strong
                  (text))
                (text)))
            (label))
          (ident))
        (label))))
  (code
    (call
      (ident)
      (group
        (field
          (content
            (code
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (text))))
            (label))
          (ident))
        (label))))
  (parbreak))

====================
typst/label/label-string-conversion
====================

// Test getting the name of a label.
#test(str(<hey>), "hey")
#test(str(label("hey")), "hey")
#test(str([Hmm<hey>].label), "hey")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (label)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (content
                (text)
                (label))
              (ident))))
        (string))))
  (parbreak))

====================
typst/label/label-in-code-mode-hint
====================

// Error: 7-7 expected semicolon or line break
// Hint: 7-7 labels can only be applied in markup mode
// Hint: 7-7 try wrapping your code in a markup block (`[ ]`)
#{ [A] <a> }


--------------------



====================
typst/label/label-multiple-ignored-warn
====================

// Warning: 1-8 content labelled multiple times
// Hint: 1-8 only the last label is used, the rest are ignored
= Hello <a> <b>

// Warning: 12-19 content labelled multiple times
// Hint: 12-19 only the last label is used, the rest are ignored
#let f = [#block()<c>]
#f<d>

// Warning: 6-13 content labelled multiple times
// Hint: 6-13 only the last label is used, the rest are ignored
#[#[#block()]<e>]<f>

// Error: 1-3 label `<a>` does not exist in the document
@a


--------------------

(source_file
  (comment)
  (comment)
  (section
    (heading
      (text)
      (label)
      (label))
    (content
      (parbreak)
      (comment)
      (comment)
      (code
        (let
          (ident)
          (content
            (code
              (call
                (ident)
                (group)))
            (label))))
      (code
        (ident))
      (label)
      (parbreak)
      (comment)
      (comment)
      (code
        (content
          (code
            (content
              (code
                (call
                  (ident)
                  (group)))))
          (label)))
      (label)
      (parbreak)
      (comment)
      (ref)
      (parbreak))))

====================
typst/label/label-unattached-warn
====================

#set heading(numbering: "1.")
// Warning: 1-4 label `<a>` is not attached to anything
<a>


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (comment)
  (label)
  (parbreak))

====================
typst/label/label-non-existent-error
====================

// Error: 5-10 sequence does not have field "label"
#[].label
--------------------

(source_file
  (comment)
  (code
    (field
      (content)
      (ident))))

====================
typst/datetime/datetime-constructor-empty
====================

// Error: 2-12 at least one of date or time must be fully specified
#datetime()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/datetime/datetime-constructor-time-invalid
====================

// Error: 2-42 time is invalid
#datetime(hour: 25, minute: 0, second: 0)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/datetime/datetime-constructor-date-invalid
====================

// Error: 2-41 date is invalid
#datetime(year: 2000, month: 2, day: 30)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/datetime/datetime-display
====================

// Test displaying of dates.
#test(datetime(year: 2023, month: 4, day: 29).display(), "2023-04-29")
#test(datetime(year: 2023, month: 4, day: 29).display("[year]"), "2023")
#test(
  datetime(year: 2023, month: 4, day: 29)
    .display("[year repr:last_two]"),
  "23",
)
#test(
  datetime(year: 2023, month: 4, day: 29)
    .display("[year] [month repr:long] [day] [week_number] [weekday]"),
  "2023 April 29 17 Saturday",
)

// Test displaying of times
#test(datetime(hour: 14, minute: 26, second: 50).display(), "14:26:50")
#test(datetime(hour: 14, minute: 26, second: 50).display("[hour]"), "14")
#test(
  datetime(hour: 14, minute: 26, second: 50)
    .display("[hour repr:12 padding:none]"),
  "2",
)
#test(
  datetime(hour: 14, minute: 26, second: 50)
    .display("[hour], [minute], [second]"), "14, 26, 50",
)

// Test displaying of datetimes
#test(
  datetime(year: 2023, month: 4, day: 29, hour: 14, minute: 26, second: 50).display(),
  "2023-04-29 14:26:50",
)

// Test getting the year/month/day etc. of a datetime
#let d = datetime(year: 2023, month: 4, day: 29, hour: 14, minute: 26, second: 50)
#test(d.year(), 2023)
#test(d.month(), 4)
#test(d.weekday(), 6)
#test(d.day(), 29)
#test(d.hour(), 14)
#test(d.minute(), 26)
#test(d.second(), 50)

#let e = datetime(year: 2023, month: 4, day: 29)
#test(e.hour(), none)
#test(e.minute(), none)
#test(e.second(), none)

// Test today
#test(datetime.today().display(), "1970-01-01")
#test(datetime.today(offset: auto).display(), "1970-01-01")
#test(datetime.today(offset: 2).display(), "1970-01-01")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group
            (string)))
        (string))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (string))))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (none))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (none))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (auto))))
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (string))))
  (parbreak))

====================
typst/datetime/datetime-ordinal
====================

// Test date methods.
#test(datetime(day: 1, month: 1, year: 2000).ordinal(), 1);
#test(datetime(day: 1, month: 3, year: 2000).ordinal(), 31 + 29 + 1);
#test(datetime(day: 31, month: 12, year: 2000).ordinal(), 366);
#test(datetime(day: 1, month: 3, year: 2001).ordinal(), 31 + 28 + 1);
#test(datetime(day: 31, month: 12, year: 2001).ordinal(), 365);


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (add
          (add
            (number)
            (number))
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (add
          (add
            (number)
            (number))
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/datetime/datetime-display-missing-closing-bracket
====================

// Error: 27-34 missing closing bracket for bracket at index 0
#datetime.today().display("[year")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/datetime/datetime-display-invalid-component
====================

// Error: 27-38 invalid component name 'nothing' at index 1
#datetime.today().display("[nothing]")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/datetime/datetime-display-invalid-modifier
====================

// Error: 27-50 invalid modifier 'wrong' at index 6
#datetime.today().display("[year wrong:last_two]")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/datetime/datetime-display-expected-component
====================

// Error: 27-33 expected component name at index 2
#datetime.today().display("  []")


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))
      (group
        (string))))
  (parbreak))

====================
typst/datetime/datetime-display-insufficient-information
====================

// Error: 2-36 failed to format datetime (insufficient information)
#datetime.today().display("[hour]")
--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))
      (group
        (string)))))

====================
typst/dict/dict-basic-syntax
====================


// Empty
#(:)

// Two pairs and string key.
#let dict = (normal: 1, "spacy key": 2)
#dict

#test(dict.normal, 1)
#test(dict.at("spacy key"), 2)


--------------------

(source_file
  (parbreak)
  (comment)
  (code
    (group))
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (string)
          (number)))))
  (code
    (ident))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/dict/dict-fields
====================

// Test field on dictionary.
#let dict = (nothing: "ness", hello: "world")
#test(dict.nothing, "ness")
#{
  let world = dict
    .hello

  test(world, "world")
}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (string))))
  (code
    (block
      (let
        (ident)
        (field
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (ident)
          (string)))))
  (parbreak))

====================
typst/dict/dict-missing-field
====================

// Error: 6-13 dictionary does not contain key "invalid"
#(:).invalid


--------------------

(source_file
  (comment)
  (code
    (field
      (group)
      (ident)))
  (parbreak))

====================
typst/dict/dict-bad-key
====================

// Error: 3-7 expected string, found boolean
// Error: 16-18 expected string, found integer
#(true: false, 42: 3)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (tagged
        (bool)
        (bool))
      (tagged
        (number)
        (number))))
  (parbreak))

====================
typst/dict/dict-duplicate-key
====================

// Error: 24-29 duplicate key: first
#(first: 1, second: 2, first: 3)


--------------------

(source_file
  (comment)
  (code
    (group
      (tagged
        (ident)
        (number))
      (tagged
        (ident)
        (number))
      (tagged
        (ident)
        (number))))
  (parbreak))

====================
typst/dict/dict-duplicate-key-stringy
====================

// Error: 17-20 duplicate key: a
#(a: 1, "b": 2, "a": 3)


--------------------

(source_file
  (comment)
  (code
    (group
      (tagged
        (ident)
        (number))
      (tagged
        (string)
        (number))
      (tagged
        (string)
        (number))))
  (parbreak))

====================
typst/dict/dict-bad-expression
====================

// Simple expression after already being identified as a dictionary.
// Error: 9-10 expected named or keyed pair, found identifier
#(a: 1, b)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (tagged
        (ident)
        (number))
      (ident)))
  (parbreak))

====================
typst/dict/dict-leading-colon
====================

// Identified as dictionary due to initial colon.
// The boolean key is allowed for now since it will only cause an error at the evaluation stage.
// Error: 4-5 expected named or keyed pair, found integer
// Error: 17 expected expression
#(:1 b:"", true:)


--------------------



====================
typst/dict/spread-into-dict
====================

#{
  let x = (a: 1)
  let y = (b: 2)
  let z = (a: 3)
  test((:..x, ..y, ..z), (a: 3, b: 2))
  test((..(a: 1), b: 2), (a: 1, b: 2))
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (call
        (ident)
        (group
          (group
            (elude
              (ident))
            (elude
              (ident))
            (elude
              (ident)))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))
      (call
        (ident)
        (group
          (group
            (call
              (elude)
              (group
                (tagged
                  (ident)
                  (number))))
            (tagged
              (ident)
              (number)))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/dict/spread-array-into-dict
====================

// Error: 3-11 cannot spread array into dictionary
#(..(1, 2), a: 1)


--------------------

(source_file
  (comment)
  (code
    (group
      (elude
        (group
          (number)
          (number)))
      (tagged
        (ident)
        (number))))
  (parbreak))

====================
typst/dict/dict-at-lvalue
====================

// Test lvalue and rvalue access.
#{
  let dict = (a: 1, "b b": 1)
  dict.at("b b") += 1
  dict.state = (ok: true, err: false)
  test(dict, (a: 1, "b b": 2, state: (ok: true, err: false)))
  test(dict.state.ok, true)
  dict.at("state").ok = false
  test(dict.state.ok, false)
  test(dict.state.err, false)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (string)
            (number))))
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (number))
      (assign
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (bool))))
      (call
        (ident)
        (group
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (string)
              (number))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (bool))
                (tagged
                  (ident)
                  (bool)))))))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (bool)))
      (assign
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (string)))
          (ident))
        (bool))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (bool)))
      (call
        (ident)
        (group
          (field
            (field
              (ident)
              (ident))
            (ident))
          (bool)))))
  (parbreak))

====================
typst/dict/dict-at-missing-key
====================

// Test rvalue missing key.
#{
  let dict = (a: 1, b: 2)
  // Error: 11-23 dictionary does not contain key "c" and no default value was specified
  let x = dict.at("c")
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))
      (comment)
      (let
        (ident)
        (call
          (field
            (ident)
            (ident))
          (group
            (string))))))
  (parbreak))

====================
typst/dict/dict-at-default
====================

// Test default value.
#test((a: 1, b: 2).at("b", default: 3), 2)
#test((a: 1, b: 2).at("c", default: 3), 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number)))
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (number))))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number)))
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (number))))
        (number))))
  (parbreak))

====================
typst/dict/dict-insert
====================

// Test insert.
#{
  let dict = (a: 1, b: 2)
  dict.insert("b", 3)
  test(dict, (a: 1, b: 3))
  dict.insert("c", 5)
  test(dict, (a: 1, b: 3, c: 5))
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))
      (call
        (field
          (ident)
          (ident))
        (group
          (string)
          (number)))
      (call
        (ident)
        (group
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))
      (call
        (field
          (ident)
          (ident))
        (group
          (string)
          (number)))
      (call
        (ident)
        (group
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/dict/dict-remove-with-default
====================

// Test remove with default value.
#{
  let dict = (a: 1, b: 2)
  test(dict.remove("b", default: 3), 2)
}

#{
  let dict = (a: 1, b: 2)
  test(dict.remove("c", default: 3), 3)
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (string)
              (tagged
                (ident)
                (number))))
          (number)))))
  (parbreak)
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (string)
              (tagged
                (ident)
                (number))))
          (number)))))
  (parbreak))

====================
typst/dict/dict-missing-lvalue
====================

// Missing lvalue is not automatically none-initialized.
#{
  let dict = (:)
  // Error: 3-9 dictionary does not contain key "b"
  // Hint: 3-9 use `insert` to add or update values
  dict.b += 1
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (group))
      (comment)
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (number))))
  (parbreak))

====================
typst/dict/dict-basic-methods
====================

// Test dictionary methods.
#let dict = (a: 3, c: 2, b: 1)
#test("c" in dict, true)
#test(dict.len(), 3)
#test(dict.values(), (3, 2, 1))
#test(dict.pairs().map(p => p.first() + str(p.last())).join(), "a3c2b1")

#dict.remove("c")
#test("c" in dict, false)
#test(dict, (a: 3, b: 1))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (group
          (number)
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (field
                (call
                  (field
                    (ident)
                    (ident))
                  (group))
                (ident))
              (group
                (lambda
                  (ident)
                  (add
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))
                    (call
                      (ident)
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))))))))
            (ident))
          (group))
        (string))))
  (parbreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string))))
  (code
    (call
      (ident)
      (group
        (in
          (string)
          (ident))
        (bool))))
  (code
    (call
      (ident)
      (group
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/dict/dict-from-module
====================

// Test dictionary constructor
#test(type(dictionary(sys).at("version")), version)
#test(dictionary(sys).at("no-crash", default: none), none)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (ident)
                  (group
                    (ident)))
                (ident))
              (group
                (string)))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (ident)))
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (none))))
        (none))))
  (parbreak))

====================
typst/dict/dict-remove-order
====================

// Test that removal keeps order.
#let dict = (a: 1, b: 2, c: 3, d: 4)
#dict.remove("b")
#test(dict.keys(), ("a", "c", "d"))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number)))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (group
          (string)
          (string)
          (string)))))
  (parbreak))

====================
typst/dict/dict-temporary-lvalue
====================

// Error: 3-15 cannot mutate a temporary value
#((key: "val").other = "some")


--------------------

(source_file
  (comment)
  (code
    (group
      (assign
        (field
          (group
            (tagged
              (ident)
              (string)))
          (ident))
        (string))))
  (parbreak))

====================
typst/dict/dict-function-item-not-a-method
====================

#{
  let dict = (
    call-me: () => 1,
  )
  // Error: 8-15 type dictionary has no method `call-me`
  // Hint: 8-15 to call the function stored in the dictionary, surround the field access with parentheses, e.g. `(dict.call-me)(..)`
  dict.call-me()
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (group)
              (number)))))
      (comment)
      (comment)
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/dict/dict-item-missing-method
====================

#{
  let dict = (
    nonfunc: 1
  )

  // Error: 8-15 type dictionary has no method `nonfunc`
  // Hint: 8-15 did you mean to access the field `nonfunc`?
  dict.nonfunc()
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (comment)
      (comment)
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/dict/dict-dynamic-duplicate-key
====================

#let a = "hello"
#let b = "world"
#let c = "value"
#let d = "conflict"

#test(((a): b), ("hello": "world"))
#test(((a): 1, (a): 2), ("hello": 2))
#test((hello: 1, (a): 2), ("hello": 2))
#test((a + b: c, (a + b): d, (a): "value2", a: "value3"), ("helloworld": "conflict", "hello": "value2", "a": "value3"))


--------------------

(source_file
  (code
    (let
      (ident)
      (string)))
  (code
    (let
      (ident)
      (string)))
  (code
    (let
      (ident)
      (string)))
  (code
    (let
      (ident)
      (string)))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (group
              (ident))
            (ident)))
        (group
          (tagged
            (string)
            (string))))))
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (group
              (ident))
            (number))
          (tagged
            (group
              (ident))
            (number)))
        (group
          (tagged
            (string)
            (number))))))
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (group
              (ident))
            (number)))
        (group
          (tagged
            (string)
            (number))))))
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (add
              (ident)
              (ident))
            (ident))
          (tagged
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (tagged
            (group
              (ident))
            (string))
          (tagged
            (ident)
            (string)))
        (group
          (tagged
            (string)
            (string))
          (tagged
            (string)
            (string))
          (tagged
            (string)
            (string))))))
  (parbreak))

====================
typst/dict/issue-1338-dictionary-underscore
====================

#let foo = "foo"
#let bar = "bar"
// Error: 8-9 expected expression, found underscore
// Error: 16-17 expected expression, found underscore
#(foo: _, bar: _)


--------------------

(source_file
  (code
    (let
      (ident)
      (string)))
  (code
    (let
      (ident)
      (string)))
  (comment)
  (comment)
  (code
    (group
      (tagged
        (ident)
        (ident))
      (tagged
        (ident)
        (ident))))
  (parbreak))

====================
typst/dict/issue-1342-dictionary-bare-expressions
====================

// Error: 5-8 expected named or keyed pair, found identifier
// Error: 10-13 expected named or keyed pair, found identifier
#(: foo, bar)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (group
      (ident)
      (ident)))
  (parbreak))

====================
typst/dict/issue-3154-dict-at-not-contained
====================

#{
  let dict = (a: 1)
  // Error: 3-15 dictionary does not contain key "b" and no default value was specified
  dict.at("b")
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (comment)
      (call
        (field
          (ident)
          (ident))
        (group
          (string)))))
  (parbreak))

====================
typst/dict/issue-3154-dict-at-missing-default
====================

#{
  let dict = (a: 1)
  test(dict.at("b", default: 0), 0)
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (string)
              (tagged
                (ident)
                (number))))
          (number)))))
  (parbreak))

====================
typst/dict/issue-3154-dict-at-missing-mutable
====================

#{
  let dict = (a: 1)
  // Error: 3-15 dictionary does not contain key "b"
  // Hint: 3-15 use `insert` to add or update values
  dict.at("b") = 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (comment)
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (string)))
        (number))))
  (parbreak))

====================
typst/dict/issue-3154-dict-at-missing-mutable-default
====================

#{
  let dict = (a: 1)
  // Error: 3-27 dictionary does not contain key "b"
  // Hint: 3-27 use `insert` to add or update values
  dict.at("b", default: 0) = 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (comment)
      (comment)
      (assign
        (call
          (field
            (ident)
            (ident))
          (group
            (string)
            (tagged
              (ident)
              (number))))
        (number))))
  (parbreak))

====================
typst/dict/issue-3154-dict-syntax-missing
====================

#{
  let dict = (a: 1)
  // Error: 8-9 dictionary does not contain key "b"
  dict.b
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (comment)
      (field
        (ident)
        (ident))))
  (parbreak))

====================
typst/dict/issue-3154-dict-syntax-missing-mutable
====================

#{
  let dict = (a: 1)
  dict.b = 9
  test(dict, (a: 1, b: 9))
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (assign
        (field
          (ident)
          (ident))
        (number))
      (call
        (ident)
        (group
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/dict/issue-3154-dict-syntax-missing-add-assign
====================

#{
  let dict = (a: 1)
  // Error: 3-9 dictionary does not contain key "b"
  // Hint: 3-9 use `insert` to add or update values
  dict.b += 9
}


--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (comment)
      (comment)
      (assign
        (field
          (ident)
          (ident))
        (number))))
  (parbreak))

====================
typst/dict/issue-3232-dict-unexpected-keys-sides
====================

// Confusing "expected relative length or dictionary, found dictionary"
// Error: 16-58 unexpected keys "unexpected" and "unexpected-too"
#block(outset: (unexpected: 0.5em, unexpected-too: 0.2em), [Hi])


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (parbreak))

====================
typst/dict/issue-3232-dict-unexpected-keys-corners
====================

// Error: 14-56 unexpected keys "unexpected" and "unexpected-too"
#box(radius: (unexpected: 0.5em, unexpected-too: 0.5em), [Hi])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (parbreak))

====================
typst/dict/issue-3232-dict-unexpected-key-sides
====================

// Error: 16-49 unexpected key "unexpected", valid keys are "left", "top", "right", "bottom", "x", "y", and "rest"
#block(outset: (unexpected: 0.2em, right: 0.5em), [Hi]) // The 1st key is unexpected


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (comment)
  (parbreak))

====================
typst/dict/issue-3232-dict-unexpected-key-corners
====================

// Error: 14-50 unexpected key "unexpected", valid keys are "top-left", "top-right", "bottom-right", "bottom-left", "left", "top", "right", "bottom", and "rest"
#box(radius: (top-left: 0.5em, unexpected: 0.5em), [Hi]) // The 2nd key is unexpected


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text)))))
  (comment)
  (parbreak))

====================
typst/dict/issue-3232-dict-empty
====================

#block(outset: (:), [Hi]) // Ok
#box(radius: (:), [Hi]) // Ok
--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group))
        (content
          (text)))))
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group))
        (content
          (text)))))
  (comment))

====================
typst/duration/duration-negate
====================

// Test negating durations.
#test(-duration(hours: 2), duration(hours: -2))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (sign
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (sign
                (number))))))))
  (parbreak))

====================
typst/duration/duration-add-and-subtract
====================

// Test adding and subtracting durations.
#test(duration(weeks: 1, hours: 1), duration(weeks: 1) + duration(hours: 1))
#test(duration(weeks: 1, hours: -1), duration(weeks: 1) - duration(hours: 1))
#test(duration(days: 6, hours: 23), duration(weeks: 1) - duration(hours: 1))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (add
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (sign
                (number)))))
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))))))
  (parbreak))

====================
typst/duration/duration-add-and-subtract-dates
====================

// Test adding and subtracting durations and dates.
#let d = datetime(day: 1, month: 1, year: 2000)
#let d2 = datetime(day: 1, month: 2, year: 2000)
#test(d + duration(weeks: 2), datetime(day: 15, month: 1, year: 2000))
#test(d + duration(days: 3), datetime(day: 4, month: 1, year: 2000))
#test(d + duration(weeks: 1, days: 3), datetime(day: 11, month: 1, year: 2000))
#test(d2 + duration(days: -1), datetime(day: 31, month: 1, year: 2000))
#test(d2 + duration(days: -3), datetime(day: 29, month: 1, year: 2000))
#test(d2 + duration(weeks: -1), datetime(day: 25, month: 1, year: 2000))
#test(d + duration(days: -1), datetime(day: 31, month: 12, year: 1999))
#test(d + duration(weeks: 1, days: -7), datetime(day: 1, month: 1, year: 2000))
#test(d2 - duration(days: 1), datetime(day: 31, month: 1, year: 2000))
#test(d2 - duration(days: 3), datetime(day: 29, month: 1, year: 2000))
#test(d2 - duration(weeks: 1), datetime(day: 25, month: 1, year: 2000))
#test(d - duration(days: 1), datetime(day: 31, month: 12, year: 1999))
#test(datetime(day: 31, month: 1, year: 2000) + duration(days: 1), d2)
#test(
  datetime(day: 31, month: 12, year: 2000) + duration(days: 1),
  datetime(day: 1, month: 1, year: 2001),
)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (ident))))
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/duration/duration-add-and-subtract-times
====================

// Test adding and subtracting durations and times.
#let a = datetime(hour: 12, minute: 0, second: 0)
#test(a + duration(hours: 1, minutes: -60), datetime(hour: 12, minute: 0, second: 0))
#test(a + duration(hours: 2), datetime(hour: 14, minute: 0, second: 0))
#test(a + duration(minutes: 10), datetime(hour: 12, minute: 10, second: 0))
#test(a + duration(seconds: 30), datetime(hour: 12, minute: 0, second: 30))
#test(a + duration(hours: -2), datetime(hour: 10, minute: 0, second: 0))
#test(a - duration(hours: 2), datetime(hour: 10, minute: 0, second: 0))
#test(a + duration(minutes: -10), datetime(hour: 11, minute: 50, second: 0))
#test(a - duration(minutes: 10), datetime(hour: 11, minute: 50, second: 0))
#test(a + duration(seconds: -30), datetime(hour: 11, minute: 59, second: 30))
#test(a - duration(seconds: 30), datetime(hour: 11, minute: 59, second: 30))
#test(
  a + duration(hours: 1, minutes: 13, seconds: 13),
  datetime(hour: 13, minute: 13, second: 13),
)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/duration/duration-add-and-subtract-datetimes
====================

// Test adding and subtracting durations and datetimes.
#test(
  datetime(day: 1, month: 1, year: 2000, hour: 12, minute: 0, second: 0)
    + duration(weeks: 1, days: 3, hours: -13, minutes: 10, seconds: -10 ),
  datetime(day: 10, month: 1, year: 2000, hour: 23, minute: 9, second: 50),
)
#test(
  datetime(day: 1, month: 1, year: 2000, hour: 12, minute: 0, second: 0)
    + duration(weeks: 1, days: 3, minutes: 10)
    - duration(hours: 13, seconds: 10),
  datetime(day: 10, month: 1, year: 2000, hour: 23, minute: 9, second: 50),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (sign
                  (number)))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (sign
                  (number))))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (add
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number)))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/duration/duration-from-date-subtraction
====================

// Test subtracting dates.
#let a = datetime(hour: 12, minute: 0, second: 0)
#let b = datetime(day: 1, month: 1, year: 2000)
#test(datetime(hour: 14, minute: 0, second: 0) - a, duration(hours: 2))
#test(datetime(hour: 14, minute: 0, second: 0) - a, duration(minutes: 120))
#test(datetime(hour: 13, minute: 0, second: 0) - a, duration(seconds: 3600))
#test(datetime(day: 1, month: 2, year: 2000) - b, duration(days: 31))
#test(datetime(day: 15, month: 1, year: 2000) - b, duration(weeks: 2))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (sub
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/duration/duration-multiply-with-number
====================

// Test multiplying and dividing durations with numbers.
#test(duration(minutes: 10) * 6, duration(hours: 1))
#test(duration(minutes: 10) * 2, duration(minutes: 20))
#test(duration(minutes: 10) * 2.5, duration(minutes: 25))
#test(duration(minutes: 10) / 2, duration(minutes: 5))
#test(duration(minutes: 10) / 2.5, duration(minutes: 4))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (number))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (number))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (number))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (number))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (number))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/duration/duration-divide
====================

// Test dividing durations with durations
#test(duration(minutes: 20) / duration(hours: 1), 1 / 3)
#test(duration(minutes: 20) / duration(minutes: 10), 2)
#test(duration(minutes: 20) / duration(minutes: 8), 2.5)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (div
          (number)
          (number)))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (number))))
  (code
    (call
      (ident)
      (group
        (div
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (number))))
  (parbreak))

====================
typst/duration/duration-compare
====================

// Test comparing durations
#test(duration(minutes: 20) > duration(minutes: 10), true)
#test(duration(minutes: 20) >= duration(minutes: 10), true)
#test(duration(minutes: 10) < duration(minutes: 20), true)
#test(duration(minutes: 10) <= duration(minutes: 20), true)
#test(duration(minutes: 10) == duration(minutes: 10), true)
#test(duration(minutes: 10) != duration(minutes: 20), true)
#test(duration(minutes: 10) <= duration(minutes: 10), true)
#test(duration(minutes: 10) >= duration(minutes: 10), true)
#test(duration(minutes: 20) < duration(minutes: 10), false)
#test(duration(minutes: 20) <= duration(minutes: 10), false)
#test(duration(minutes: 20) == duration(minutes: 10), false)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool))))
  (code
    (call
      (ident)
      (group
        (cmp
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number)))))
        (bool)))))

====================
typst/repr/repr
====================

#let t(a, b) = test(repr(a), b.text)

// Literal values.
#t(auto, `auto`)
#t(true, `true`)
#t(false, `false`)

// Numerical values.
#t(12.0, `12.0`)
#t(3.14, `3.14`)
#t(1234567890.0, `1234567890.0`)
#t(0123456789.0, `123456789.0`)
#t(0.0, `0.0`)
#t(-0.0, `-0.0`)
#t(-1.0, `-1.0`)
#t(-9876543210.0, `-9876543210.0`)
#t(-0987654321.0, `-987654321.0`)
#t(-3.14, `-3.14`)
#t(4.0 - 8.0, `-4.0`)
#t(float.inf, `float.inf`)
#t(-float.inf, `-float.inf`)
#t(float.nan, `float.nan`)

// Strings and escaping.
#t("hi", `"hi"`)
#t("a\n[]\"\u{1F680}string", `"a\n[]\"🚀string"`)

// Array and dictionary.
#t((1, 2, false, ), `(1, 2, false)`)
#t((a: 1, b: "2"), `(a: 1, b: "2")`)

// Functions.
#let f(x) = x
#t(f, `f`)
#t(rect , `rect`)
#t(() => none, `(..) => ..`)

// Types.
#t(int, `integer`)
#t(type("hi"), `string`)
#t(type((a: 1)), `dictionary`)

// Constants.
#t(ltr, `ltr`)
#t(left, `left`)

// Content.
#t([*Hey*], `strong(body: [Hey])`)
#t([A _sequence_], `sequence([A], [ ], emph(body: [sequence]))`)
#t([A _longer_ *sequence*!], ```
sequence(
  [A],
  [ ],
  emph(body: [longer]),
  [ ],
  strong(body: [sequence]),
  [!],
)
```)

// Colors and strokes.
#t(rgb("f7a205"), `rgb("#f7a205")`)
#t(2pt + rgb("f7a205"), `2pt + rgb("#f7a205")`)
#t(blue, `rgb("#0074d9")`)
#t(color.linear-rgb(blue), `color.linear-rgb(0%, 17.46%, 69.39%)`)
#t(oklab(blue), `oklab(56.22%, -0.05, -0.17)`)
#t(oklch(blue), `oklch(56.22%, 0.177, 253.71deg)`)
#t(cmyk(blue), `cmyk(100%, 46.54%, 0%, 14.9%)`)
#t(color.hsl(blue), `color.hsl(207.93deg, 100%, 42.55%)`)
#t(color.hsv(blue), `color.hsv(207.93deg, 100%, 85.1%)`)
#t(luma(blue), `luma(45.53%)`)

// Gradients.
#t(
  gradient.linear(blue, red),
  `gradient.linear((rgb("#0074d9"), 0%), (rgb("#ff4136"), 100%))`,
)
#t(
  gradient.linear(blue, red, dir: ttb),
  `gradient.linear(dir: rtl, (rgb("#0074d9"), 0%), (rgb("#ff4136"), 100%))`,
)
#t(
  gradient.linear(blue, red, relative: "self", angle: 45deg),
  `gradient.linear(angle: 45deg, relative: "self", (rgb("#0074d9"), 0%), (rgb("#ff4136"), 100%))`,
)
#t(
  gradient.linear(blue, red, space: rgb, angle: 45deg),
  `gradient.linear(angle: 45deg, space: rgb, (rgb("#0074d9"), 0%), (rgb("#ff4136"), 100%))`,
)
--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (ident)))
          (field
            (ident)
            (ident))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (auto)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (bool)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (bool)
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (number)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (number)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (number)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (number)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sign
          (number))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sign
          (number))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sign
          (number))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sign
          (number))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sign
          (number))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sub
          (number)
          (number))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (sign
          (field
            (ident)
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident))
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (string
          (escape)
          (escape)
          (escape))
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (number)
          (number)
          (bool))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (string)))
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (ident)))
  (code
    (call
      (ident)
      (group
        (ident)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (lambda
          (group)
          (none))
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (ident)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (group
              (tagged
                (ident)
                (number)))))
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (ident)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (strong
            (text)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (emph
            (text)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (emph
            (text))
          (strong
            (text))
          (text))
        (raw_blck
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (add
          (number
            (unit))
          (call
            (ident)
            (group
              (string))))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (raw_span
          (blob)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)
            (ident)))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)
            (ident)
            (tagged
              (ident)
              (ident))))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)
            (ident)
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (number
                (unit)))))
        (raw_span
          (blob)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (ident)
            (ident)
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))))
        (raw_span
          (blob))))))

====================
typst/version/version-constructor
====================

// Test version constructor.

// Empty.
#test(array(version()), ())

// Plain.
#test(version(1, 2).major, 1)

// Single Array argument.
#test(version((1, 2)).minor, 2)

// Mixed arguments.
#test(version(1, (2, 3), 4, (5, 6), 7).at(5), 6)


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group))))
        (group))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (number)
              (number)))
          (ident))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (group
                (number)
                (number))))
          (ident))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (group
                  (number)
                  (number))
                (number)
                (group
                  (number)
                  (number))
                (number)))
            (ident))
          (group
            (number)))
        (number))))
  (parbreak))

====================
typst/version/version-equality
====================

// Test equality of different-length versions
#test(version(), version(0))
#test(version(0), version(0, 0))
#test(version(1, 2), version(1, 2, 0, 0, 0, 0))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (call
          (ident)
          (group
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (call
          (ident)
          (group
            (number)
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (number)))
        (call
          (ident)
          (group
            (number)
            (number)
            (number)
            (number)
            (number)
            (number))))))
  (parbreak))

====================
typst/version/version-at
====================

// Test `version.at`.

// Non-negative index in bounds
#test(version(1, 2).at(1), 2)

// Non-negative index out of bounds
#test(version(1, 2).at(4), 0)

// Negative index in bounds
#test(version(1, 2).at(-2), 1)

// Error: 2-22 component index out of bounds (index: -3, len: 2)
#version(1, 2).at(-3)


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)))
            (ident))
          (group
            (number)))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)))
            (ident))
          (group
            (number)))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (call
              (ident)
              (group
                (number)
                (number)))
            (ident))
          (group
            (sign
              (number))))
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (number)
            (number)))
        (ident))
      (group
        (sign
          (number)))))
  (parbreak))

====================
typst/version/version-fields
====================

// Test version fields.
#test(version(1, 2, 3).major, 1)
#test(version(1, 2, 3).minor, 2)
#test(version(1, 2, 3).patch, 3)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (number)
              (number)
              (number)))
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (number)
              (number)
              (number)))
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (call
            (ident)
            (group
              (number)
              (number)
              (number)))
          (ident))
        (number))))
  (parbreak))

====================
typst/version/version-type
====================

// Test the type of `sys.version`
#test(type(sys.version), version)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (ident)))))

====================
typst/bytes/bytes-basic
====================

#let data = read("/assets/images/rhino.png", encoding: none)
#test(data.len(), 232243)
#test(data.slice(0, count: 5), bytes((137, 80, 78, 71, 13)))
#test(str(data.slice(1, 4)), "PNG")
#test(repr(data), "bytes(232243)")


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (none))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (number)
            (tagged
              (ident)
              (number))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (number)
                (number)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (string))))
  (parbreak))

====================
typst/bytes/bytes-string-conversion
====================

#test(str(bytes(range(0x41, 0x50))), "ABCDEFGHIJKLMNO")


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (number)
                    (number)))))))
        (string))))
  (parbreak))

====================
typst/bytes/bytes-array-conversion
====================

#test(array(bytes("Hello")), (0x48, 0x65, 0x6C, 0x6C, 0x6F))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (group
          (number)
          (number)
          (number)
          (number)
          (number)))))
  (parbreak))

====================
typst/bytes/bytes-addition
====================

// Test addition and joining.
#test(bytes((1, 2)) + bytes(()), bytes((1, 2)))
#test(bytes((1, 2)) + bytes((3, 4)), bytes((1, 2, 3, 4)))
#test(bytes(()) + bytes((3, 4)), bytes((3, 4)))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (group
                (number)
                (number))))
          (call
            (ident)
            (group
              (group))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (group
                (number)
                (number))))
          (call
            (ident)
            (group
              (group
                (number)
                (number)))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)
              (number)
              (number)))))))
  (code
    (call
      (ident)
      (group
        (add
          (call
            (ident)
            (group
              (group)))
          (call
            (ident)
            (group
              (group
                (number)
                (number)))))
        (call
          (ident)
          (group
            (group
              (number)
              (number)))))))
  (parbreak))

====================
typst/bytes/bytes-joining
====================

#test(str({
  bytes("Hello")
  bytes((0x20,))
  bytes("World")
}), "Hello World")


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (block
              (call
                (ident)
                (group
                  (string)))
              (call
                (ident)
                (group
                  (group
                    (number))))
              (call
                (ident)
                (group
                  (string))))))
        (string))))
  (parbreak))

====================
typst/bytes/bytes-bad-conversion-from-dict
====================

// Error: 8-14 expected string, array, or bytes, found dictionary
#bytes((a: 1))
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (tagged
            (ident)
            (number)))))))

====================
typst/decimal/decimal-constructor
====================

#test(decimal(10), decimal("10.0"))
#test(decimal("-7654.321"), decimal("-7654.321"))
#test(decimal("\u{2212}7654.321"), decimal("-7654.321"))
#test(decimal({ 3.141592653 }), decimal("3.141592653000000012752934707"))
#test(decimal({ -3.141592653 }), decimal("-3.141592653000000012752934707"))
#test(decimal(decimal(3)), decimal("3.0"))
#test(decimal(true), decimal("1.0"))
#test(type(decimal(10)), decimal)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string
              (escape))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (block
              (number))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (block
              (sign
                (number)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)))))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (bool)))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (number)))))
        (ident))))
  (parbreak))

====================
typst/decimal/decimal-constructor-bad-type
====================

// Error: 10-17 expected decimal, integer, boolean, float, or string, found type
#decimal(decimal)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak))

====================
typst/decimal/decimal-constructor-bad-value
====================

// Error: 10-17 invalid decimal: 1.2.3
#decimal("1.2.3")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/decimal/decimal-constructor-float-literal
====================

// Warning: 18-25 creating a decimal using imprecise float literal
// Hint: 18-25 use a string in the decimal constructor to avoid loss of precision: `decimal("1.32523")`
#let _ = decimal(1.32523)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)))))
  (parbreak))

====================
typst/decimal/decimal-constructor-float-inf
====================

// Error: 10-19 float is not a valid decimal: float.inf
#decimal(float.inf)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident)))))
  (parbreak))

====================
typst/decimal/decimal-constructor-float-negative-inf
====================

// Error: 10-20 float is not a valid decimal: -float.inf
#decimal(-float.inf)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (sign
          (field
            (ident)
            (ident))))))
  (parbreak))

====================
typst/decimal/decimal-constructor-float-nan
====================

// Error: 10-19 float is not a valid decimal: float.nan
#decimal(float.nan)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (ident)
          (ident)))))
  (parbreak))

====================
typst/decimal/decimal-scale-is-observable
====================

// Ensure equal decimals with different scales produce different strings.
#let f1(x) = str(x)
#let f2(x) = f1(x)
#test(f2(decimal("3.140")), "3.140")
#test(f2(decimal("3.14000")), "3.14000")


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (ident)))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string))))
  (parbreak))

====================
typst/decimal/decimal-repr
====================

// Test the `repr` function with decimals.
#test(repr(decimal("12.0")), "decimal(\"12.0\")")
#test(repr(decimal("3.14")), "decimal(\"3.14\")")
#test(repr(decimal("1234567890.0")), "decimal(\"1234567890.0\")")
#test(repr(decimal("0123456789.0")), "decimal(\"123456789.0\")")
#test(repr(decimal("0.0")), "decimal(\"0.0\")")
#test(repr(decimal("-0.0")), "decimal(\"0.0\")")
#test(repr(decimal("-1.0")), "decimal(\"-1.0\")")
#test(repr(decimal("-9876543210.0")), "decimal(\"-9876543210.0\")")
#test(repr(decimal("-0987654321.0")), "decimal(\"-987654321.0\")")
#test(repr(decimal("-3.14")), "decimal(\"-3.14\")")
#test(repr(decimal("-3.9191919191919191919191919195")), "decimal(\"-3.9191919191919191919191919195\")")
#test(repr(decimal("5.0000000000")), "decimal(\"5.0000000000\")")
#test(repr(decimal("4.0") - decimal("8.0")), "decimal(\"-4.0\")")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)))))
        (string
          (escape)
          (escape)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (sub
              (call
                (ident)
                (group
                  (string)))
              (call
                (ident)
                (group
                  (string))))))
        (string
          (escape)
          (escape)))))
  (parbreak))

====================
typst/decimal/decimal-display
====================

// Test decimals.
#set page(width: auto)
#decimal("12.0") \
#decimal("3.14") \
#decimal("1234567890.0") \
#decimal("0123456789.0") \
#decimal("0.0") \
#decimal("-0.0") \
#decimal("-1.0") \
#decimal("-9876543210.0") \
#decimal("-0987654321.0") \
#decimal("-3.14") \
#decimal("-3.9191919191919191919191919195") \
#decimal("5.0000000000") \
#(decimal("4.0") - decimal("8.0"))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (group
      (sub
        (call
          (ident)
          (group
            (string)))
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/decimal/decimal-display-round
====================

// Display less digits.
#calc.round(decimal("-3.9191919191919191919191919195"), digits: 4) \
#calc.round(decimal("5.0000000000"), digits: 4)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (tagged
          (ident)
          (number)))))
  (linebreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))
        (tagged
          (ident)
          (number)))))
  (parbreak))

====================
typst/decimal/decimal-expected-float-error
====================

// Error: 11-25 expected integer, float, or angle, found decimal
// Hint: 11-25 if loss of precision is acceptable, explicitly cast the decimal to a float with `float(value)`
#calc.sin(decimal("1.1"))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string))))))
  (parbreak))

====================
typst/decimal/decimal-expected-integer-error
====================

// Error: 11-25 expected integer, found decimal
#calc.odd(decimal("1.1"))
--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (ident)
          (group
            (string)))))))

====================
typst/symbol/symbol
====================

#emoji.face
#emoji.woman.old
#emoji.turtle

#set text(font: "New Computer Modern Math")
#sym.arrow
#sym.arrow.l
#sym.arrow.r.squiggly
#sym.arrow.tr.hook

#sym.arrow.r;this and this#sym.arrow.l;


--------------------

(source_file
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (field
        (ident)
        (ident))
      (ident)))
  (code
    (field
      (ident)
      (ident)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (field
        (ident)
        (ident))
      (ident)))
  (code
    (field
      (field
        (field
          (ident)
          (ident))
        (ident))
      (ident)))
  (code
    (field
      (field
        (field
          (ident)
          (ident))
        (ident))
      (ident)))
  (parbreak)
  (code
    (field
      (field
        (ident)
        (ident))
      (ident)))
  (text)
  (code
    (field
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak))

====================
typst/symbol/symbol-constructor
====================

#let envelope = symbol(
  "🖂",
  ("stamped", "🖃"),
  ("stamped.pen", "🖆"),
  ("lightning", "🖄"),
  ("fly", "🖅"),
)

#envelope
#envelope.stamped
#envelope.pen
#envelope.stamped.pen
#envelope.lightning
#envelope.fly


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))
          (group
            (string)
            (string))
          (group
            (string)
            (string))
          (group
            (string)
            (string))))))
  (parbreak)
  (code
    (ident))
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (field
        (ident)
        (ident))
      (ident)))
  (code
    (field
      (ident)
      (ident)))
  (code
    (field
      (ident)
      (ident)))
  (parbreak))

====================
typst/symbol/symbol-constructor-empty
====================

// Error: 2-10 expected at least one variant
#symbol()


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/symbol/symbol-constructor-invalid-modifier
====================

// Error: 2:3-2:24 invalid symbol modifier: " id!"
#symbol(
  ("invalid. id!", "x")
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/symbol/symbol-constructor-duplicate-modifier
====================

// Error: 2:3-2:31 duplicate modifier within variant: "duplicate"
// Hint: 2:3-2:31 modifiers are not ordered, so each one may appear only once
#symbol(
  ("duplicate.duplicate", "x"),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/symbol/symbol-constructor-duplicate-default-variant
====================

// Error: 3:3-3:6 duplicate default variant
#symbol(
  "x",
  "y",
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (string))))
  (parbreak))

====================
typst/symbol/symbol-constructor-duplicate-empty-variant
====================

// Error: 3:3-3:12 duplicate default variant
#symbol(
  ("", "x"),
  ("", "y"),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (string)
          (string))
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/symbol/symbol-constructor-default-and-empty-variants
====================

// Error: 3:3-3:12 duplicate default variant
#symbol(
  "x",
  ("", "y"),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (string)
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/symbol/symbol-constructor-duplicate-variant
====================

// Error: 3:3-3:29 duplicate variant: "duplicate.variant"
#symbol(
  ("duplicate.variant", "x"),
  ("duplicate.variant", "y"),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (string)
          (string))
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/symbol/symbol-constructor-duplicate-variant-different-order
====================

// Error: 3:3-3:29 duplicate variant: "variant.duplicate"
// Hint: 3:3-3:29 variants with the same modifiers are identical, regardless of their order
#symbol(
  ("duplicate.variant", "x"),
  ("variant.duplicate", "y"),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (group
          (string)
          (string))
        (group
          (string)
          (string)))))
  (parbreak))

====================
typst/symbol/symbol-unknown-modifier
====================

// Error: 13-20 unknown symbol modifier
#emoji.face.garbage


--------------------

(source_file
  (comment)
  (code
    (field
      (field
        (ident)
        (ident))
      (ident)))
  (parbreak))

====================
typst/symbol/symbol-repr
====================

#test(
  repr(sym.amp),
  `symbol("&", ("inv", "⅋"))`.text,
)
#test(
  repr(sym.amp.inv),
  `symbol("⅋")`.text,
)
#test(
  repr(sym.arrow.double.r),
  ```
  symbol(
    "⇒",
    ("bar", "⤇"),
    ("long", "⟹"),
    ("long.bar", "⟾"),
    ("not", "⇏"),
    ("l", "⇔"),
    ("l.long", "⟺"),
    ("l.not", "⇎"),
  )
  ```.text,
)
#test(repr(sym.smash), "symbol(\"⨳\")")

#let envelope = symbol(
  "🖂",
  ("stamped", "🖃"),
  ("stamped.pen", "🖆"),
  ("lightning", "🖄"),
  ("fly", "🖅"),
)
#test(
  repr(envelope),
  ```
  symbol(
    "🖂",
    ("stamped", "🖃"),
    ("stamped.pen", "🖆"),
    ("lightning", "🖄"),
    ("fly", "🖅"),
  )
  ```.text,
)
#test(
  repr(envelope.stamped),
  `symbol("🖃", ("pen", "🖆"))`.text,
)
#test(
  repr(envelope.stamped.pen),
  `symbol("🖆")`.text,
)
#test(
  repr(envelope.lightning),
  `symbol("🖄")`.text,
)
#test(
  repr(envelope.fly),
  `symbol("🖅")`.text,
)
--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (field
          (raw_span
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (field
                (ident)
                (ident))
              (ident))))
        (field
          (raw_span
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (field
                (field
                  (ident)
                  (ident))
                (ident))
              (ident))))
        (field
          (raw_blck
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (string
          (escape)
          (escape)))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (group
            (string)
            (string))
          (group
            (string)
            (string))
          (group
            (string)
            (string))
          (group
            (string)
            (string))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (field
          (raw_blck
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (field
          (raw_span
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (field
                (ident)
                (ident))
              (ident))))
        (field
          (raw_span
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (field
          (raw_span
            (blob))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (field
              (ident)
              (ident))))
        (field
          (raw_span
            (blob))
          (ident))))))

====================
typst/state/state-basic
====================

#let s = state("hey", "a")
#let double(it) = 2 * it

#s.update(double)
#s.update(double)
$ 2 + 3 $
#s.update(double)

Is: #context s.get(),
Was: #context {
  let it = query(math.equation).first()
  s.at(it.location())
}.


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (string)))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (mul
        (number)
        (ident))))
  (parbreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (ident))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (ident))))
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (ident))))
  (parbreak)
  (text)
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group))))
  (text)
  (text)
  (code
    (context
      (block
        (let
          (ident)
          (call
            (field
              (call
                (ident)
                (group
                  (field
                    (ident)
                    (ident))))
              (ident))
            (group)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group)))))))
  (text)
  (parbreak))

====================
typst/state/state-multiple-calls-same-key
====================

// Try same key with different initial value.
#context state("key", 2).get()
#state("key").update(x => x + 1)
#context state("key", 2).get()
#context state("key", 3).get()
#state("key").update(x => x + 1)
#context state("key", 2).get()


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (string)
              (number)))
          (ident))
        (group))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (string)))
        (ident))
      (group
        (lambda
          (ident)
          (add
            (ident)
            (number))))))
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (string)
              (number)))
          (ident))
        (group))))
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (string)
              (number)))
          (ident))
        (group))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (string)))
        (ident))
      (group
        (lambda
          (ident)
          (add
            (ident)
            (number))))))
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (string)
              (number)))
          (ident))
        (group))))
  (parbreak))

====================
typst/state/state-nested
====================

#set page(width: 200pt)
#set text(8pt)

#let ls = state("lorem", lorem(30).split(" "))
#let loremum(count) = {
  context ls.get().slice(0, count).join(".").trim() + "."
  ls.update(list => list.slice(count))
}

#let fs = state("fader", red)
#let trait(title) = block[
  #context text(fill: fs.get())[
    *#title:* #loremum(1)
  ]
  #fs.update(color => color.lighten(30%))
]

#trait[Boldness]
#trait[Adventure]
#trait[Fear]
#trait[Anger]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (call
            (field
              (call
                (ident)
                (group
                  (number)))
              (ident))
            (group
              (string)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (context
          (add
            (call
              (field
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))
                        (ident))
                      (group
                        (number)
                        (ident)))
                    (ident))
                  (group
                    (string)))
                (ident))
              (group))
            (string)))
        (call
          (field
            (ident)
            (ident))
          (group
            (lambda
              (ident)
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)))))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (ident)))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (content
          (code
            (context
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (call
                        (field
                          (ident)
                          (ident))
                        (group)))))
                (content
                  (strong
                    (code
                      (ident))
                    (text))
                  (code
                    (call
                      (ident)
                      (group
                        (number))))))))
          (code
            (call
              (field
                (ident)
                (ident))
              (group
                (lambda
                  (ident)
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (number
                        (unit))))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/state/state-no-convergence
====================

// Make sure that a warning is produced if the layout fails to converge.
// Warning: layout did not converge within 5 attempts
// Hint: check if any states or queries are updating themselves
#let s = state("s", 1)
#context s.update(s.final() + 1)
#context s.get()


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)
          (number)))))
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group
          (add
            (call
              (field
                (ident)
                (ident))
              (group))
            (number))))))
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/state/state-at-no-context
====================

// Test `state.at` outside of context.
// Error: 2-26 can only be used when context is known
// Hint: 2-26 try wrapping this in a `context` expression
// Hint: 2-26 the `context` expression should wrap everything that depends on this function
#state("key").at(<label>)
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (string)))
        (ident))
      (group
        (label)))))

====================
typst/here/here-position
====================

// Test `context` + `here`.
#context test(here().position().y, 10pt)
--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (field
            (call
              (field
                (call
                  (ident)
                  (group))
                (ident))
              (group))
            (ident))
          (number
            (unit)))))))

====================
typst/counter/counter-basic-1
====================

// Count with string key.
#let mine = counter("mine!")

Final: #context mine.final().at(0) \
#mine.step()
First: #context mine.display() \
#mine.update(7)
#context mine.display("1 of 1", both: true) \
#mine.step()
#mine.step()
Second: #context mine.display("I")
#mine.update(n => n * 2)
#mine.step()


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (text)
  (code
    (context
      (call
        (field
          (call
            (field
              (ident)
              (ident))
            (group))
          (ident))
        (group
          (number)))))
  (linebreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (text)
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group))))
  (linebreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group
          (string)
          (tagged
            (ident)
            (bool))))))
  (linebreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (text)
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group
          (string)))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (lambda
          (ident)
          (mul
            (ident)
            (number))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (parbreak))

====================
typst/counter/counter-basic-2
====================

// Test `counter`.
#let c = counter("heading")
#c.update(2)
#c.update(n => n + 2)
#context test(c.get(), (4,))
#c.update(n => n - 3)
#context test(c.at(here()), (1,))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (lambda
          (ident)
          (add
            (ident)
            (number))))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group))
          (group
            (number))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (lambda
          (ident)
          (sub
            (ident)
            (number))))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group
              (call
                (ident)
                (group))))
          (group
            (number))))))
  (parbreak))

====================
typst/counter/counter-label
====================

// Count labels.
#let label = <heya>
#let count = context counter(label).display()
#let elem(it) = [#box(it) #label]

#elem[hey, there!] #count \
#elem[more here!] #count


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (label)))
  (code
    (let
      (ident)
      (context
        (call
          (field
            (call
              (ident)
              (group
                (ident)))
            (ident))
          (group)))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (content
        (code
          (call
            (ident)
            (group
              (ident))))
        (code
          (ident)))))
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (ident))
  (linebreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (ident))
  (parbreak))

====================
typst/counter/counter-heading
====================

// Count headings.
#set heading(numbering: "1.a.")
#show heading: set text(10pt)
#counter(heading).step()

= Alpha
In #context counter(heading).display()
== Beta

#set heading(numbering: none)
= Gamma
#heading(numbering: "I.")[Delta]

At Beta, it was #context {
  let it = query(heading).find(it => it.body == [Beta])
  numbering(it.numbering, ..counter(heading).at(it.location()))
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (number
              (unit)))))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group)))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (text)
      (code
        (context
          (call
            (field
              (call
                (ident)
                (group
                  (ident)))
              (ident))
            (group))))
      (section
        (heading
          (text))
        (content
          (parbreak)
          (code
            (set
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (none))))))))))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (content
            (text))))
      (parbreak)
      (text)
      (code
        (context
          (block
            (let
              (ident)
              (call
                (field
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (cmp
                      (field
                        (ident)
                        (ident))
                      (content
                        (text)))))))
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident))
                (elude
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (ident)))
                      (ident))
                    (group
                      (call
                        (field
                          (ident)
                          (ident))
                        (group))))))))))
      (parbreak))))

====================
typst/counter/counter-page
====================

#set page(height: 50pt, margin: (bottom: 20pt, rest: 10pt))
#lines(4)
#set page(numbering: "(i)")
#lines(2)
#pagebreak()
#set page(numbering: "1 / 1")
#counter(page).update(1)
#lines(7)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/counter/counter-page-footer-before-set-page
====================

#set page(numbering: "1", margin: (bottom: 20pt))
A
#pagebreak()
#counter(page).update(5)
#set page(fill: aqua)
B


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (parbreak))

====================
typst/counter/counter-page-header-before-set-page
====================

#set page(numbering: "1", number-align: top + center, margin: (top: 20pt))
A
#counter(page).update(4)
#set page(fill: aqua)
B


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (parbreak))

====================
typst/counter/counter-page-between-pages
====================

// The update happens conceptually between the pages.
#set page(numbering: "1", margin: (bottom: 20pt))
A
#pagebreak()
#counter(page).update(5)
#set page(number-align: top + center, margin: (top: 20pt, bottom: 10pt))
B


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (ident)
              (ident)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (parbreak))

====================
typst/counter/counter-page-header-only-update
====================

// Header should not be affected by default.
// To affect it, put the counter update before the `set page`.
#set page(
  numbering: "1",
  number-align: top + center,
  margin: (top: 20pt),
)

#counter(page).update(5)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/counter/counter-page-footer-only-update
====================

// Footer should be affected by default.
#set page(numbering: "1 / 1", margin: (bottom: 20pt))
#counter(page).update(5)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (parbreak))

====================
typst/counter/counter-page-display
====================

// Counter display should use numbering from style chain.
#set page(
  numbering: "A",
  margin: (bottom: 20pt),
  footer: context align(center, counter(page).display())
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (context
              (call
                (ident)
                (group
                  (ident)
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (ident)))
                      (ident))
                    (group))))))))))
  (parbreak))

====================
typst/counter/counter-figure
====================

// Count figures.
#figure(numbering: "A", caption: [Four 'A's], kind: image, supplement: "Figure")[_AAAA!_]
#figure(numbering: none, caption: [Four 'B's], kind: image, supplement: "Figure")[_BBBB!_]
#figure(caption: [Four 'C's], kind: image, supplement: "Figure")[_CCCC!_]
#counter(figure.where(kind: image)).update(n => n + 3)
#figure(caption: [Four 'D's], kind: image, supplement: "Figure")[_DDDD!_]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (content
              (text)
              (quote)
              (text)
              (quote)
              (text)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (string))))
      (content
        (emph
          (text)))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))
          (tagged
            (ident)
            (content
              (text)
              (quote)
              (text)
              (quote)
              (text)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (string))))
      (content
        (emph
          (text)))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)
              (quote)
              (text)
              (quote)
              (text)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (string))))
      (content
        (emph
          (text)))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))))
        (ident))
      (group
        (lambda
          (ident)
          (add
            (ident)
            (number))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)
              (quote)
              (text)
              (quote)
              (text)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (string))))
      (content
        (emph
          (text)))))
  (parbreak))

====================
typst/counter/counter-at-no-context
====================

// Test `counter.at` outside of context.
// Error: 2-28 can only be used when context is known
// Hint: 2-28 try wrapping this in a `context` expression
// Hint: 2-28 the `context` expression should wrap everything that depends on this function
#counter("key").at(<label>)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (call
          (ident)
          (group
            (string)))
        (ident))
      (group
        (label))))
  (parbreak))

====================
typst/counter/issue-2480-counter-reset
====================

#let q = counter("question")
#let step-show =  q.step() + context q.display("1")
#let g = grid(step-show, step-show, gutter: 2pt)

#g
#pagebreak()
#step-show
#q.update(10)
#g


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (ident)
      (add
        (call
          (field
            (ident)
            (ident))
          (group))
        (context
          (call
            (field
              (ident)
              (ident))
            (group
              (string)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (ident)
          (ident)
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (code
    (ident))
  (parbreak))

====================
typst/counter/issue-2480-counter-reset-2
====================

#set block(spacing: 3pt)
#let c = counter("c")
#let foo() = context {
  c.step()
  c.display("1")
  str(c.get().first())
}

#foo()
#block(foo())
#foo()
#foo()
#block(foo())
#block(foo())
#foo()


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (call
        (ident)
        (group))
      (context
        (block
          (call
            (field
              (ident)
              (ident))
            (group))
          (call
            (field
              (ident)
              (ident))
            (group
              (string)))
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (ident))
                (group))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group)))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group)))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group)))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/counter/issue-4626-counter-depth-skip
====================

// When we step and skip a level, the levels should be filled with zeros, not
// with ones.
#let c = counter("c")
#context test(c.get(), (0,))
#c.step(level: 4)
#context test(c.get(), (0, 0, 0, 1))
#c.step(level: 1)
#context test(c.get(), (1,))
#c.step(level: 3)
#context test(c.get(), (1, 0, 1))
--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group))
          (group
            (number))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number)))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group))
          (group
            (number)
            (number)
            (number)
            (number))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number)))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group))
          (group
            (number))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (number)))))
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (ident)
              (ident))
            (group))
          (group
            (number)
            (number)
            (number)))))))

====================
typst/locate/locate-position
====================

// Test `locate`.
#v(10pt)
= Introduction <intro>
#context test(locate(<intro>).position().y, 20pt)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (section
    (heading
      (text)
      (label))
    (content
      (code
        (context
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (label)))
                    (ident))
                  (group))
                (ident))
              (number
                (unit))))))
      (parbreak))))

====================
typst/locate/locate-position-trailing-tag
====================

// Test locating the position of a tag with no following content.
#context test(here().position().y, 10pt)
#box[]
#v(10pt)
#context test(here().position().y, 20pt)


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (field
            (call
              (field
                (call
                  (ident)
                  (group))
                (ident))
              (group))
            (ident))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (content)))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (call
              (field
                (call
                  (ident)
                  (group))
                (ident))
              (group))
            (ident))
          (number
            (unit))))))
  (parbreak))

====================
typst/locate/locate-missing-label
====================

// Error: 10-25 label `<intro>` does not exist in the document
#context locate(<intro>)


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (label)))))
  (parbreak))

====================
typst/locate/locate-duplicate-label
====================

= Introduction <intro>
= Introduction <intro>

// Error: 10-25 label `<intro>` occurs multiple times in the document
#context locate(<intro>)


--------------------

(source_file
  (section
    (heading
      (text)
      (label))
    (content))
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (code
        (context
          (call
            (ident)
            (group
              (label)))))
      (parbreak))))

====================
typst/locate/locate-element-selector
====================

#v(10pt)
= Introduction <intro>
#context test(locate(heading).position().y, 20pt)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (section
    (heading
      (text)
      (label))
    (content
      (code
        (context
          (call
            (ident)
            (group
              (field
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (ident)))
                    (ident))
                  (group))
                (ident))
              (number
                (unit))))))
      (parbreak))))

====================
typst/locate/locate-element-selector-no-match
====================

// Error: 10-25 selector does not match any element
#context locate(heading)


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (ident)))))
  (parbreak))

====================
typst/locate/locate-element-selector-multiple-matches
====================

= Introduction <intro>
= Introduction <intro>

// Error: 10-25 selector matches multiple elements
#context locate(heading)


--------------------

(source_file
  (section
    (heading
      (text)
      (label))
    (content))
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (code
        (context
          (call
            (ident)
            (group
              (ident)))))
      (parbreak))))

====================
typst/locate/locate-between-pages
====================

// Test locating tags that are before or between pages.
#set page(height: 30pt)
#context [
  // Before the first page.
  // (= at the very start of the first page, before the header)
  #test(locate(<a>).position(), (page: 1, x: 0pt, y: 0pt))

  // On the first page.
  #test(locate(<b>).position(), (page: 1, x: 10pt, y: 10pt))

  // Between the two pages.
  // (= at the very start of the first page, before the header)
  #test(locate(<c>).position(), (page: 2, x: 0pt, y: 0pt))

  // After the last page.
  // (= at the very end of the last page, after the footer)
  #test(locate(<d>).position(), (page: 2, x: 0pt, y: 30pt))
  #test(locate(<e>).position(), (page: 2, x: 0pt, y: 30pt))
]

#metadata(none) <a>
#pagebreak(weak: true)
#metadata(none) <b>
A
#pagebreak()
#metadata(none) <c>
#pagebreak(weak: true)
B
#pagebreak(weak: true)
#metadata(none) <d>
#pagebreak(weak: true)
#metadata(none) <e>


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (content
        (comment)
        (comment)
        (code
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (label)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (parbreak)
        (comment)
        (code
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (label)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (parbreak)
        (comment)
        (comment)
        (code
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (label)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (parbreak)
        (comment)
        (comment)
        (code
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (label)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (code
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (label)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (none))))
  (label)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (none))))
  (label)
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (none))))
  (label)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (none))))
  (label)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (none))))
  (label)
  (parbreak))

====================
typst/locate/issue-4029-locate-after-spacing
====================

#set page(margin: 10pt)
#show heading: it => v(40pt) + it

= Introduction
#context test(
  locate(heading).position(),
  (page: 1, x: 10pt, y: 50pt),
)



--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (add
          (call
            (ident)
            (group
              (number
                (unit))))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (context
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))
      (parbreak))))

====================
typst/locate/issue-4029-locate-after-pagebreak
====================

#set page(margin: 10pt)
#show heading: it => pagebreak() + it

= Introduction
#context test(
  locate(heading).position(),
  (page: 2, x: 10pt, y: 10pt),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (add
          (call
            (ident)
            (group))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (context
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (group))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))
      (parbreak))))

====================
typst/locate/issue-4029-locate-after-par-and-pagebreak
====================

// Ensure that the heading's tag isn't stuck at the end of the paragraph.
#set page(margin: 10pt)
Par
#show heading: it => pagebreak() + it
= Introduction
#context test(locate(heading).page(), 2)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (add
          (call
            (ident)
            (group))
          (ident)))))
  (section
    (heading
      (text))
    (content
      (code
        (context
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (group))
              (number)))))
      (parbreak))))

====================
typst/locate/issue-1886-locate-after-metadata
====================

#show heading: it => {
  metadata(it.label)
  pagebreak(weak: true, to: "odd")
  it
}

Hi
= Hello <hello>
= World <world>

// The metadata's position does not migrate to the next page, but the heading's
// does.
#context {
  test(locate(metadata.where(value: <hello>)).page(), 1)
  test(locate(<hello>).page(), 3)
  test(locate(metadata.where(value: <world>)).page(), 3)
  test(locate(<world>).page(), 5)
}


--------------------

(source_file
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (bool))
              (tagged
                (ident)
                (string))))
          (ident)))))
  (parbreak)
  (text)
  (section
    (heading
      (text)
      (label))
    (content))
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (comment)
      (code
        (context
          (block
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (label))))))
                    (ident))
                  (group))
                (number)))
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (label)))
                    (ident))
                  (group))
                (number)))
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (label))))))
                    (ident))
                  (group))
                (number)))
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (label)))
                    (ident))
                  (group))
                (number))))))
      (parbreak))))

====================
typst/locate/issue-1833-locate-place
====================

#set page(height: 60pt)
#context {
  place(right + bottom, rect())
  test(here().position(), (page: 1, x: 10pt, y: 10pt))
}
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (block
        (call
          (ident)
          (group
            (add
              (ident)
              (ident))
            (call
              (ident)
              (group))))
        (call
          (ident)
          (group
            (call
              (field
                (call
                  (ident)
                  (group))
                (ident))
              (group))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit))))))))))

====================
typst/query/query-here
====================

// Test that `here()` yields the context element's location.
#context test(query(here()).first().func(), (context none).func())


--------------------

(source_file
  (comment)
  (code
    (context
      (call
        (ident)
        (group
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (call
                        (ident)
                        (group))))
                  (ident))
                (group))
              (ident))
            (group))
          (call
            (field
              (group
                (context
                  (none)))
              (ident))
            (group))))))
  (parbreak))

====================
typst/query/query-running-header
====================

#set page(
  paper: "a8",
  margin: (y: 1cm, x: 0.5cm),
  header: context {
    smallcaps[Typst Academy]
    h(1fr)
    let after = query(selector(heading).after(here()))
    let before = query(selector(heading).before(here()))
    let elem = if before.len() != 0 {
      before.last()
    } else if after.len() != 0 {
      after.first()
    }
    emph(elem.body)
  }
)

#outline()

= Introduction
#lines(1)

= Background
#lines(2)

= Approach


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (context
              (block
                (call
                  (ident)
                  (content
                    (text)))
                (call
                  (ident)
                  (group
                    (number
                      (unit))))
                (let
                  (ident)
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group
                          (call
                            (ident)
                            (group)))))))
                (let
                  (ident)
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group
                          (call
                            (ident)
                            (group)))))))
                (let
                  (ident)
                  (branch
                    (cmp
                      (call
                        (field
                          (ident)
                          (ident))
                        (group))
                      (number))
                    (block
                      (call
                        (field
                          (ident)
                          (ident))
                        (group)))
                    (branch
                      (cmp
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))
                        (number))
                      (block
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))))))
                (call
                  (ident)
                  (group
                    (field
                      (ident)
                      (ident)))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (number))))
      (parbreak)))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (number))))
      (parbreak)))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/query/query-list-of-figures
====================

#set page(
  paper: "a8",
  numbering: "1 / 1",
  margin: (bottom: 1cm, rest: 0.5cm),
)

#set figure(numbering: "I")
#show figure: set image(width: 80%)

= List of Figures
#context {
  let elements = query(selector(figure).after(here()))
  for it in elements [
    Figure
    #numbering(it.numbering,
      ..counter(figure).at(it.location())):
    #it.caption.body
    #box(width: 1fr, repeat[.])
    #counter(page).at(it.location()).first() \
  ]
}

#figure(
  image("/assets/images/cylinder.svg", width: 50%),
  caption: [Cylinder],
)

#figure(
  rect[Just some stand-in text],
  kind: image,
  supplement: "Figure",
  caption: [Stand-in text],
)

#figure(
  image("/assets/images/tetrahedron.svg", width: 50%),
  caption: [Tetrahedron],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (context
          (block
            (let
              (ident)
              (call
                (ident)
                (group
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (ident)))
                      (ident))
                    (group
                      (call
                        (ident)
                        (group)))))))
            (for
              (ident)
              (ident)
              (content
                (text)
                (code
                  (call
                    (ident)
                    (group
                      (field
                        (ident)
                        (ident))
                      (elude
                        (call
                          (field
                            (call
                              (ident)
                              (group
                                (ident)))
                            (ident))
                          (group
                            (call
                              (field
                                (ident)
                                (ident))
                              (group))))))))
                (text)
                (code
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident)))
                (code
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (number
                          (unit)))
                      (call
                        (ident)
                        (content
                          (text))))))
                (code
                  (call
                    (field
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group
                          (call
                            (field
                              (ident)
                              (ident))
                            (group))))
                      (ident))
                    (group)))
                (linebreak))))))
      (parbreak)
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (content
                (text))))))
      (parbreak)
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (content
                (text)))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (content
                (text))))))
      (parbreak)
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (string)
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (content
                (text))))))
      (parbreak))))

====================
typst/query/query-complex
====================

= A
== B
#figure([Cat], kind: "cat", supplement: [Other])
#heading(level: 3, outlined: false)[D]
= E <first>
#figure([Frog], kind: "frog", supplement: none)
#figure([Giraffe], kind: "giraffe", supplement: none) <second>
#figure([GiraffeCat], kind: "cat", supplement: [Other]) <second>
= H
#figure([Iguana], kind: "iguana", supplement: none)
== I

#let test-selector(selector, ref) = context {
  test(query(selector).map(e => e.body), ref)
}

// Test `or`.
#test-selector(
  heading.where(level: 1).or(heading.where(level: 3)),
  ([A], [D], [E], [H]),
)

#test-selector(
  selector(heading).and(heading.where(outlined: false)),
  ([D],)
)

#test-selector(
  heading.where(level: 1).or(
    heading.where(level: 3),
    figure.where(kind: "frog"),
  ),
  ([A], [D], [E], [Frog], [H]),
)

#test-selector(
  heading.where(level: 1).or(
    heading.where(level: 2),
    figure.where(kind: "frog"),
    figure.where(kind: "cat"),
  ),
  ([A], [B], [Cat], [E], [Frog], [GiraffeCat], [H], [I]),
)

#test-selector(
  figure.where(kind: "dog").or(heading.where(level: 3)),
  ([D],),
)

#test-selector(
  figure.where(kind: "dog").or(figure.where(kind: "fish")),
  (),
)

// Test `or` duplicates removal.
#test-selector(
  heading.where(level: 1).or(heading.where(level: 1)),
  ([A], [E], [H]),
)

// Test `and`.
#test-selector(
  figure.where(kind: "cat").and(figure.where(kind: "frog")),
  (),
)

// Test `or` with `before`/`after`
#test-selector(
  selector(heading)
    .before(<first>)
    .or(selector(figure).before(<first>)),
  ([A], [B], [Cat], [D], [E]),
)

#test-selector(
  heading.where(level: 2)
    .after(<first>)
    .or(selector(figure).after(<first>)),
  ([Frog], [Giraffe], [GiraffeCat], [Iguana], [I]),
)

// Test `and` with `after`
#test-selector(
   figure.where(kind: "cat")
    .and(figure.where(supplement: [Other]))
    .after(<first>),
   ([GiraffeCat],),
)

// Test `and` (with nested `or`)
#test-selector(
  heading.where(level: 2)
    .or(heading.where(level: 3))
    .and(heading.where(level: 2).or(heading.where(level: 1))),
  ([B], [I]),
)

#test-selector(
  heading.where(level: 2)
    .or(heading.where(level: 3), heading.where(level:1))
    .and(
      heading.where(level: 2).or(heading.where(level: 1)),
      heading.where(level: 3).or(heading.where(level: 1)),
    ),
  ([A], [E], [H]),
)

// Test `and` with `or` and `before`/`after`
#test-selector(
  heading.where(level: 1).before(<first>)
    .or(heading.where(level: 3).before(<first>))
    .and(
      heading.where(level: 1).before(<first>)
        .or(heading.where(level: 2).before(<first>))
    ),
  ([A], [E]),
)

#test-selector(
  heading.where(level: 1).before(<first>, inclusive: false)
    .or(selector(figure).after(<first>))
    .and(figure.where(kind: "iguana").or(
      figure.where(kind: "frog"),
      figure.where(kind: "cat"),
      heading.where(level: 1).after(<first>),
    )),
  ([Frog], [GiraffeCat], [Iguana])
)


--------------------

(source_file
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (code
            (call
              (ident)
              (group
                (content
                  (text))
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (content
                    (text))))))
          (code
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number))
                  (tagged
                    (ident)
                    (bool))))
              (content
                (text))))))))
  (section
    (heading
      (text)
      (label))
    (content
      (code
        (call
          (ident)
          (group
            (content
              (text))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (none)))))
      (code
        (call
          (ident)
          (group
            (content
              (text))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (none)))))
      (label)
      (code
        (call
          (ident)
          (group
            (content
              (text))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (content
                (text))))))
      (label)))
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (content
              (text))
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (none)))))
      (section
        (heading
          (text))
        (content
          (parbreak)
          (code
            (let
              (call
                (ident)
                (group
                  (ident)
                  (ident)))
              (context
                (block
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group
                          (lambda
                            (ident)
                            (field
                              (ident)
                              (ident)))))
                      (ident)))))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (ident)))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (bool))))))
                (group
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))))
                (group
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))))
                (group))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (number))))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (tagged
                          (ident)
                          (string))))))
                (group))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (ident)
                          (group
                            (ident)))
                        (ident))
                      (group
                        (label)))
                    (ident))
                  (group
                    (call
                      (field
                        (call
                          (ident)
                          (group
                            (ident)))
                        (ident))
                      (group
                        (label)))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (ident))
                      (group
                        (label)))
                    (ident))
                  (group
                    (call
                      (field
                        (call
                          (ident)
                          (group
                            (ident)))
                        (ident))
                      (group
                        (label)))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (string))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (content
                                (text)))))))
                    (ident))
                  (group
                    (label)))
                (group
                  (content
                    (text))))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))))
                    (ident))
                  (group
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))))))
                (group
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))))
                    (ident))
                  (group
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))))
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (number))))))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (comment)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (tagged
                                  (ident)
                                  (number))))
                            (ident))
                          (group
                            (label)))
                        (ident))
                      (group
                        (call
                          (field
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (tagged
                                  (ident)
                                  (number))))
                            (ident))
                          (group
                            (label)))))
                    (ident))
                  (group
                    (call
                      (field
                        (call
                          (field
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (tagged
                                  (ident)
                                  (number))))
                            (ident))
                          (group
                            (label)))
                        (ident))
                      (group
                        (call
                          (field
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (tagged
                                  (ident)
                                  (number))))
                            (ident))
                          (group
                            (label)))))))
                (group
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak)
          (code
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (field
                        (call
                          (field
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (tagged
                                  (ident)
                                  (number))))
                            (ident))
                          (group
                            (label)
                            (tagged
                              (ident)
                              (bool))))
                        (ident))
                      (group
                        (call
                          (field
                            (call
                              (ident)
                              (group
                                (ident)))
                            (ident))
                          (group
                            (label)))))
                    (ident))
                  (group
                    (call
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (string))))
                        (ident))
                      (group
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (string))))
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (string))))
                        (call
                          (field
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (tagged
                                  (ident)
                                  (number))))
                            (ident))
                          (group
                            (label)))))))
                (group
                  (content
                    (text))
                  (content
                    (text))
                  (content
                    (text))))))
          (parbreak))))))

====================
typst/query/issue-3726-query-show-set
====================

// Test that show rules apply to queried elements, i.e. that the content
// returned from `query` isn't yet marked as prepared.
#set heading(numbering: "1.")
#show heading: underline
= Hi

#set heading(numbering: "I.")
#show heading: set text(blue)
#show heading: highlight.with(fill: aqua.lighten(50%))
= Bye

// New show rules apply to this, but its location and the materialized fields
// from the original are retained.
#context query(heading).join()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (ident)
      (ident)))
  (section
    (heading
      (text))
    (content
      (parbreak)
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))))
      (code
        (show
          (ident)
          (set
            (call
              (ident)
              (group
                (ident))))))
      (code
        (show
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))))))
  (section
    (heading
      (text))
    (content
      (parbreak)
      (comment)
      (comment)
      (code
        (context
          (call
            (field
              (call
                (ident)
                (group
                  (ident)))
              (ident))
            (group))))
      (parbreak))))

====================
typst/query/query-quote
====================

// Test quoting a query.

#quote[ABC] & #quote[EFG]

#context query(selector(quote).before(here())).first()

#quote(block: true)[HIJ]
#quote(block: true)[KLM]

#context query(selector(quote).before(here())).last()

#quote[NOP] <nop>

#context query(<nop>).first()


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak)
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (group
                  (call
                    (ident)
                    (group))))))
          (ident))
        (group))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak)
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (call
                (field
                  (call
                    (ident)
                    (group
                      (ident)))
                  (ident))
                (group
                  (call
                    (ident)
                    (group))))))
          (ident))
        (group))))
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (parbreak)
  (code
    (context
      (call
        (field
          (call
            (ident)
            (group
              (label)))
          (ident))
        (group))))
  (parbreak))

====================
typst/query/issue-5117-query-order-place
====================

#let t(expected) = context {
  let elems = query(selector(metadata).after(here()))
  let val = elems.first().value
  test(val, expected)
}

#{
  t("a")
  place(metadata("a"))
}

#{
  t("b")
  block(height: 1fr, metadata("b"))
}
--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (context
        (block
          (let
            (ident)
            (call
              (ident)
              (group
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (ident)))
                    (ident))
                  (group
                    (call
                      (ident)
                      (group)))))))
          (let
            (ident)
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (ident)))
          (call
            (ident)
            (group
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (block
      (call
        (ident)
        (group
          (string)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (string)))))))
  (parbreak)
  (code
    (block
      (call
        (ident)
        (group
          (string)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (call
            (ident)
            (group
              (string))))))))

====================
typst/fold/fold-vec-order-text-features
====================

// Test fold order of vectors.
#set text(features: (liga: 1))
#set text(features: (liga: 0))
fi


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number))))))))
  (text)
  (parbreak))

====================
typst/fold/fold-vec-order-text-decos
====================

#underline(stroke: aqua + 4pt)[
  #underline[Hello]
]


--------------------

(source_file
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (ident)
              (number
                (unit))))))
      (content
        (code
          (call
            (ident)
            (content
              (text)))))))
  (parbreak))

====================
typst/fold/fold-vec-order-meta
====================

#let c = counter("mycounter")
#c.update(1)

#context [
  #c.update(2)
  #c.get() \
  Second: #context c.get()
]
--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (parbreak)
  (code
    (context
      (content
        (code
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (code
          (call
            (field
              (ident)
              (ident))
            (group)))
        (linebreak)
        (text)
        (code
          (context
            (call
              (field
                (ident)
                (ident))
              (group))))))))

====================
typst/set/set-instantiation-site
====================

// Test that text is affected by instantiation-site bold.
#let x = [World]
Hello *#x*


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (content
        (text))))
  (text)
  (strong
    (code
      (ident)))
  (parbreak))

====================
typst/set/set-instantiation-site-markup
====================

// Test that lists are affected by correct indents.
#let fruit = [
  - Apple
  - Orange
  #list(body-indent: 20pt)[Pear]
]

- Fruit
#[#set list(indent: 10pt)
 #fruit]
- No more fruit


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (content
        (item
          (text))
        (item
          (text))
        (code
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text)))))))
  (parbreak)
  (item
    (text))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (code
        (ident))))
  (item
    (text))
  (parbreak))

====================
typst/set/set-text-override
====================

// Test that block spacing and text style are respected from
// the outside, but the more specific fill is respected.
#set par(spacing: 4pt)
#set text(style: "italic", fill: eastern)
#let x = [And the forest #parbreak() lay silent!]
#text(fill: forest, x)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (code
    (let
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (group)))
        (text))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (ident))))
  (parbreak))

====================
typst/set/set-scoped-in-code-block
====================

// Test that scoping works as expected.
#{
  if true {
    set text(blue)
    [Blue ]
  }
  [Not blue]
}


--------------------

(source_file
  (comment)
  (code
    (block
      (branch
        (bool)
        (block
          (set
            (call
              (ident)
              (group
                (ident))))
          (content
            (text))))
      (content
        (text))))
  (parbreak))

====================
typst/set/closure-path-resolve-in-layout-phase
====================

// Test relative path resolving in layout phase.
#let choice = ("monkey.svg", "rhino.png", "tiger.jpg")
#set enum(numbering: n => {
  let path = "/assets/images/" + choice.at(n - 1)
  move(dy: -0.15em, image(path, width: 1em, height: 1em))
})

+ Monkey
+ Rhino
+ Tiger


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (string)
        (string)
        (string))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (ident)
              (block
                (let
                  (ident)
                  (add
                    (string)
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (sub
                          (ident)
                          (number))))))
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (call
                      (ident)
                      (group
                        (ident)
                        (tagged
                          (ident)
                          (number
                            (unit)))
                        (tagged
                          (ident)
                          (number
                            (unit))))))))))))))
  (parbreak)
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/set/set-if
====================

// Test conditional set.
#show ref: it => {
  set text(red) if it.target == <unknown>
  "@" + str(it.target)
}

@hello from the @unknown


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (ident)))
            (cmp
              (field
                (ident)
                (ident))
              (label)))
          (add
            (string)
            (call
              (ident)
              (group
                (field
                  (ident)
                  (ident)))))))))
  (parbreak)
  (ref)
  (text)
  (ref)
  (parbreak))

====================
typst/set/set-if-bad-type
====================

// Error: 19-24 expected boolean, found integer
#set text(red) if 1 + 2


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))
      (add
        (number)
        (number))))
  (parbreak))

====================
typst/set/set-in-expr
====================

// Error: 12-26 set is only allowed directly in code and content blocks
#{ let x = set text(blue) }


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (set
          (call
            (ident)
            (group
              (ident)))))))
  (parbreak))

====================
typst/set/set-bad-trivia
====================

// Error cases parsing set rules with trivia between the function and args.
// Error: 10 expected argument list
#set page
         (numbering: "1")
// Error: 10 expected argument list
// Hint: 10 there may not be any spaces before the argument list
#set page (numbering: "2")
// Error: 10 expected argument list
// Hint: 10 there may not be any spaces before the argument list
#set page/**/(numbering: "3")

// This is fine though
#set/**/page(numbering: "4")


--------------------



====================
typst/set/set-vs-construct-1
====================

// Ensure that constructor styles aren't passed down the tree.
// The inner list should have no extra indent.
#set par(leading: 2pt)
#list(body-indent: 20pt, [First], list[A][B])


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (call
          (call
            (ident)
            (content
              (text)))
          (content
            (text))))))
  (parbreak))

====================
typst/set/set-vs-construct-2
====================

// Ensure that constructor styles win, but not over outer styles.
// The outer paragraph should be right-aligned,
// but the B should be center-aligned.
#set list(marker: [>])
#list(marker: [--])[
  #rect(width: 2cm, fill: conifer, inset: 4pt, list[A])
]


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (shorthand)))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (ident)
                (content
                  (text)))))))))
  (parbreak))

====================
typst/set/set-vs-construct-3
====================

// The inner rectangle should also be yellow here.
// (and therefore invisible)
#[#set rect(fill: yellow);#text(1em, rect(inset: 5pt, rect()))]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))
      (code
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (call
                  (ident)
                  (group)))))))))
  (parbreak))

====================
typst/set/set-vs-construct-4
====================

// The inner rectangle should not be yellow here.
A #box(rect(fill: yellow, inset: 5pt, rect())) B


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (group)))))))
  (text)
  (parbreak))

====================
typst/set/show-set-vs-construct
====================

// The constructor property should still work
// when there are recursive show rules.
#show enum: set text(blue)
#enum(numbering: "(a)", [A], enum[B])
--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (content
          (text))
        (call
          (ident)
          (content
            (text)))))))

====================
typst/show-text/show-text-basic
====================

// Test classic example.
#set text(font: "Roboto")
#show "Der Spiegel": smallcaps
Die Zeitung Der Spiegel existiert.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (string)
      (ident)))
  (text)
  (parbreak))

====================
typst/show-text/show-text-regex
====================

// Another classic example.
#show "TeX": [T#h(-0.145em)#box(move(dy: 0.233em)[E])#h(-0.135em)X]
#show regex("(Lua)?(La)?TeX"): name => box(text(font: "New Computer Modern")[#name])

TeX, LaTeX, LuaTeX and LuaLaTeX!


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (content
        (text)
        (code
          (call
            (ident)
            (group
              (sign
                (number
                  (unit))))))
        (code
          (call
            (ident)
            (group
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text))))))
        (code
          (call
            (ident)
            (group
              (sign
                (number
                  (unit))))))
        (text))))
  (code
    (show
      (call
        (ident)
        (group
          (string)))
      (lambda
        (ident)
        (call
          (ident)
          (group
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))))
              (content
                (code
                  (ident)))))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/show-text/show-text-cyclic
====================

// Test direct cycle.
#show "Hello": text(red)[Hello]
Hello World!


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (call
        (call
          (ident)
          (group
            (ident)))
        (content
          (text)))))
  (text)
  (parbreak))

====================
typst/show-text/show-text-cyclic-raw
====================

// Test replacing text with raw text.
#show "rax": `rax`
The register rax.


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (raw_span
        (blob))))
  (text)
  (parbreak))

====================
typst/show-text/show-text-indirectly-cyclic
====================

// Test indirect cycle.
#show "Good": [Typst!]
#show "Typst": [Fun!]
#show "Fun": [Good!]

#set text(ligatures: false)
Good \
Fun \
Typst \


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (content
        (text))))
  (code
    (show
      (string)
      (content
        (text))))
  (code
    (show
      (string)
      (content
        (text))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (parbreak))

====================
typst/show-text/show-text-exactly-once
====================

// Test that replacements happen exactly once.
#show "A": [BB]
#show "B": [CC]
AA (8)


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (content
        (text))))
  (code
    (show
      (string)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/show-text/show-text-regex-word-boundary
====================

// Test caseless match and word boundaries.
#show regex("(?i)\bworld\b"): [🌍]

Treeworld, the World of worlds, is a world.


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (ident)
        (group
          (string
            (escape)
            (escape))))
      (content
        (text))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/show-text/show-text-empty
====================

// Test there is no crashing on empty strings
// Error: 1:7-1:9 text selector is empty
#show "": []


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (string)
      (content)))
  (parbreak))

====================
typst/show-text/show-text-regex-empty
====================

// Error: 1:7-1:16 regex selector is empty
#show regex(""): [AA]


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (ident)
        (group
          (string)))
      (content
        (text))))
  (parbreak))

====================
typst/show-text/show-text-regex-matches-empty
====================

// Error: 1:7-1:42 regex matches empty text
#show regex("(VAR_GLOBAL|END_VAR||BOOL)") : []


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (ident)
        (group
          (string)))
      (content)))
  (parbreak))

====================
typst/show-text/show-text-regex-character-class
====================

// This is a fun one.
#set par(justify: true)
#show regex("\S"): letter => box(stroke: 1pt, inset: 2pt, upper(letter))
#lorem(5)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (show
      (call
        (ident)
        (group
          (string
            (escape))))
      (lambda
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (group
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/show-text/show-text-regex-case-insensitive
====================

// See also: https://github.com/mTvare6/hello-world.rs
#show regex("(?i)rust"): it => [#it (🚀)]
Rust is memory-safe and blazingly fast. Let's rewrite everything in rust.


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (ident)
        (group
          (string)))
      (lambda
        (ident)
        (content
          (code
            (ident))
          (text)))))
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/show-text/show-text-get-text-on-it
====================

// Test accessing the string itself.
#show "hello": it => it.text.split("").map(upper).join("|")
Oh, hello there!


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (lambda
        (ident)
        (call
          (field
            (call
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (string)))
                (ident))
              (group
                (ident)))
            (ident))
          (group
            (string))))))
  (text)
  (parbreak))

====================
typst/show-text/show-text-in-other-show
====================

// Replace worlds but only in lists.
#show list: it => [
  #show "World": [🌎]
  #it
]

World
- World


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (content
          (code
            (show
              (string)
              (content
                (text))))
          (code
            (ident))))))
  (parbreak)
  (text)
  (item
    (text))
  (parbreak))

====================
typst/show-text/show-text-path-resolving
====================

// Test absolute path in layout phase.

#show "GRAPH": image("/assets/images/graph.png")

The GRAPH has nodes.


--------------------

(source_file
  (comment)
  (parbreak)
  (code
    (show
      (string)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-adjacent-1
====================

#show "He": set text(red)
#show "ya": set text(blue)
Heya


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-contained-1
====================

#show "Heya": set text(red)
#show   "ya": set text(blue)
Heya


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-contained-3
====================

#show "He": set text(red)
#show "Heya": set text(blue)
Heya


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-overlapping-1
====================

#show "Heya": set text(red)
#show   "yaho": set text(blue)
Heyaho


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-adjacent-2
====================

#show "He": set text(red)
#show "ya": set text(weight: "bold")
Heya


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-contained-2
====================

#show "Heya": set text(red)
#show   "ya": set text(weight: "bold")
Heya


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-contained-4
====================

#show "He": set text(red)
#show "Heya": set text(weight: "bold")
Heya


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (text)
  (parbreak))

====================
typst/show-text/show-set-text-order-overlapping-2
====================

#show "Heya": set text(red)
#show   "yaho": set text(weight: "bold")
Heyaho


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (text)
  (parbreak))

====================
typst/show-text/show-text-smartquote
====================

#show "up,\" she": set text(red)
"What's up," she asked.


--------------------

(source_file
  (code
    (show
      (string
        (escape))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (quote)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/show-text/show-text-apostrophe
====================

#show regex("Who's|We've"): highlight
Who's got it? \
We've got it.


--------------------

(source_file
  (code
    (show
      (call
        (ident)
        (group
          (string)))
      (ident)))
  (text)
  (quote)
  (text)
  (linebreak)
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/show-text/show-text-citation
====================

#show "hey": [@arrgh]
@netwok hey

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (code
    (show
      (string)
      (content
        (ref))))
  (ref)
  (text)
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/show-text/show-text-list
====================

#show "hi": [- B]
- A
hi
- C


--------------------

(source_file
  (code
    (show
      (string)
      (content
        (item
          (text)))))
  (item
    (text))
  (text)
  (item
    (text))
  (parbreak))

====================
typst/show-text/show-text-citation-smartquote
====================

#show "hey \"": [@arrgh]
#show "dis": [@distress]
@netwok hey " dis

#show bibliography: none
#bibliography("/assets/bib/works.bib", style: "american-physics-society")


--------------------

(source_file
  (code
    (show
      (string
        (escape))
      (content
        (ref))))
  (code
    (show
      (string)
      (content
        (ref))))
  (ref)
  (text)
  (quote)
  (text)
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/show-text/show-text-in-citation
====================

#show "A": "B"
#show "[": "("
#show "]": ")"
#show "[2]": set text(red)

@netwok A \
@arrgh B

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (code
    (show
      (string)
      (string)))
  (code
    (show
      (string)
      (string)))
  (code
    (show
      (string)
      (string)))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (parbreak)
  (ref)
  (text)
  (linebreak)
  (ref)
  (text)
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/show-text/show-text-linebreak
====================

#show "lo\nwo": set text(red)
Hello #[ ] \
#[ ] #[ ] world!


--------------------

(source_file
  (code
    (show
      (string
        (escape))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (code
    (content))
  (linebreak)
  (code
    (content))
  (code
    (content))
  (text)
  (parbreak))

====================
typst/show-text/show-text-line-wrapping
====================

#show "start end": "word"
start
end


--------------------

(source_file
  (code
    (show
      (string)
      (string)))
  (text)
  (text)
  (parbreak))

====================
typst/show-text/show-text-after-normal-show
====================

#show rect: "world"
#show "lo wo": set text(red)
hello #rect()


--------------------

(source_file
  (code
    (show
      (ident)
      (string)))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/show-text/show-text-space-collapsing
====================

#show "i ther": set text(red)
hi#[ ]#[ ]the#"re"


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (code
    (content))
  (code
    (content))
  (text)
  (code
    (string))
  (parbreak))

====================
typst/show-text/show-text-style-boundary
====================

#show "What's up": set text(blue)
#show "your party": underline
What's #[ ] up at #"your" #text(red)[party?]


--------------------

(source_file
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (ident)))
  (text)
  (quote)
  (text)
  (code
    (content))
  (text)
  (code
    (string))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak))

====================
typst/show-text/show-text-within-par
====================

#show "Pythagoras'": highlight
$a^2 + b^2 = c^2$ is Pythagoras' theorem.


--------------------

(source_file
  (code
    (show
      (string)
      (ident)))
  (math
    (formula
      (attach
        (letter)
        (number))
      (symbol)
      (attach
        (letter)
        (number))
      (symbol)
      (attach
        (letter)
        (number))))
  (text)
  (quote)
  (text)
  (parbreak))

====================
typst/show-text/show-text-outer-space
====================

// Spaces must be interior to strong textual elements for matching to work.
// For outer spaces, it is hard to say whether they would collapse.
#show "a\n": set text(blue)
#show "b\n ": set text(blue)
#show " c ": set text(blue)
a \ #h(0pt, weak: true)
b \ #h(0pt, weak: true)
$x$ c $y$


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (string
        (escape))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string
        (escape))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (string)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (math
    (formula
      (letter)))
  (text)
  (math
    (formula
      (letter)))
  (parbreak))

====================
typst/show-text/issue-5014-show-text-tags
====================

#{
  let c = counter("c")
  show "b": context c.get().first()
  [a]
  c.step()
  [bc]
}
--------------------

(source_file
  (code
    (block
      (let
        (ident)
        (call
          (ident)
          (group
            (string))))
      (show
        (string)
        (context
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (ident))
            (group))))
      (content
        (text))
      (call
        (field
          (ident)
          (ident))
        (group))
      (content
        (text)))))

====================
typst/show/show-selector-basic
====================

// Override lists.
#show list: it => "(" + it.children.map(v => v.body).join(", ") + ")"

- A
  - B
  - C
- D
- E


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (add
          (add
            (string)
            (call
              (field
                (call
                  (field
                    (field
                      (ident)
                      (ident))
                    (ident))
                  (group
                    (lambda
                      (ident)
                      (field
                        (ident)
                        (ident)))))
                (ident))
              (group
                (string))))
          (string)))))
  (parbreak)
  (item
    (text)
    (item
      (text))
    (item
      (text)))
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/show/show-selector-replace-and-show-set
====================

// Test full reset.
#show heading: [B]
#show heading: set text(size: 10pt, weight: 400)
A #[= Heading] C


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (content
        (text))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number)))))))
  (text)
  (code
    (content
      (section
        (heading
          (text))
        (content))))
  (text)
  (parbreak))

====================
typst/show/show-selector-discard
====================

// Test full removal.
#show heading: none

Where is
= There are no headings around here!
my heading?


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (none)))
  (parbreak)
  (text)
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak))))

====================
typst/show/show-selector-realistic
====================

// Test integrated example.
#show heading: it => block({
  set text(10pt)
  box(move(dy: -1pt)[📖])
  h(5pt)
  if it.level == 1 {
    underline(text(1.25em, blue, it.body))
  } else {
    text(red, it.body)
  }
})

= Task 1
Some text.

== Subtask
Some more text.

= Task 2
Another text.


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (block
              (set
                (call
                  (ident)
                  (group
                    (number
                      (unit)))))
              (call
                (ident)
                (group
                  (call
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (sign
                            (number
                              (unit))))))
                    (content
                      (text)))))
              (call
                (ident)
                (group
                  (number
                    (unit))))
              (branch
                (cmp
                  (field
                    (ident)
                    (ident))
                  (number))
                (block
                  (call
                    (ident)
                    (group
                      (call
                        (ident)
                        (group
                          (number
                            (unit))
                          (ident)
                          (field
                            (ident)
                            (ident)))))))
                (block
                  (call
                    (ident)
                    (group
                      (ident)
                      (field
                        (ident)
                        (ident))))))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak)
      (section
        (heading
          (text))
        (content
          (text)
          (parbreak)))))
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak))))

====================
typst/show/show-in-show
====================

// Test set and show in code blocks.
#show heading: it => {
  set text(red)
  show "ding": [🛎]
  it.body
}

= Heading


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (ident))))
          (show
            (string)
            (content
              (text)))
          (field
            (ident)
            (ident))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show/show-nested-scopes
====================

// Test that scoping works as expected.
#{
  let world = [ World ]
  show "W": strong
  world
  {
    set text(blue)
    show: it => {
      show "o": "Ø"
      it
    }
    world
  }
  world
}


--------------------

(source_file
  (comment)
  (code
    (block
      (let
        (ident)
        (content
          (text)))
      (show
        (string)
        (ident))
      (ident)
      (block
        (set
          (call
            (ident)
            (group
              (ident))))
        (show
          (lambda
            (ident)
            (block
              (show
                (string)
                (string))
              (ident))))
        (ident))
      (ident)))
  (parbreak))

====================
typst/show/show-selector-replace
====================

#show heading: [1234]
= Heading


--------------------

(source_file
  (code
    (show
      (ident)
      (content
        (text))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show/show-unknown-field
====================

// Error: 25-29 heading does not have field "page"
#show heading: it => it.page
= Heading


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (field
          (ident)
          (ident)))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show/show-text-element-discard
====================

#show text: none
Hey


--------------------

(source_file
  (code
    (show
      (ident)
      (none)))
  (text)
  (parbreak))

====================
typst/show/show-selector-not-an-element-function
====================

// Error: 7-12 only element functions can be used as selectors
#show upper: it => {}


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block))))
  (parbreak))

====================
typst/show/show-bad-replacement-type
====================

// Error: 16-20 expected content or function, found integer
#show heading: 1234
= Heading


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (number)))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show/show-bad-selector-type
====================

// Error: 7-10 expected symbol, string, label, function, regex, or selector, found color
#show red: []


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (content)))
  (parbreak))

====================
typst/show/show-selector-in-expression
====================

// Error: 7-25 show is only allowed directly in code and content blocks
#(1 + show heading: none)


--------------------

(source_file
  (comment)
  (code
    (group
      (add
        (number)
        (show
          (ident)
          (none)))))
  (parbreak))

====================
typst/show/show-bare-basic
====================

#set page(height: 130pt)
#set text(0.7em)

#align(center)[
  #text(1.3em)[*Essay on typography*] \
  T. Ypst
]

#show: columns.with(2)
#lines(16)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (code
          (call
            (call
              (ident)
              (group
                (number
                  (unit))))
            (content
              (strong
                (text)))))
        (linebreak)
        (text))))
  (parbreak)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (number)))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/show/show-bare-content-block
====================

// Test bare show in content block.
A #[_B #show: c => [*#c*]; C_] D


--------------------

(source_file
  (comment)
  (text)
  (code
    (content
      (emph
        (text)
        (code
          (show
            (lambda
              (ident)
              (content
                (strong
                  (code
                    (ident)))))))
        (text))))
  (text)
  (parbreak))

====================
typst/show/show-bare-vs-set-text
====================

// Test style precedence.
#set text(fill: eastern, size: 1.5em)
#show: text.with(fill: forest)
Forest


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (parbreak))

====================
typst/show/show-bare-replace-with-content
====================

#show: [Shown]
Ignored


--------------------

(source_file
  (code
    (show
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/show/show-bare-in-expression
====================

// Error: 4-19 show is only allowed directly in code and content blocks
#((show: body => 2) * body)


--------------------

(source_file
  (comment)
  (code
    (group
      (mul
        (group
          (show
            (lambda
              (ident)
              (number))))
        (ident))))
  (parbreak))

====================
typst/show/show-bare-missing-colon-closure
====================

// Error: 6 expected colon
#show it => {}


--------------------



====================
typst/show/show-bare-missing-colon
====================

// Error: 6 expected colon
#show it


--------------------



====================
typst/show/show-recursive-identity
====================

// Test basic identity.
#show heading: it => it
= Heading


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (ident))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show/show-multiple-rules
====================

// Test more recipes down the chain.
#show list: scale.with(origin: left, x: 80%)
#show heading: []
#show enum: []
- Actual
- Tight
- List
= Nope


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (content)))
  (code
    (show
      (ident)
      (content)))
  (item
    (text))
  (item
    (text))
  (item
    (text))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show/show-rule-in-function
====================

// Test show rule in function.
#let starwars(body) = {
  show list: it => block({
    stack(dir: ltr,
      text(red, it),
      1fr,
      scale(x: -100%, text(blue, it)),
    )
  })
  body
}

- Normal list

#starwars[
  - Star
  - Wars
  - List
]

- Normal list


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (block
        (show
          (ident)
          (lambda
            (ident)
            (call
              (ident)
              (group
                (block
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (ident))
                      (call
                        (ident)
                        (group
                          (ident)
                          (ident)))
                      (number
                        (unit))
                      (call
                        (ident)
                        (group
                          (tagged
                            (ident)
                            (sign
                              (number
                                (unit))))
                          (call
                            (ident)
                            (group
                              (ident)
                              (ident))))))))))))
        (ident))))
  (parbreak)
  (item
    (text))
  (parbreak)
  (code
    (call
      (ident)
      (content
        (item
          (text))
        (item
          (text))
        (item
          (text)))))
  (parbreak)
  (item
    (text))
  (parbreak))

====================
typst/show/show-recursive-multiple
====================

// Test multi-recursion with nested lists.
#set rect(inset: 3pt)
#show list: rect.with(stroke: blue)
#show list: rect.with(stroke: red)
#show list: block

- List
  - Nested
  - List
- Recursive!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (ident)
      (ident)))
  (parbreak)
  (item
    (text)
    (item
      (text))
    (item
      (text)))
  (item
    (text))
  (parbreak))

====================
typst/show/show-selector-where
====================

// Inline code.
#show raw.where(block: false): box.with(
  radius: 2pt,
  outset: (y: 2.5pt),
  inset: (x: 3pt, y: 0pt),
  fill: luma(230),
)

// Code blocks.
#show raw.where(block: true): block.with(
  outset: -3pt,
  inset: 11pt,
  fill: luma(230),
  stroke: (left: 1.5pt + luma(180)),
)

#set page(margin: (top: 12pt))
#set par(justify: true)

This code tests `code`
with selectors and justification.

```rs
code!("it");
```

You can use the ```rs *const T``` pointer or
the ```rs &mut T``` reference.


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (bool))))
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (number))))))))
  (parbreak)
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (bool))))
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (number))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (add
                  (number
                    (unit))
                  (call
                    (ident)
                    (group
                      (number)))))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (raw_span
    (blob))
  (text)
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (text)
  (raw_blck
    (ident)
    (blob))
  (text)
  (text)
  (raw_blck
    (ident)
    (blob))
  (text)
  (parbreak))

====================
typst/show/show-set-where-override
====================

#show heading: set text(green)
#show heading.where(level: 1): set text(red)
#show heading.where(level: 2): set text(blue)
= Red
== Blue
=== Green


--------------------

====================
typst/show/show-selector-or-elements-with-set
====================

// Looking forward to `heading.where(level: 1 | 2)` :)
#show heading.where(level: 1).or(heading.where(level: 2)): set text(red)
= L1
== L2
=== L3
==== L4


--------------------

====================
typst/show/show-selector-element-or-label
====================

// Test element selector combined with label selector.
#show selector(strong).or(<special>): highlight
I am *strong*, I am _emphasized_, and I am #[special<special>].


--------------------

(source_file
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (parbreak)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (shorthand)
              (parbreak)
              (section
                (heading)
                (content
                  (text)))
              (section
                (heading)
                (content
                  (parbreak)
                  (comment)
                  (code
                    (show
                      (call
                        (field
                          (call
                            (field
                              (ident)
                              (ident))
                            (group
                              (tagged
                                (ident)
                                (number))))
                          (ident))
                        (group
                          (call
                            (field
                              (ident)
                              (ident))
                            (group
                              (tagged
                                (ident)
                                (number))))))
                      (set
                        (call
                          (ident)
                          (group
                            (ident))))))))))))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (section
            (heading
              (text))
            (content
              (section
                (heading
                  (text))
                (content
                  (parbreak)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (shorthand)
                  (parbreak)
                  (section
                    (heading)
                    (content
                      (text)))
                  (section
                    (heading)
                    (content
                      (parbreak)
                      (comment)
                      (code
                        (show
                          (call
                            (field
                              (call
                                (ident)
                                (group
                                  (ident)))
                              (ident))
                            (group
                              (label)))
                          (ident)))
                      (text)
                      (strong
                        (text))
                      (text)
                      (emph
                        (text))
                      (text)
                      (code
                        (content
                          (text)
                          (label)))
                      (text)
                      (parbreak))))))))))))

====================
typst/show/show-selector-element-or-text
====================

// Ensure that text selector cannot be nested in and/or. That's too complicated,
// at least for now.

// Error: 7-41 this selector cannot be used with show
#show heading.where(level: 1).or("more"): set text(red)


--------------------

(source_file
  (comment)
  (comment)
  (parbreak)
  (comment)
  (code
    (show
      (call
        (field
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (ident))
        (group
          (string)))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (parbreak))

====================
typst/show/show-delayed-error
====================

// Error: 21-34 panicked with: "hey1"
#show heading: _ => panic("hey1")

// Error: 20-33 panicked with: "hey2"
#show strong: _ => panic("hey2")

= Hello
*strong*
--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (call
          (ident)
          (group
            (string))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (strong
        (text)))))

====================
typst/show-where/show-where-optional-field-raw
====================

// Test that where selectors also trigger on set rule fields.
#show raw.where(block: false): box.with(
  fill: luma(220),
  inset: (x: 3pt, y: 0pt),
  outset: (y: 3pt),
  radius: 2pt,
)

This is #raw("fn main() {}") some text.


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (bool))))
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (call
              (ident)
              (group
                (number))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (string))))
  (text)
  (parbreak))

====================
typst/show-where/show-where-optional-field-text
====================

// Note: This show rule is horribly inefficient because it triggers for
// every individual text element. But it should still work.
#show text.where(lang: "de"): set text(red)

#set text(lang: "es")
Hola, mundo!

#set text(lang: "de")
Hallo Welt!

#set text(lang: "en")
Hello World!


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak))

====================
typst/show-where/show-where-folding-text-size
====================

// Test that folding is taken into account.
#set text(5pt)
#set text(2em)

#[
  #show text.where(size: 2em): set text(blue)
  2em not blue
]

#[
  #show text.where(size: 10pt): set text(blue)
  10pt blue
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (content
      (code
        (show
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (set
            (call
              (ident)
              (group
                (ident))))))
      (text)))
  (parbreak)
  (code
    (content
      (code
        (show
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (set
            (call
              (ident)
              (group
                (ident))))))
      (text)))
  (parbreak))

====================
typst/show-where/show-where-folding-stroke
====================

// Test again that folding is taken into account.
#set rect(width: 40pt, height: 10pt)
#set rect(stroke: blue)
#set rect(stroke: 2pt)

#{
  show rect.where(stroke: blue): "Not Triggered"
  rect()
}
#{
  show rect.where(stroke: 2pt): "Not Triggered"
  rect()
}
#{
  show rect.where(stroke: 2pt + blue): "Triggered"
  rect()
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (block
      (show
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (string))
      (call
        (ident)
        (group))))
  (code
    (block
      (show
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (string))
      (call
        (ident)
        (group))))
  (code
    (block
      (show
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (ident)))))
        (string))
      (call
        (ident)
        (group))))
  (parbreak))

====================
typst/show-where/show-where-resolving-length
====================

// Test that resolving is *not* taken into account.
#set line(start: (1em, 1em + 2pt))

#{
  show line.where(start: (1em, 1em + 2pt)): "Triggered"
  line()
}
#{
  show line.where(start: (10pt, 12pt)): "Not Triggered"
  line()
}



--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (add
                (number
                  (unit))
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (block
      (show
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (add
                  (number
                    (unit))
                  (number
                    (unit)))))))
        (string))
      (call
        (ident)
        (group))))
  (code
    (block
      (show
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (group
                (number
                  (unit))
                (number
                  (unit))))))
        (string))
      (call
        (ident)
        (group))))
  (parbreak))

====================
typst/show-where/show-where-resolving-hyphenate
====================

// Test again that resolving is *not* taken into account.
#set text(hyphenate: auto)

#[
  #show text.where(hyphenate: auto): underline
  Auto
]
#[
  #show text.where(hyphenate: true): underline
  True
]
#[
  #show text.where(hyphenate: false): underline
  False
]
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (code
    (content
      (code
        (show
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (auto))))
          (ident)))
      (text)))
  (code
    (content
      (code
        (show
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (bool))))
          (ident)))
      (text)))
  (code
    (content
      (code
        (show
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (bool))))
          (ident)))
      (text))))

====================
typst/show-set/show-set-override
====================

// Test overriding show-set rules.
#show strong: set text(red)
Hello *World*

#show strong: set text(blue)
Hello *World*


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (strong
    (text))
  (parbreak)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (text)
  (strong
    (text))
  (parbreak))

====================
typst/show-set/show-set-on-same-element
====================

// Test show-set rule on the same element.
#set figure(supplement: [Default])
#show figure.where(kind: table): set figure(supplement: [Tableau])
#figure(
  table(columns: 2)[A][B][C][D],
  caption: [Four letters],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (content
              (text)))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (content
                (text))))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number))))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/show-set/show-set-same-element-and-order
====================

// Test both things at once.
#show heading: set text(red)
= Level 1
== Level 2

#show heading.where(level: 1): set text(blue)
#show heading.where(level: 1): set text(green)
#show heading.where(level: 1): set heading(numbering: "(I)")
= Level 1
== Level 2


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (parbreak)
          (code
            (show
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (set
                (call
                  (ident)
                  (group
                    (ident))))))
          (code
            (show
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (set
                (call
                  (ident)
                  (group
                    (ident))))))
          (code
            (show
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (set
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (string)))))))))))
  (section
    (heading
      (text))
    (content
      (section
        (heading
          (text))
        (content
          (parbreak))))))

====================
typst/show-set/show-set-same-element-matched-field
====================

// Test setting the thing we just matched on.
// This is quite cursed, but it works.
#set heading(numbering: "(I)")
#show heading.where(numbering: "(I)"): set heading(numbering: "1.")
= Heading


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show-set/show-set-same-element-synthesized-matched-field
====================

// Same thing, but even more cursed, because `kind` is synthesized.
#show figure.where(kind: table): set figure(kind: raw)
#figure(table[A], caption: [Code])


--------------------

(source_file
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text)))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/show-set/show-set-same-element-matching-interaction
====================

// Test that show-set rules on the same element don't affect each other. This
// could be implemented, but isn't as of yet.
#show heading.where(level: 1): set heading(numbering: "(I)")
#show heading.where(numbering: "(I)"): set text(red)
= Heading


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string)))))))
  (code
    (show
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))
      (set
        (call
          (ident)
          (group
            (ident))))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/show-set/show-set-on-layoutable-element
====================

// Test show-set rules on layoutable element to ensure it is realized
// even though it implements `LayoutMultiple`.
#show table: set text(red)
#pad(table(columns: 4)[A][B][C][D])


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number))))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))
          (content
            (text))))))
  (parbreak))

====================
typst/show-set/show-function-order-with-set
====================

// These are both red because in the expanded form, `set text(red)` ends up
// closer to the content than `set text(blue)`.
#show strong: it => { set text(red); it }
Hello *World*

#show strong: it => { set text(blue); it }
Hello *World*


--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (ident))))
          (ident)))))
  (text)
  (strong
    (text))
  (parbreak)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (ident))))
          (ident)))))
  (text)
  (strong
    (text))
  (parbreak))

====================
typst/show-set/show-function-set-on-it
====================

// This doesn't have an effect. An element is materialized before any show
// rules run.
#show heading: it => { set heading(numbering: "(I)"); it }
= Heading
--------------------

(source_file
  (comment)
  (comment)
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (string)))))
          (ident)))))
  (section
    (heading
      (text))
    (content)))

====================
typst/length/length-fields
====================

// Test length fields.
#test((1pt).em, 0.0)
#test((1pt).abs, 1pt)
#test((3em).em, 3.0)
#test((3em).abs, 0pt)
#test((2em + 2pt).em, 2.0)
#test((2em + 2pt).abs, 2pt)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (group
            (number
              (unit)))
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (number
              (unit)))
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (number
              (unit)))
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (number
              (unit)))
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (number
                (unit))))
          (ident))
        (number))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (number
                (unit))))
          (ident))
        (number
          (unit)))))
  (parbreak))

====================
typst/length/length-to-unit
====================

// Test length unit conversions.
#let t(a, b) = assert(calc.abs(a - b) < 1e-6)

#t((500.934pt).pt(), 500.934)
#t((3.3453cm).cm(), 3.3453)
#t((4.3452mm).mm(), 4.3452)
#t((5.345in).inches(), 5.345)
#t((500.333666999pt).pt(), 500.333666999)
#t((3.523435cm).cm(), 3.523435)
#t((4.12345678mm).mm(), 4.12345678)
#t((5.333666999in).inches(), 5.333666999)
#t((4.123456789123456mm).mm(), 4.123456789123456)
#t((254cm).mm(), 2540.0)
#t((254cm).inches(), 100.0)
#t((2540mm).cm(), 254.0)
#t((2540mm).inches(), 100.0)
#t((100in).pt(), 7200.0)
#t((100in).cm(), 254.0)
#t((100in).mm(), 2540.0)
#t(5em.abs.cm(), 0.0)
#t((5em + 6in).abs.inches(), 6.0)


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (cmp
            (call
              (field
                (ident)
                (ident))
              (group
                (sub
                  (ident)
                  (ident))))
            (number))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (number
                (unit)))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (field
              (number
                (unit))
              (ident))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (field
              (group
                (add
                  (number
                    (unit))
                  (number
                    (unit))))
              (ident))
            (ident))
          (group))
        (number))))
  (parbreak))

====================
typst/length/length-to-absolute
====================

// Test length `to-absolute` method.
#set text(size: 12pt)
#context {
  test((6pt).to-absolute(), 6pt)
  test((6pt + 10em).to-absolute(), 126pt)
  test((10em).to-absolute(), 120pt)
}

#set text(size: 64pt)
#context {
  test((6pt).to-absolute(), 6pt)
  test((6pt + 10em).to-absolute(), 646pt)
  test((10em).to-absolute(), 640pt)
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (block
        (call
          (ident)
          (group
            (call
              (field
                (group
                  (number
                    (unit)))
                (ident))
              (group))
            (number
              (unit))))
        (call
          (ident)
          (group
            (call
              (field
                (group
                  (add
                    (number
                      (unit))
                    (number
                      (unit))))
                (ident))
              (group))
            (number
              (unit))))
        (call
          (ident)
          (group
            (call
              (field
                (group
                  (number
                    (unit)))
                (ident))
              (group))
            (number
              (unit)))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (block
        (call
          (ident)
          (group
            (call
              (field
                (group
                  (number
                    (unit)))
                (ident))
              (group))
            (number
              (unit))))
        (call
          (ident)
          (group
            (call
              (field
                (group
                  (add
                    (number
                      (unit))
                    (number
                      (unit))))
                (ident))
              (group))
            (number
              (unit))))
        (call
          (ident)
          (group
            (call
              (field
                (group
                  (number
                    (unit)))
                (ident))
              (group))
            (number
              (unit)))))))
  (parbreak))

====================
typst/length/length-unit-hint
====================

// Error: 17-19 expected length, found integer
// Hint: 17-19 a length needs a unit - did you mean 12pt?
#set text(size: 12)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/length/length-ignore-em-pt-hint
====================

// Error: 2-21 cannot convert a length with non-zero em units (`-6pt + 10.5em`) to pt
// Hint: 2-21 use `length.to-absolute()` to resolve its em component (requires context)
// Hint: 2-21 or use `length.abs.pt()` instead to ignore its em component
#(10.5em - 6pt).pt()


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (group
          (sub
            (number
              (unit))
            (number
              (unit))))
        (ident))
      (group)))
  (parbreak))

====================
typst/length/length-ignore-em-cm-hint
====================

// Error: 2-12 cannot convert a length with non-zero em units (`3em`) to cm
// Hint: 2-12 use `length.to-absolute()` to resolve its em component (requires context)
// Hint: 2-12 or use `length.abs.cm()` instead to ignore its em component
#(3em).cm()


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (group
          (number
            (unit)))
        (ident))
      (group)))
  (parbreak))

====================
typst/length/length-ignore-em-mm-hint
====================

// Error: 2-20 cannot convert a length with non-zero em units (`-226.77pt + 93em`) to mm
// Hint: 2-20 use `length.to-absolute()` to resolve its em component (requires context)
// Hint: 2-20 or use `length.abs.mm()` instead to ignore its em component
#(93em - 80mm).mm()


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (group
          (sub
            (number
              (unit))
            (number
              (unit))))
        (ident))
      (group)))
  (parbreak))

====================
typst/length/length-ignore-em-inches-hint
====================

// Error: 2-24 cannot convert a length with non-zero em units (`432pt + 4.5em`) to inches
// Hint: 2-24 use `length.to-absolute()` to resolve its em component (requires context)
// Hint: 2-24 or use `length.abs.inches()` instead to ignore its em component
#(4.5em + 6in).inches()


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (field
        (group
          (add
            (number
              (unit))
            (number
              (unit))))
        (ident))
      (group)))
  (parbreak))

====================
typst/length/issue-5519-length-base
====================

// Error: 2-9 invalid base-2 prefix
// Hint: 2-9 numbers with a unit cannot have a base prefix
#0b100pt


--------------------

(source_file
  (comment)
  (comment)
  (code
    (number
      (unit)))
  (parbreak))

====================
typst/length/number-syntax-edge-cases
====================

// Test numeric syntax edge cases with suffixes and which spans of text are
// highlighted. Valid items are those not annotated with an error comment since
// syntax is handled at parse time.

// All fine
#2em
#6.3e5em
#.5pt
#1.2E+0%
#1.2e-0%
#0.0e0deg
#5in%
#0.%
// Error: 2-8 invalid number suffix: hello
#1hello
// Error: 2-7 invalid number suffix: infr
#1infr
// Error: 2-5 invalid number: 2E
#2EM
// Error: 2-8 invalid number: .1E-
#.1E-fr
// Error: 2-16 invalid number: 0.1E+
#0.1E+fr123e456
// Error: 2-11 invalid number: .1e-
#.1e-fr123.456
--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (parbreak)
  (comment)
  (code
    (number
      (unit)))
  (code
    (number
      (unit)))
  (code
    (number
      (unit)))
  (code
    (number))
  (text)
  (code
    (number
      (unit)))
  (code
    (number
      (unit)))
  (code
    (number
      (unit)))
  (text)
  (code
    (number
      (unit)))
  (comment)
  (code
    (number
      (unit)))
  (comment)
  (code
    (number
      (unit)))
  (comment)
  (code
    (number))
  (text)
  (comment)
  (code
    (number))
  (text)
  (comment)
  (code
    (number))
  (text)
  (comment)
  (code
    (number
      (unit)))
  (text))

====================
typst/spacing/spacing-h-and-v
====================

// Linebreak and leading-sized weak spacing are equivalent.
#box[A \ B] #box[A #v(0.65em, weak: true) B]

// Eating up soft spacing.
Inv#h(0pt)isible

// Multiple spacings in a row.
Add #h(10pt) #h(10pt) up

// Relative to area.
#let x = 25% - 4pt
|#h(x)|#h(x)|#h(x)|#h(x)|

// Fractional.
| #h(1fr) | #h(2fr) | #h(1fr) |


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content
        (text)
        (linebreak)
        (text))))
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (group
              (number
                (unit))
              (tagged
                (ident)
                (bool)))))
        (text))))
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak)
  (comment)
  (code
    (let
      (ident)
      (sub
        (number
          (unit))
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (ident))))
  (text)
  (code
    (call
      (ident)
      (group
        (ident))))
  (text)
  (code
    (call
      (ident)
      (group
        (ident))))
  (text)
  (code
    (call
      (ident)
      (group
        (ident))))
  (text)
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak))

====================
typst/spacing/spacing-rtl
====================

// Test RTL spacing.
#set text(dir: rtl)
A #h(10pt) B \
A #h(1fr) B


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak))

====================
typst/spacing/spacing-missing-amount
====================

// Missing spacing.
// Error: 10-13 missing argument: amount
Totally #h() ignored


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/spacing/issue-3624-spacing-behaviour
====================

// Test that metadata after spacing does not force a new paragraph.
#{
  h(1em)
  counter(heading).update(4)
  [Hello ]
  context counter(heading).display()
}


--------------------

(source_file
  (comment)
  (code
    (block
      (call
        (ident)
        (group
          (number
            (unit))))
      (call
        (field
          (call
            (ident)
            (group
              (ident)))
          (ident))
        (group
          (number)))
      (content
        (text))
      (context
        (call
          (field
            (call
              (ident)
              (group
                (ident)))
            (ident))
          (group)))))
  (parbreak))

====================
typst/spacing/trim-weak-space-line-beginning
====================

// Weak space at the beginning should be removed.
#h(2cm, weak: true) Hello


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak))

====================
typst/spacing/trim-weak-space-line-end
====================

// Weak space at the end of the line should be removed.
#set align(right)
Hello #h(2cm, weak: true)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/spacing/issue-4087
====================

// Weak space at the end of the line is removed.
This is the first line #h(2cm, weak: true) A new line

// Non-weak space consumes a specified width and pushes to next line.
This is the first line #h(2cm, weak: false) A new line

// Similarly, weak space at the beginning of the line is removed.
This is the first line \ #h(2cm, weak: true) A new line

// Non-weak-spacing, on the other hand, is not removed.
This is the first line \ #h(2cm, weak: false) A new line


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak)
  (comment)
  (text)
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak)
  (comment)
  (text)
  (linebreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak))

====================
typst/spacing/issue-5244-consecutive-weak-space
====================

#set par(linebreaks: "optimized")
#{
  [A]
  h(0.3em, weak: true)
  h(0.3em, weak: true)
  [B]
}


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (block
      (content
        (text))
      (call
        (ident)
        (group
          (number
            (unit))
          (tagged
            (ident)
            (bool))))
      (call
        (ident)
        (group
          (number
            (unit))
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/spacing/issue-5244-consecutive-weak-space-heading
====================

#set par(justify: true)
#set heading(numbering: "I.")

= #h(0.3em, weak: true) test


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (section
    (heading
      (code
        (call
          (ident)
          (group
            (number
              (unit))
            (tagged
              (ident)
              (bool)))))
      (text))
    (content
      (parbreak))))

====================
typst/spacing/issue-5253-consecutive-weak-space-math
====================

$= thin thin$ a
--------------------

(source_file
  (math
    (formula
      (symbol)
      (ident)
      (ident)))
  (text))

====================
typst/align/align-right
====================

// Test ragged-left.
#set align(right)
To the right! Where the sunlight peeks behind the mountain.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (text)
  (parbreak))

====================
typst/align/align-in-stack
====================

#set page(height: 100pt)
#stack(dir: ltr,
  align(left, square(size: 15pt, fill: eastern)),
  align(center, square(size: 20pt, fill: eastern)),
  align(right, square(size: 15pt, fill: eastern)),
)
#align(center + horizon, rect(fill: eastern, height: 10pt))
#align(bottom, stack(
  align(center, rect(fill: conifer, height: 10pt)),
  rect(fill: forest, height: 10pt, width: 100%),
))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (ident)
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (ident))
                    (tagged
                      (ident)
                      (number
                        (unit)))))))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (parbreak))

====================
typst/align/align-center-in-flow
====================

// Test that multiple paragraphs in subflow also respect alignment.
#align(center)[
  Lorem Ipsum

  Dolor
]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text)
        (parbreak)
        (text))))
  (parbreak))

====================
typst/align/align-start-and-end
====================

// Test start and end alignment.
#rotate(-30deg, origin: end + horizon)[Hello]

#set text(lang: "de")
#align(start)[Start]
#align(end)[Ende]

#set text(lang: "ar")
#align(start)[يبدأ]
#align(end)[نهاية]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (sign
            (number
              (unit)))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))
      (content
        (text))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak))

====================
typst/align/alignment-fields-x
====================

// Test 2d alignment 'horizontal' field.
#test((start + top).x, start)
#test((end + top).x, end)
#test((left + top).x, left)
#test((right + top).x, right)
#test((center + top).x, center)
#test((start + bottom).x, start)
#test((end + bottom).x, end)
#test((left + bottom).x, left)
#test((right + bottom).x, right)
#test((center + bottom).x, center)
#test((start + horizon).x, start)
#test((end + horizon).x, end)
#test((left + horizon).x, left)
#test((right + horizon).x, right)
#test((center + horizon).x, center)
#test((top + start).x, start)
#test((bottom + end).x, end)
#test((horizon + center).x, center)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (parbreak))

====================
typst/align/alignment-fields-y
====================

// Test 2d alignment 'vertical' field.
#test((start + top).y, top)
#test((end + top).y, top)
#test((left + top).y, top)
#test((right + top).y, top)
#test((center + top).y, top)
#test((start + bottom).y, bottom)
#test((end + bottom).y, bottom)
#test((left + bottom).y, bottom)
#test((right + bottom).y, bottom)
#test((center + bottom).y, bottom)
#test((start + horizon).y, horizon)
#test((end + horizon).y, horizon)
#test((left + horizon).y, horizon)
#test((right + horizon).y, horizon)
#test((center + horizon).y, horizon)
#test((top + start).y, top)
#test((bottom + end).y, bottom)
#test((horizon + center).y, horizon)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (ident)
              (ident)))
          (ident))
        (ident))))
  (parbreak))

====================
typst/align/alignment-type
====================

#test(type(center), alignment)
#test(type(horizon), alignment)
#test(type(center + horizon), alignment)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (add
              (ident)
              (ident))))
        (ident))))
  (parbreak))

====================
typst/align/alignment-axis
====================

// Test alignment methods.
#test(start.axis(), "horizontal")
#test(end.axis(), "horizontal")
#test(left.axis(), "horizontal")
#test(right.axis(), "horizontal")
#test(center.axis(), "horizontal")
#test(top.axis(), "vertical")
#test(bottom.axis(), "vertical")
#test(horizon.axis(), "vertical")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (parbreak))

====================
typst/align/alignment-inv
====================

#test(start.inv(), end)
#test(end.inv(), start)
#test(left.inv(), right)
#test(right.inv(), left)
#test(center.inv(), center)
#test(top.inv(), bottom)
#test(bottom.inv(), top)
#test(horizon.inv(), horizon)
#test((start + top).inv(), (end + bottom))
#test((end + top).inv(), (start + bottom))
#test((left + top).inv(), (right + bottom))
#test((right + top).inv(), (left + bottom))
#test((center + top).inv(), (center + bottom))
#test((start + bottom).inv(), (end + top))
#test((end + bottom).inv(), (start + top))
#test((left + bottom).inv(), (right + top))
#test((right + bottom).inv(), (left + top))
#test((center + bottom).inv(), (center + top))
#test((start + horizon).inv(), (end + horizon))
#test((end + horizon).inv(), (start + horizon))
#test((left + horizon).inv(), (right + horizon))
#test((right + horizon).inv(), (left + horizon))
#test((center + horizon).inv(), (center + horizon))
#test((top + start).inv(), (end + bottom))
#test((bottom + end).inv(), (start + top))
#test((horizon + center).inv(), (center + horizon))


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (group
              (add
                (ident)
                (ident)))
            (ident))
          (group))
        (group
          (add
            (ident)
            (ident))))))
  (parbreak))

====================
typst/align/alignment-add-two-horizontal
====================

// Error: 8-22 cannot add two horizontal alignments
#align(center + right, [A])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (content
          (text)))))
  (parbreak))

====================
typst/align/alignment-add-two-vertical
====================

// Error: 8-20 cannot add two vertical alignments
#align(top + bottom, [A])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (content
          (text)))))
  (parbreak))

====================
typst/align/alignment-add-vertical-and-2d
====================

// Error: 8-30 cannot add a vertical and a 2D alignment
#align(top + (bottom + right), [A])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (group
            (add
              (ident)
              (ident))))
        (content
          (text)))))
  (parbreak))

====================
typst/align/issue-1398-line-align
====================

// Test right-aligning a line and a rectangle.
#align(right, line(length: 30%))
#align(right, rect())


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group)))))
  (parbreak))

====================
typst/align/issue-2213-align-fr
====================

// Test a mix of alignment and fr units (fr wins).
#set page(height: 80pt)
A
#v(1fr)
B
#align(bottom + right)[C]
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))
      (content
        (text)))))

====================
typst/dir/dir-axis
====================

// Test direction methods.
#test(ltr.axis(), "horizontal")
#test(rtl.axis(), "horizontal")
#test(ttb.axis(), "vertical")
#test(btt.axis(), "vertical")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (string))))
  (parbreak))

====================
typst/dir/dir-start
====================

#test(ltr.start(), left)
#test(rtl.start(), right)
#test(ttb.start(), top)
#test(btt.start(), bottom)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (parbreak))

====================
typst/dir/dir-end
====================

#test(ltr.end(), right)
#test(rtl.end(), left)
#test(ttb.end(), bottom)
#test(btt.end(), top)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (parbreak))

====================
typst/dir/dir-inv
====================

#test(ltr.inv(), rtl)
#test(rtl.inv(), ltr)
#test(ttb.inv(), btt)
#test(btt.inv(), ttb)
--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group))
        (ident)))))

====================
typst/limits/issue-1216-clamp-panic
====================

#set page(height: 20pt, margin: 0pt)
#v(22pt)
#block(fill: red, width: 100%, height: 10pt, radius: 4pt)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/limits/issue-1918-layout-infinite-length-grid-columns
====================

// Test that passing infinite lengths to drawing primitives does not crash Typst.
#set page(width: auto, height: auto)

// Error: 58-59 cannot expand into infinite width
#layout(size => grid(columns: (size.width, size.height))[a][b][c][d])


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (lambda
          (ident)
          (call
            (call
              (call
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (group
                          (field
                            (ident)
                            (ident))
                          (field
                            (ident)
                            (ident))))))
                  (content
                    (text)))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))))))
  (parbreak))

====================
typst/limits/issue-1918-layout-infinite-length-grid-rows
====================

#set page(width: auto, height: auto)

// Error: 17-66 cannot create grid with infinite height
#layout(size => grid(rows: (size.width, size.height))[a][b][c][d])


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (lambda
          (ident)
          (call
            (call
              (call
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (group
                          (field
                            (ident)
                            (ident))
                          (field
                            (ident)
                            (ident))))))
                  (content
                    (text)))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))))))
  (parbreak))

====================
typst/limits/issue-1918-layout-infinite-length-line
====================

#set page(width: auto, height: auto)

// Error: 17-41 cannot create line with infinite length
#layout(size => line(length: size.width))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (lambda
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (field
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/limits/issue-1918-layout-infinite-length-polygon
====================

#set page(width: auto, height: auto)

// Error: 17-54 cannot create polygon with infinite size
#layout(size => polygon((0pt,0pt), (0pt, size.width)))
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (lambda
          (ident)
          (call
            (ident)
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (field
                  (ident)
                  (ident))))))))))

====================
typst/angle/angle-to-unit
====================

// Test angle methods.
#test(1rad.rad(), 1.0)
#test(1.23rad.rad(), 1.23)
#test(0deg.rad(), 0.0)
#test(2deg.deg(), 2.0)
#test(2.94deg.deg(), 2.94)
#test(0rad.deg(), 0.0)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number
              (unit))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number
              (unit))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number
              (unit))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number
              (unit))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number
              (unit))
            (ident))
          (group))
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (number
              (unit))
            (ident))
          (group))
        (number)))))

====================
typst/container/box
====================

// Test box in paragraph.
A #box[B \ C] D.

// Test box with height.
Spaced \
#box(height: 0.5cm) \
Apart


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (linebreak)
        (text))))
  (text)
  (parbreak)
  (comment)
  (text)
  (linebreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (linebreak)
  (text)
  (parbreak))

====================
typst/container/block-sizing
====================

// Test block sizing.
#set page(height: 120pt)
#set block(spacing: 0pt)
#block(width: 90pt, height: 80pt, fill: red)[
  #block(width: 60%, height: 60%, fill: green)
  #block(width: 50%, height: 60%, fill: blue)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident)))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/container/box-fr-width
====================

// Test fr box.
Hello #box(width: 1fr, rect(height: 0.7em, width: 100%)) World


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/container/block-fr-height
====================

#set page(height: 100pt)
#rect(height: 10pt, width: 100%)
#align(center, block(height: 1fr, width: 20pt, stroke: 1pt))
#rect(height: 10pt, width: 100%)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/container/block-fr-height-auto-width
====================

// Test that the fr block can also expand its parent.
#set page(height: 100pt)
#set align(center)
#block(inset: 5pt, stroke: green)[
  #rect(height: 10pt)
  #block(height: 1fr, stroke: 1pt, inset: 5pt)[
    #set align(center + horizon)
    I am the widest
  ]
  #rect(height: 10pt)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit))))))
        (code
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (code
                (set
                  (call
                    (ident)
                    (group
                      (add
                        (ident)
                        (ident))))))
              (text))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/container/block-fr-height-first-child
====================

// Test that block spacing is not trimmed if only an fr block precedes it.
#set page(height: 100pt)
#rect(height: 1fr)
#rect()


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/container/block-fr-height-multiple
====================

#set page(height: 100pt)
#rect(height: 1fr)
#rect()
#block(height: 1fr, line(length: 100%, angle: 90deg))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/container/block-multiple-pages
====================

// Test block over multiple pages.
#set page(height: 60pt)

First!

#block[
  But, soft! what light through yonder window breaks? It is the east, and Juliet
  is the sun.
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text)
        (text))))
  (parbreak))

====================
typst/container/block-box-fill
====================

#set page(height: 100pt)
#let words = lorem(18).split()
#block(inset: 8pt, width: 100%, fill: aqua, stroke: aqua.darken(30%))[
  #words.slice(0, 13).join(" ")
  #box(fill: teal, outset: 2pt)[tempor]
  #words.slice(13).join(" ")
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (field
          (call
            (ident)
            (group
              (number)))
          (ident))
        (group))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (number
                  (unit)))))))
      (content
        (code
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (number)
                  (number)))
              (ident))
            (group
              (string))))
        (code
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text))))
        (code
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (number)))
              (ident))
            (group
              (string)))))))
  (parbreak))

====================
typst/container/block-spacing-basic
====================

#set par(spacing: 10pt)
Hello

There

#block(spacing: 20pt)[Further down]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/container/block-above-below-context
====================

#context test(block.above, auto)
#set block(spacing: 20pt)
#context test(block.above, 20pt)
#context test(block.below, 20pt)


--------------------

(source_file
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (auto)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (number
            (unit))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (number
            (unit))))))
  (parbreak))

====================
typst/container/block-spacing-context
====================

// The values for `above` and `below` might be different, so we cannot retrieve
// `spacing` directly
//
// Error: 16-23 function `block` does not contain field `spacing`
#context block.spacing


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (context
      (field
        (ident)
        (ident))))
  (parbreak))

====================
typst/container/block-spacing-table
====================

// Test that paragraph spacing loses against block spacing.
#set block(spacing: 100pt)
#show table: set block(above: 5pt, below: 5pt)
Hello
#table(columns: 4, fill: (x, y) => if calc.odd(x + y) { silver })[A][B][C][D]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (code
    (call
      (call
        (call
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (lambda
                    (group
                      (ident)
                      (ident))
                    (branch
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (add
                            (ident)
                            (ident))))
                      (block
                        (ident)))))))
            (content
              (text)))
          (content
            (text)))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/container/block-spacing-maximum
====================

// While we're at it, test the larger block spacing wins.
#set block(spacing: 0pt)
#show raw: set block(spacing: 15pt)
#show list: set block(spacing: 2.5pt)

```rust
fn main() {}
```

- List

Paragraph


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak)
  (item
    (text))
  (parbreak)
  (text)
  (parbreak))

====================
typst/container/block-spacing-collapse-text-style
====================

// Test spacing collapsing with different font sizes.
#grid(columns: 2)[
  #text(size: 12pt, block(below: 1em)[A])
  #text(size: 8pt, block(above: 1em)[B])
][
  #text(size: 12pt, block(below: 1em)[A])
  #text(size: 8pt, block(above: 1.25em)[B])
]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))))
        (content
          (code
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (number
                          (unit)))))
                  (content
                    (text))))))
          (code
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (number
                          (unit)))))
                  (content
                    (text))))))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text))))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text)))))))))
  (parbreak))

====================
typst/container/block-fixed-height
====================

#set page(height: 100pt)
#set align(center)

#lines(3)
#block(width: 80%, height: 60pt, fill: aqua)
#lines(2)
#block(
  breakable: false,
  width: 100%,
  inset: 4pt,
  fill: aqua,
  lines(3) + colbreak(),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (add
          (call
            (ident)
            (group
              (number)))
          (call
            (ident)
            (group))))))
  (parbreak))

====================
typst/container/block-consistent-width
====================

// Test that block enforces consistent width across regions. Also use some
// introspection to check that measurement is working correctly.
#block(stroke: 1pt, inset: 5pt)[
  #align(right)[Hi]
  #colbreak()
  Hello @netwok
]

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (call
              (ident)
              (group
                (ident)))
            (content
              (text))))
        (code
          (call
            (ident)
            (group)))
        (text)
        (ref))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/container/block-sticky
====================

#set page(height: 100pt)
#lines(3)
#block(sticky: true)[D]
#block(sticky: true)[E]
F


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/container/block-sticky-alone
====================

#set page(height: 50pt)
#block(sticky: true)[A]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/container/block-sticky-many
====================

#set page(height: 80pt)
#set block(sticky: true)
#block[A]
#block[B]
#block[C]
#block[D]
E
#block[F]
#block[G]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/container/block-sticky-colbreak
====================

A
#block(sticky: true)[B]
#colbreak()
C


--------------------

(source_file
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/container/block-sticky-breakable
====================

// Ensure that sticky blocks are still breakable.
#set page(height: 60pt)
#block(sticky: true, lines(4))
E


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (number))))))
  (text)
  (parbreak))

====================
typst/container/box-clip-rect
====================

// Test box clipping with a rectangle
Hello #box(width: 1em, height: 1em, clip: false)[#rect(width: 3em, height: 3em, fill: red)]
world 1

Space

Hello #box(width: 1em, height: 1em, clip: true)[#rect(width: 3em, height: 3em, fill: red)]
world 2


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (text)
  (parbreak)
  (text)
  (parbreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (text)
  (parbreak))

====================
typst/container/block-clip-text
====================

// Test clipping text
#block(width: 5em, height: 2em, clip: false, stroke: 1pt + black)[
  But, soft! what light through
]

#v(2em)

#block(width: 5em, height: 2em, clip: true, stroke: 1pt + black)[
  But, soft! what light through yonder window breaks? It is the east, and Juliet
  is the sun.
]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))
      (content
        (text))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))
      (content
        (text)
        (text))))
  (parbreak))

====================
typst/container/block-clip-svg-glyphs
====================

// Test clipping svg glyphs
Emoji: #box(height: 0.5em, stroke: 1pt + black)[🐪, 🌋, 🏞]

Emoji: #box(height: 0.5em, clip: true, stroke: 1pt + black)[🐪, 🌋, 🏞]


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))
      (content
        (text))))
  (parbreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))
      (content
        (text))))
  (parbreak))

====================
typst/container/block-clipping-multiple-pages
====================

// Test block clipping over multiple pages.
#set page(height: 60pt)

First!

#block(height: 4em, clip: true, stroke: 1pt + black)[
  But, soft! what light through yonder window breaks? It is the east, and Juliet
  is the sun.
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (add
              (number
                (unit))
              (ident)))))
      (content
        (text)
        (text))))
  (parbreak))

====================
typst/container/box-clip-radius
====================

// Test clipping with `radius`.
#set page(height: 60pt)

#box(
  radius: 5pt,
  stroke: 2pt + black,
  width: 20pt,
  height: 20pt,
  clip: true,
  image("/assets/images/rhino.png", width: 30pt)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/container/box-clip-radius-without-stroke
====================

// Test clipping with `radius`, but without `stroke`.
#set page(height: 60pt)

#box(
  radius: 5pt,
  width: 20pt,
  height: 20pt,
  clip: true,
  image("/assets/images/rhino.png", width: 30pt)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/container/box-clip-outset
====================

// Test clipping with `outset`.
#set page(height: 60pt)

#box(
  outset: 5pt,
  stroke: 2pt + black,
  width: 20pt,
  height: 20pt,
  clip: true,
  image("/assets/images/rhino.png", width: 30pt)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/container/container-layoutable-child
====================

// Test box/block sizing with directly layoutable child.
//
// Ensure that the output respects the box size.
#let check(f) = f(
  width: 40pt, height: 25pt, fill: aqua,
  grid(rect(width: 5pt, height: 5pt, fill: blue)),
)

#stack(dir: ltr, spacing: 1fr, check(box), check(block))


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (ident)))
        (call
          (ident)
          (group
            (ident))))))
  (parbreak))

====================
typst/container/issue-2128-block-width-box
====================

// Test box in 100% width block.
#block(width: 100%, fill: red, box("a box"))
#block(width: 100%, fill: red, [#box("a box") #box()])


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (code
            (call
              (ident)
              (group
                (string))))
          (code
            (call
              (ident)
              (group)))))))
  (parbreak))

====================
typst/container/issue-5296-block-sticky-in-block-at-top
====================

#set page(height: 3cm)
#v(1.6cm)
#block(height: 2cm, breakable: true)[
  #block(sticky: true)[*A*]

  b
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))
      (content
        (code
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (bool))))
            (content
              (strong
                (text)))))
        (parbreak)
        (text))))
  (parbreak))

====================
typst/container/issue-5296-block-sticky-spaced-from-top-of-page
====================

#set page(height: 3cm)
#v(2cm)

#block(sticky: true)[*A*]

b


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (strong
          (text)))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/container/issue-5296-block-sticky-weakly-spaced-from-top-of-page
====================

#set page(height: 3cm)
#v(2cm, weak: true)

#block(sticky: true)[*A*]

b


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (strong
          (text)))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/container/issue-5262-block-negative-height
====================

#block(height: -1pt)[]


--------------------

(source_file
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))))
      (content)))
  (parbreak))

====================
typst/container/issue-5262-block-negative-height-implicit
====================

#set page(height: 10pt, margin: (top: 9pt))
#block(height: 100%)[]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content)))
  (parbreak))

====================
typst/container/issue-5262-block-negative-height-in-flow
====================

// The contents after the block should be pushed upwards.
#set page(height: 60pt)
a
#block(height: -25pt)[b]
c
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))))
      (content
        (text))))
  (text))

====================
typst/pagebreak/pagebreak
====================

// Just a pagebreak.
// Should result in two pages.
#pagebreak()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/pagebreak/pagebreak-around-set-page
====================

// Pagebreak, empty with styles and then pagebreak
// Should result in one auto-sized page and two conifer-colored 2cm wide pages.
#pagebreak()
#set page(width: 2cm, fill: conifer)
#pagebreak()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/pagebreak/pagebreak-weak-after-set-page
====================

// Two text bodies separated with and surrounded by weak pagebreaks.
// Should result in two aqua-colored pages.
#set page(fill: aqua)
#pagebreak(weak: true)
First
#pagebreak(weak: true)
Second
#pagebreak(weak: true)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/pagebreak/pagebreak-set-page-mixed
====================

// Test a combination of pagebreaks, styled pages and pages with bodies.
// Should result in three five pages, with the fourth one being forest-colored.
#set page(width: 80pt, height: 30pt)
#[#set page(width: 60pt); First]
#pagebreak()
#pagebreak()
Third
#page(height: 20pt, fill: forest)[]
Fif#[#set page();th]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (text)))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))
      (content)))
  (text)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group))))
      (text)))
  (parbreak))

====================
typst/pagebreak/pagebreak-followed-by-page-call
====================

// Test hard and weak pagebreak followed by page with body.
// Should result in three navy-colored pages.
#set page(fill: navy)
#set text(fill: white)
First
#pagebreak()
#page[Second]
#pagebreak(weak: true)
#page[Third]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/pagebreak/pagebreak-in-container
====================

#box[
  // Error: 4-15 pagebreaks are not allowed inside of containers
  // Hint: 4-15 try using a `#colbreak()` instead
  #pagebreak()
]


--------------------

(source_file
  (code
    (call
      (ident)
      (content
        (comment)
        (comment)
        (code
          (call
            (ident)
            (group))))))
  (parbreak))

====================
typst/pagebreak/pagebreak-weak-place
====================

// After place
// Should result in three pages.
First
#pagebreak(weak: true)
#place(right)[placed A]
#pagebreak(weak: true)
Third


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak))

====================
typst/pagebreak/pagebreak-weak-meta
====================

// After only ignorables & invisibles
// Should result in two pages.
First
#pagebreak(weak: true)
#counter(page).update(1)
#metadata("Some")
#pagebreak(weak: true)
Second


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak))

====================
typst/pagebreak/pagebreak-meta
====================

// After only ignorables, but regular break
// Should result in three pages.
First
#pagebreak()
#counter(page).update(1)
#metadata("Some")
#pagebreak()
Third


--------------------

(source_file
  (comment)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (string))))
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/pagebreak/pagebreak-to
====================

#set page(width: 80pt, height: 30pt)
First
#pagebreak(to: "odd")
Third
#pagebreak(to: "even")
Fourth
#pagebreak(to: "even")
Sixth
#pagebreak()
Seventh
#pagebreak(to: "odd")
#page[Ninth]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/pagebreak/pagebreak-to-auto-sized
====================

#set page(width: auto, height: auto)

// Test with auto-sized page.
First
#pagebreak(to: "odd")
Third


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (text)
  (parbreak))

====================
typst/pagebreak/pagebreak-to-multiple-pages
====================

#set page(height: 30pt, width: 80pt)

// Test when content extends to more than one page
First

Second

#pagebreak(to: "odd")

Third


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/pagebreak/issue-2134-pagebreak-bibliography
====================

// Test weak pagebreak before bibliography.
#pagebreak(weak: true)
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/pagebreak/issue-2095-pagebreak-numbering
====================

// The empty page 2 should not have a page number
#set page(numbering: none)
This and next page should not be numbered

#pagebreak(weak: true, to: "odd")

#set page(numbering: "1")
#counter(page).update(1)

This page should


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (string)))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/pagebreak/issue-2162-pagebreak-set-style
====================

// The styles should not be applied to the pagebreak empty page,
// it should only be applied after that.
#pagebreak(to: "even") // We should now skip to page 2

Some text on page 2

#pagebreak(to: "even") // We should now skip to page 4

#set page(fill: orange) // This sets the color of the page starting from page 4
Some text on page 4


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (comment)
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (comment)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident)))))
    (comment))
  (text)
  (parbreak))

====================
typst/pagebreak/issue-2591-single-weak-pagebreak
====================

#pagebreak(weak: true)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/pagebreak/issue-2841-pagebreak-to-weak
====================

First
#pagebreak(to: "odd")
#pagebreak(weak: true)
Odd
--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text))

====================
typst/page/page-call-empty
====================

// Just empty page.
// Should result in auto-sized page, just like nothing.
#page[]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (content)))
  (parbreak))

====================
typst/page/page-call-styled-empty
====================

// Just empty page with styles.
// Should result in one conifer-colored A11 page.
#page("a11", flipped: true, fill: conifer)[]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (ident))))
      (content)))
  (parbreak))

====================
typst/page/page-call-followed-by-pagebreak
====================

// Just page followed by pagebreak.
// Should result in one forest-colored A11 page and one auto-sized page.
#page("a11", flipped: true, fill: forest)[]
#pagebreak()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (ident))))
      (content)))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/page/page-set-forces-break
====================

// Set width and height.
// Should result in one high and one wide page.
#set page(width: 80pt, height: 80pt)
#[#set page(width: 40pt);High]
#[#set page(height: 40pt);Wide]

// Flipped predefined paper.
#[#set page(paper: "a11", flipped: true);Flipped A11]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (text)))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (text)))
  (parbreak)
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (bool))))))
      (text)))
  (parbreak))

====================
typst/page/page-set-in-container
====================

#box[
  // Error: 4-18 page configuration is not allowed inside of containers
  #set page("a4")
]


--------------------

(source_file
  (code
    (call
      (ident)
      (content
        (comment)
        (code
          (set
            (call
              (ident)
              (group
                (string))))))))
  (parbreak))

====================
typst/page/page-set-empty
====================

// Empty with styles
// Should result in one conifer-colored A11 page.
#set page("a11", flipped: true, fill: conifer)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/page/page-set-only-pagebreak
====================

// Empty with styles and then pagebreak
// Should result in two forest-colored pages.
#set page(fill: forest)
#pagebreak()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/page/page-set-override-thrice
====================

// Empty with multiple page styles.
// Should result in a small white page.
#set page("a4")
#set page("a5")
#set page(width: 1cm, height: 1cm)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (string)))))
  (code
    (set
      (call
        (ident)
        (group
          (string)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak))

====================
typst/page/page-set-override-and-mix
====================

// Empty with multiple page styles.
// Should result in one eastern-colored A11 page.
#set page("a4")
#set page("a5")
#set page("a11", flipped: true, fill: eastern)
#set text(font: "Roboto", white)
#smallcaps[Typst]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (string)))))
  (code
    (set
      (call
        (ident)
        (group
          (string)))))
  (code
    (set
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (ident)))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/page/page-large
====================

#set page("a4")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (string)))))
  (parbreak))

====================
typst/page/page-fill
====================

// Test page fill.
#set page(width: 80pt, height: 40pt, fill: eastern)
#text(15pt, font: "Roboto", fill: white, smallcaps[Typst])
#page(width: 40pt, fill: auto, margin: (top: 10pt, rest: auto))[Hi]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (auto))))))
      (content
        (text))))
  (parbreak))

====================
typst/page/page-fill-none
====================

// Test disabling page fill.
// The PNG is filled with black anyway due to the test runner.
#set page(fill: none)
#rect(fill: green)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/page/page-margin-uniform
====================

// Set all margins at once.
#[
  #set page(height: 20pt, margin: 5pt)
  #place(top + left)[TL]
  #place(bottom + right)[BR]
]


--------------------

(source_file
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))
      (code
        (call
          (call
            (ident)
            (group
              (add
                (ident)
                (ident))))
          (content
            (text))))
      (code
        (call
          (call
            (ident)
            (group
              (add
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/page/page-margin-individual
====================

// Set individual margins.
#set page(height: 40pt)
#[#set page(margin: (left: 0pt)); #align(left)[Left]]
#[#set page(margin: (right: 0pt)); #align(right)[Right]]
#[#set page(margin: (top: 0pt)); #align(top)[Top]]
#[#set page(margin: (bottom: 0pt)); #align(bottom)[Bottom]]

// Ensure that specific margins override general margins.
#[#set page(margin: (rest: 0pt, left: 20pt)); Overridden]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))
      (code
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))
      (code
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))
      (code
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text))))))
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))
      (code
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text))))))
  (parbreak)
  (comment)
  (code
    (content
      (code
        (set
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))
      (text)))
  (parbreak))

====================
typst/page/page-margin-inside-outside-override
====================

#set page(height: 100pt, margin: (inside: 30pt, outside: 20pt))
#set par(justify: true)
#set text(size: 8pt)

#page(margin: (x: 20pt), {
  set align(center + horizon)
  text(20pt, strong[Title])
  v(2em, weak: true)
  text(15pt)[Author]
})

= Introduction
#lorem(35)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (block
          (set
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident)))))
          (call
            (ident)
            (group
              (number
                (unit))
              (call
                (ident)
                (content
                  (text)))))
          (call
            (ident)
            (group
              (number
                (unit))
              (tagged
                (ident)
                (bool))))
          (call
            (call
              (ident)
              (group
                (number
                  (unit))))
            (content
              (text)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (number))))
      (parbreak))))

====================
typst/page/page-margin-inside
====================

#set page(margin: (inside: 30pt))
#rect(width: 100%)[Bound]
#pagebreak()
#rect(width: 100%)[Left]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/page/page-margin-inside-with-binding
====================

// Test setting the binding explicitly.
#set page(binding: right, margin: (inside: 30pt))
#rect(width: 100%)[Bound]
#pagebreak()
#rect(width: 100%)[Right]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/page/page-margin-binding-from-text-lang
====================

// Test setting the binding implicitly.
#set page(margin: (inside: 30pt))
#set text(lang: "he")
#rect(width: 100%)[Bound]
#pagebreak()
#rect(width: 100%)[Right]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/page/page-margin-left-and-outside
====================

// Error: 19-44 `inside` and `outside` are mutually exclusive with `left` and `right`
#set page(margin: (left: 1cm, outside: 2cm))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/page/page-margin-binding-bad
====================

// Error: 20-23 must be `left` or `right`
#set page(binding: top)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/page/page-marginals
====================

#set page(
  paper: "a8",
  margin: (x: 15pt, y: 30pt),
  header: {
    text(eastern)[*Typst*]
    h(1fr)
    text(0.8em)[_Chapter 1_]
  },
  footer: context align(center)[\~ #counter(page).display() \~],
  background: context if counter(page).get().first() <= 2 {
    place(center + horizon, circle(radius: 1cm, fill: luma(90%)))
  }
)

#align(center, lines(20))

#set page(header: none, height: auto, margin: (top: 15pt, bottom: 25pt))
Z


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (block
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text))))
              (call
                (ident)
                (group
                  (number
                    (unit))))
              (call
                (call
                  (ident)
                  (group
                    (number
                      (unit))))
                (content
                  (emph
                    (text))))))
          (tagged
            (ident)
            (context
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (text
                    (escape))
                  (code
                    (call
                      (field
                        (call
                          (ident)
                          (group
                            (ident)))
                        (ident))
                      (group)))
                  (text
                    (escape))))))
          (tagged
            (ident)
            (context
              (branch
                (cmp
                  (call
                    (field
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group))
                      (ident))
                    (group))
                  (number))
                (block
                  (call
                    (ident)
                    (group
                      (add
                        (ident)
                        (ident))
                      (call
                        (ident)
                        (group
                          (tagged
                            (ident)
                            (number
                              (unit)))
                          (tagged
                            (ident)
                            (call
                              (ident)
                              (group
                                (number
                                  (unit)))))))))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (number))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (parbreak))

====================
typst/page/page-number-align-top-right
====================

#set page(
  height: 100pt,
  margin: 30pt,
  numbering: "(1)",
  number-align: top + right,
)

#block(width: 100%, height: 100%, fill: aqua.lighten(50%))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit))))))))
  (parbreak))

====================
typst/page/page-number-align-bottom-left
====================

#set page(
  height: 100pt,
  margin: 30pt,
  numbering: "[1]",
  number-align: bottom + left,
)

#block(width: 100%, height: 100%, fill: aqua.lighten(50%))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (call
            (field
              (ident)
              (ident))
            (group
              (number
                (unit))))))))
  (parbreak))

====================
typst/page/page-number-align-left-horizon
====================

// Error: 25-39 expected `top` or `bottom`, found horizon
#set page(number-align: left + horizon)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/page/page-numbering-pdf-label
====================

#set page(margin: (bottom: 20pt, rest: 10pt))
#let filler = lines(7)

// (i) - (ii). No style opt. because of suffix.
#set page(numbering: "(i)")
#filler
#pagebreak()
#filler

// 3 - 4. Style opt. Page Label should use /D style.
#set page(numbering: "1")
#filler
#pagebreak()
#filler

// I - IV. Style opt. Page Label should use /R style and start at 1 again.
#set page(numbering: "I / I")
#counter(page).update(1)
#filler
#pagebreak()
#filler
#pagebreak()
#filler
#pagebreak()
#filler

// Pre: ほ, Pre: ろ, Pre: は, Pre: に. No style opt. Uses prefix field entirely.
// Counter update without numbering change.
#set page(numbering: "Pre: い")
#filler
#pagebreak()
#filler
#counter(page).update(2)
#filler
#pagebreak()
#filler
#pagebreak()
#filler

// aa & ba. Style opt only for values <= 26. Page Label uses lower alphabet style.
// Repeats letter each 26 pages or uses numbering directly as prefix.
#set page(numbering: "a")
#counter(page).update(27)
#filler
#pagebreak()
#counter(page).update(53)
#filler


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (parbreak)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (parbreak)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (field
        (call
          (ident)
          (group
            (ident)))
        (ident))
      (group
        (number))))
  (code
    (ident))
  (parbreak))

====================
typst/page/page-numbering-hint
====================

= Heading <intro>

// Error: 1:21-1:47 cannot reference without page numbering
// Hint: 1:21-1:47 you can enable page numbering with `#set page(numbering: "1")`
Can not be used as #ref(<intro>, form: "page")


--------------------

(source_file
  (section
    (heading
      (text)
      (label))
    (content
      (parbreak)
      (comment)
      (comment)
      (text)
      (code
        (call
          (ident)
          (group
            (label)
            (tagged
              (ident)
              (string)))))
      (parbreak))))

====================
typst/page/page-suppress-headers-and-footers
====================

#set page(header: none, footer: none, numbering: "1")
Look, ma, no page numbers!

#pagebreak()

#set page(header: auto, footer: auto)
Default page numbers now.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))
          (tagged
            (ident)
            (none))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (text)
  (parbreak))

====================
typst/page/page-marginal-style-text-set
====================

#set page(numbering: "1", margin: (bottom: 20pt))
#set text(red)
Red


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (text)
  (parbreak))

====================
typst/page/page-marginal-style-text-set-first
====================

#set text(red)
#set page(numbering: "1", margin: (bottom: 20pt))
Red


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (parbreak))

====================
typst/page/page-marginal-style-text-call
====================

#set page(numbering: "1", margin: (bottom: 20pt))
#text(red)[Red]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak))

====================
typst/page/page-marginal-style-text-call-code
====================

#{
  set page(numbering: "1", margin: (bottom: 20pt))
  text(red)[Red]
}


--------------------

(source_file
  (code
    (block
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (string))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit))))))))
      (call
        (call
          (ident)
          (group
            (ident)))
        (content
          (text)))))
  (parbreak))

====================
typst/page/page-marginal-style-text-call-around-page-call
====================

#text(red, page(numbering: "1", margin: (bottom: 20pt))[Hello])


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/page/page-marginal-style-text-call-around-set-page
====================

#text(red, {
  set page(numbering: "1", margin: (bottom: 20pt))
  text(style: "italic")[Hello]
})


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (string))))
            (content
              (text)))))))
  (parbreak))

====================
typst/page/page-marginal-style-text-call-around-pagebreak
====================

#set page(numbering: "1", margin: (bottom: 20pt))
A
#text(red)[
  #pagebreak(weak: true)
  B
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (bool)))))
        (text))))
  (parbreak))

====================
typst/page/page-marginal-style-show-rule
====================

#set page(numbering: "1", margin: (bottom: 20pt))
= Introduction


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/page/page-marginal-style-show-rule-with-set-page
====================

#show heading: it => {
  set page(numbering: "1", margin: (bottom: 20pt))
  it
}

= Introduction


--------------------

(source_file
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (string))
                (tagged
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit))))))))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/page/page-marginal-style-show-rule-with-page-call
====================

#show heading: page.with(fill: aqua)

A
= Introduction
B


--------------------

(source_file
  (code
    (show
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (text)
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak))))

====================
typst/page/page-marginal-style-show-rule-with-pagebreak
====================

#set page(numbering: "1", margin: (bottom: 20pt))
#show heading: it => {
  pagebreak(weak: true)
  it
}

= Introduction


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (show
      (ident)
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (tagged
                (ident)
                (bool))))
          (ident)))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/page/page-marginal-style-context
====================

#set page(numbering: "1", margin: (bottom: 20pt))
#show: it => context {
  set text(red)
  it
}
Hi


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (show
      (lambda
        (ident)
        (context
          (block
            (set
              (call
                (ident)
                (group
                  (ident))))
            (ident))))))
  (text)
  (parbreak))

====================
typst/page/page-marginal-style-shared-initial-interaction
====================

#set page(numbering: "1", margin: (bottom: 20pt))
A
#{
  set text(fill: red)
  pagebreak()
}
#text(fill: blue)[B]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (text)
  (code
    (block
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))
      (call
        (ident)
        (group))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak))

====================
typst/page/page-marginal-style-empty
====================

#set text(red)
#set page(numbering: "1", margin: (bottom: 20pt))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/page/page-marginal-style-page-call
====================

#page(numbering: "1", margin: (bottom: 20pt))[
  #set text(red)
  A
]


--------------------

(source_file
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (ident)))))
        (text))))
  (parbreak))

====================
typst/page/issue-2631-page-header-ordering
====================

#set text(6pt)
#show heading: set text(6pt, weight: "regular")
#set page(
  margin: (x: 10pt, top: 20pt, bottom: 10pt),
  height: 50pt,
  header: context {
    let prev = query(selector(heading).before(here()))
    let next = query(selector(heading).after(here()))
    let prev = if prev != () { prev.last().body }
    let next = if next != () { next.first().body }
    (prev: prev, next: next)
  }
)

= First
Hi
#pagebreak()
= Second


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (number
              (unit))
            (tagged
              (ident)
              (string)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (context
              (block
                (let
                  (ident)
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group
                          (call
                            (ident)
                            (group)))))))
                (let
                  (ident)
                  (call
                    (ident)
                    (group
                      (call
                        (field
                          (call
                            (ident)
                            (group
                              (ident)))
                          (ident))
                        (group
                          (call
                            (ident)
                            (group)))))))
                (let
                  (ident)
                  (branch
                    (cmp
                      (ident)
                      (group))
                    (block
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))
                        (ident)))))
                (let
                  (ident)
                  (branch
                    (cmp
                      (ident)
                      (group))
                    (block
                      (field
                        (call
                          (field
                            (ident)
                            (ident))
                          (group))
                        (ident)))))
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (text)
      (code
        (call
          (ident)
          (group)))))
  (section
    (heading
      (text))
    (content
      (parbreak))))

====================
typst/page/issue-4340-set-document-and-page
====================

// Test custom page fields being applied on the last page
// if the document has custom fields.
#set document(author: "")
#set page(fill: gray)
text
#pagebreak()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/page/issue-2326-context-set-page
====================

#context [
  #set page(fill: aqua)
  On page #here().page()
]


--------------------

(source_file
  (code
    (context
      (content
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))))))
        (text)
        (code
          (call
            (field
              (call
                (ident)
                (group))
              (ident))
            (group))))))
  (parbreak))

====================
typst/page/issue-3671-get-from-page-call
====================

#set page(margin: 5pt)
#context test(page.margin, 5pt)
#page(margin: 10pt, context test(page.margin, 10pt))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (context
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))
              (number
                (unit))))))))
  (parbreak))

====================
typst/page/issue-4363-set-page-after-tag
====================

#set page(fill: aqua)
1
#pagebreak()
#metadata(none)
#set page(fill: red)
2
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (none))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text))

====================
typst/transform/transform-tex-logo
====================

// Test creating the TeX and XeTeX logos.
#let size = 11pt
#let tex = {
  [T]
  h(-0.14 * size)
  box(move(dy: 0.22 * size)[E])
  h(-0.12 * size)
  [X]
}

#let xetex = {
  [X]
  h(-0.14 * size)
  box(scale(x: -100%, move(dy: 0.26 * size)[E]))
  h(-0.14 * size)
  [T]
  h(-0.14 * size)
  box(move(dy: 0.26 * size)[E])
  h(-0.12 * size)
  [X]
}

#set text(font: "New Computer Modern", size)
Neither #tex, \
nor #xetex!


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (number
        (unit))))
  (code
    (let
      (ident)
      (block
        (content
          (text))
        (call
          (ident)
          (group
            (mul
              (sign
                (number))
              (ident))))
        (call
          (ident)
          (group
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (mul
                      (number)
                      (ident)))))
              (content
                (text)))))
        (call
          (ident)
          (group
            (mul
              (sign
                (number))
              (ident))))
        (content
          (text)))))
  (parbreak)
  (code
    (let
      (ident)
      (block
        (content
          (text))
        (call
          (ident)
          (group
            (mul
              (sign
                (number))
              (ident))))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (sign
                    (number
                      (unit))))
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (mul
                          (number)
                          (ident)))))
                  (content
                    (text)))))))
        (call
          (ident)
          (group
            (mul
              (sign
                (number))
              (ident))))
        (content
          (text))
        (call
          (ident)
          (group
            (mul
              (sign
                (number))
              (ident))))
        (call
          (ident)
          (group
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (mul
                      (number)
                      (ident)))))
              (content
                (text)))))
        (call
          (ident)
          (group
            (mul
              (sign
                (number))
              (ident))))
        (content
          (text)))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (ident)))))
  (text)
  (code
    (ident))
  (text)
  (linebreak)
  (text)
  (code
    (ident))
  (text)
  (parbreak))

====================
typst/transform/transform-rotate-and-scale
====================

// Test combination of scaling and rotation.
#set page(height: 80pt)
#align(center + horizon,
  rotate(20deg, scale(70%, image("/assets/images/tiger.jpg")))
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (number
                  (unit))
                (call
                  (ident)
                  (group
                    (string))))))))))
  (parbreak))

====================
typst/transform/transform-rotate-origin
====================

// Test setting rotation origin.
#rotate(10deg, origin: top + left,
  image("/assets/images/tiger.jpg", width: 50%)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/transform/transform-scale-origin
====================

// Test setting scaling origin.
#let r = rect(width: 100pt, height: 10pt, fill: forest)
#set page(height: 65pt)
#box(scale(r, x: 50%, y: 200%, origin: left + top))
#box(scale(r, x: 50%, origin: center))
#box(scale(r, x: 50%, y: 200%, origin: right + bottom))


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (add
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (ident)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (add
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/transform/transform-rotate
====================

// Test that rotation impact layout.
#set page(width: 200pt)
#set rotate(reflow: true)

#let one(angle) = box(fill: aqua, rotate(angle)[Test Text])
#for angle in range(0, 360, step: 15) {
  one(angle * 1deg)
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (call
            (call
              (ident)
              (group
                (ident)))
            (content
              (text)))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)
          (tagged
            (ident)
            (number))))
      (block
        (call
          (ident)
          (group
            (mul
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/transform/transform-rotate-relative-sizing
====================

// Test relative sizing in rotated boxes.
#set page(width: 200pt, height: 200pt)
#set text(size: 32pt)
#let rotated(body) = box(rotate(
  90deg,
  box(stroke: 0.5pt, height: 20%, clip: true, body)
))

#set rotate(reflow: false)
Hello #rotated[World]!\

#set rotate(reflow: true)
Hello #rotated[World]!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (number
                (unit))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (bool))
                  (ident)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (linebreak)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/transform/transform-scale
====================

// Test that scaling impacts layout.
#set page(width: 200pt)
#set text(size: 32pt)
#let scaled(body) = box(scale(
  x: 20%,
  y: 40%,
  body
))

#set scale(reflow: false)
Hello #scaled[World]!

#set scale(reflow: true)
Hello #scaled[World]!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (ident)))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/transform/transform-scale-relative-sizing
====================

// Test relative sizing in scaled boxes.
#set page(width: 200pt, height: 200pt)
#set text(size: 32pt)
#let scaled(body) = box(scale(
  x: 60%,
  y: 40%,
  box(stroke: 0.5pt, width: 30%, clip: true, body)
))

#set scale(reflow: false)
Hello #scaled[World]!\

#set scale(reflow: true)
Hello #scaled[World]!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (bool))
                  (ident)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (linebreak)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/transform/transform-scale-abs-and-auto
====================

// Test scaling by absolute lengths and auto.
#set page(width: 200pt, height: 200pt)
#let cylinder = image("/assets/images/cylinder.svg")

#cylinder
#scale(x: 100pt, y: 50pt, reflow: true, cylinder)
#scale(x: auto, y: 50pt, reflow: true, cylinder)
#scale(x: 100pt, y: auto, reflow: true, cylinder)
#scale(x: 150%, y: auto, reflow: true, cylinder)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (parbreak)
  (code
    (ident))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (bool))
        (ident))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (bool))
        (ident))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (bool))
        (ident))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (bool))
        (ident))))
  (parbreak))

====================
typst/transform/transform-skew
====================

// Test skewing along one axis.
#set page(width: 100pt, height: 60pt)
#set text(size: 12pt)
#let skewed(body) = box(skew(ax: -30deg, body))

#set skew(reflow: false)
Hello #skewed[World]!

#set skew(reflow: true)
Hello #skewed[World]!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (ident)))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/transform/transform-skew-both-axes
====================

// Test skewing along both axes.
#set page(width: 100pt, height: 250pt)
#set text(size: 12pt)
#let skewed(angle) = box(skew(ax: 30deg, ay: angle)[Some Text])

#set skew(reflow: true)
#for angle in range(-30, 31, step: 10) {
  skewed(angle * 1deg)
}


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))
            (content
              (text)))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (sign
            (number))
          (number)
          (tagged
            (ident)
            (number))))
      (block
        (call
          (ident)
          (group
            (mul
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/transform/transform-skew-origin
====================

// Test setting skewing origin.
#set page(width: 100pt, height:40pt)
#set text(spacing: 20pt)
#let square = square.with(width: 8pt)
#let skew-square(origin) = box(place(square(stroke: gray))
  + place(skew(ax: -30deg, ay: -30deg, origin: origin, square())))
#skew-square(center+horizon)
#skew-square(bottom+left)
#skew-square(top+right)
#skew-square(horizon+right)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (add
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (ident))))))
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (sign
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (ident))
                    (call
                      (ident)
                      (group)))))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident)))))
  (parbreak))

====================
typst/transform/transform-skew-relative-sizing
====================

// Test relative sizing in skewed boxes.
#set page(width: 100pt, height: 60pt)
#set text(size: 12pt)
#let skewed(body) = box(skew(
  ax: 30deg,
  box(stroke: 0.5pt, width: 30%, clip: true, body)
))

#set skew(reflow: false)
Hello #skewed[World]!\

#set skew(reflow: true)
Hello #skewed[World]!
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (bool))
                  (ident)))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (linebreak)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text))

====================
typst/measure/measure
====================

// Test `measure`.
#let f(lo, hi) = context {
  let h = measure[Hello].height
  assert(h > lo)
  assert(h < hi)
}
#text(10pt, f(6pt, 8pt))
#text(20pt, f(13pt, 14pt))


--------------------

(source_file
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (context
        (block
          (let
            (ident)
            (field
              (call
                (ident)
                (content
                  (text)))
              (ident)))
          (call
            (ident)
            (group
              (cmp
                (ident)
                (ident))))
          (call
            (ident)
            (group
              (cmp
                (ident)
                (ident))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (call
          (ident)
          (group
            (number
              (unit))
            (number
              (unit)))))))
  (parbreak))

====================
typst/measure/measure-given-area
====================

// Test `measure` given an area.
#let text = lorem(100)

#context {
  let d1 = measure(text)
  assert(d1.width > 2000pt)
  assert(d1.height < 10pt)
  let d2 = measure(width: 400pt, height: auto, text)
  assert(d2.width < 400pt)
  assert(d2.height > 50pt)
}


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)))))
  (parbreak)
  (code
    (context
      (block
        (let
          (ident)
          (call
            (ident)
            (group
              (ident))))
        (call
          (ident)
          (group
            (cmp
              (field
                (ident)
                (ident))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (cmp
              (field
                (ident)
                (ident))
              (number
                (unit)))))
        (let
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (auto))
              (ident))))
        (call
          (ident)
          (group
            (cmp
              (field
                (ident)
                (ident))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (cmp
              (field
                (ident)
                (ident))
              (number
                (unit))))))))
  (parbreak))

====================
typst/measure/measure-counter-width
====================

// Measure a counter. Tests that the introspector-assisted location assignment
// is able to take `here()` from the context into account to find the closest
// matching element instead of any single one. Crucially, we need to reuse
// the same `context c.display()` to get the same span, hence `it`.
#let f(it) = context [
  Is #measure(it).width wide: #it \
]

#let c = counter("c")
#let it = context c.display()

#c.update(10000)
#f(it)
#c.update(100)
#f(it)
#c.update(1)
#f(it)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (context
        (content
          (text)
          (code
            (field
              (call
                (ident)
                (group
                  (ident)))
              (ident)))
          (text)
          (code
            (ident))
          (linebreak)))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (ident)
      (context
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (ident))))
  (parbreak))

====================
typst/measure/measure-citation-in-flow
====================

// Try measuring a citation that appears inline with other stuff. The
// introspection-assisted location assignment will ensure that the citation
// in the measurement is matched up with the real one.
#context {
  let it = [@netwok]
  let size = measure(it)
  place(line(length: size.width))
  v(1mm)
  it + [ is cited]
}

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (context
      (block
        (let
          (ident)
          (content
            (ref)))
        (let
          (ident)
          (call
            (ident)
            (group
              (ident))))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (add
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/measure/measure-citation-in-flow-different-span
====================

// When the citation has a different span, it stops working.
#context {
  // Error: 22-29 cannot format citation in isolation
  // Hint: 22-29 check whether this citation is measured without being inserted into the document
  let size = measure[@netwok]
  place(line(length: size.width))
  v(1mm)
  [@netwok is cited]
}

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (context
      (block
        (comment)
        (comment)
        (let
          (ident)
          (call
            (ident)
            (content
              (ref))))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))))
        (call
          (ident)
          (group
            (number
              (unit))))
        (content
          (ref)
          (text)))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/measure/measure-citation-deeply-nested
====================

// Nested the citation deeply to test that introspector-assisted measurement
// is able to deal with memoization boundaries.
#context {
  let it = box(pad(x: 5pt, grid(stack[@netwok])))
  [#measure(it).width]
  it
}

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (comment)
  (code
    (context
      (block
        (let
          (ident)
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (call
                    (ident)
                    (group
                      (call
                        (ident)
                        (content
                          (ref))))))))))
        (content
          (code
            (field
              (call
                (ident)
                (group
                  (ident)))
              (ident))))
        (ident))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/measure/measure-counter-multiple-times
====================

// When the thing we measure appears multiple times, we measure as if it was
// the first one.
#context {
  let c = counter("c")
  let u(n) = c.update(n)
  let it = context c.get().first() * h(1pt)
  let size = measure(it)
  table(columns: 5, u(17), it, u(1), it, u(5))
  [#size.width] // 17pt
}


--------------------

(source_file
  (comment)
  (comment)
  (code
    (context
      (block
        (let
          (ident)
          (call
            (ident)
            (group
              (string))))
        (let
          (call
            (ident)
            (group
              (ident)))
          (call
            (field
              (ident)
              (ident))
            (group
              (ident))))
        (let
          (ident)
          (context
            (mul
              (call
                (field
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (ident))
                (group))
              (call
                (ident)
                (group
                  (number
                    (unit)))))))
        (let
          (ident)
          (call
            (ident)
            (group
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))
            (ident)
            (call
              (ident)
              (group
                (number)))
            (ident)
            (call
              (ident)
              (group
                (number)))))
        (content
          (code
            (field
              (ident)
              (ident))))
        (comment))))
  (parbreak))

====================
typst/measure/issue-5180-measure-inline-math-bounds
====================

#context {
  let height = measure(text(top-edge: "bounds", $x$)).height
  assert(height > 4pt)
  assert(height < 5pt)
}
--------------------

(source_file
  (code
    (context
      (block
        (let
          (ident)
          (field
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (string))
                    (math
                      (formula
                        (letter)))))))
            (ident)))
        (call
          (ident)
          (group
            (cmp
              (ident)
              (number
                (unit)))))
        (call
          (ident)
          (group
            (cmp
              (ident)
              (number
                (unit)))))))))

====================
typst/stack/stack-basic
====================

// Test stacks with different directions.
#let widths = (
  30pt, 20pt, 40pt, 15pt,
  30pt, 50%, 20pt, 100%,
)

#let shaded(i, w) = {
  let v = (i + 1) * 10%
  rect(width: w, height: 10pt, fill: rgb(v, v, v))
}

#let items = for (i, w) in widths.enumerate() {
  (align(right, shaded(i, w)),)
}

#set page(width: 50pt, margin: 0pt)
#stack(dir: btt, ..items)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (number
          (unit))
        (number
          (unit)))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (block
        (let
          (ident)
          (mul
            (group
              (add
                (ident)
                (number)))
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (call
                (ident)
                (group
                  (ident)
                  (ident)
                  (ident)))))))))
  (parbreak)
  (code
    (let
      (ident)
      (for
        (group
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group))
        (block
          (group
            (call
              (ident)
              (group
                (ident)
                (call
                  (ident)
                  (group
                    (ident)
                    (ident))))))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (elude
          (ident)))))
  (parbreak))

====================
typst/stack/stack-spacing
====================

// Test spacing.
#set page(width: 50pt, margin: 0pt)

#let x = square(size: 10pt, fill: eastern)
#stack(
  spacing: 5pt,
  stack(dir: rtl, spacing: 5pt, x, x, x),
  stack(dir: ltr, x, 20%, x, 20%, x),
  stack(dir: ltr, spacing: 5pt, x, x, 7pt, 3pt, x),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (ident)
            (ident)
            (ident)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (ident)
            (number
              (unit))
            (ident)
            (number
              (unit))
            (ident)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (ident)
            (ident)
            (number
              (unit))
            (number
              (unit))
            (ident))))))
  (parbreak))

====================
typst/stack/stack-overflow
====================

// Test overflow.
#set page(width: 50pt, height: 30pt, margin: 0pt)
#box(stack(
  rect(width: 40pt, height: 20pt, fill: conifer),
  rect(width: 30pt, height: 13pt, fill: forest),
))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/stack/stack-fr
====================

#set page(height: 3.5cm)
#stack(
  dir: ltr,
  spacing: 1fr,
  ..for c in "ABCDEFGHI" {([#c],)}
)

Hello
#v(2fr)
from #h(1fr) the #h(1fr) wonderful
#v(1fr)
World! 🌍


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (elude
          (for
            (ident)
            (string)
            (block
              (group
                (content
                  (code
                    (ident))))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak))

====================
typst/stack/stack-rtl-align-and-fr
====================

// Test aligning things in RTL stack with align function & fr units.
#set page(width: 50pt, margin: 5pt)
#set block(spacing: 5pt)
#set text(8pt)
#stack(dir: rtl, 1fr, [A], 1fr, [B], [C])
#stack(dir: rtl,
  align(center, [A]),
  align(left, [B]),
  [C],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (number
          (unit))
        (content
          (text))
        (number
          (unit))
        (content
          (text))
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (ident)
            (content
              (text))))
        (call
          (ident)
          (group
            (ident)
            (content
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/stack/issue-1240-stack-h-fr
====================

// This issue is sort of horrible: When you write `h(1fr)` in a `stack` instead
// of directly `1fr`, things go awry. To fix this, we now transparently detect
// h/v children.
#stack(dir: ltr, [a], 1fr, [b], 1fr, [c])
#stack(dir: ltr, [a], h(1fr), [b], h(1fr), [c])


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (number
          (unit))
        (content
          (text))
        (number
          (unit))
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (call
          (ident)
          (group
            (number
              (unit))))
        (content
          (text))
        (call
          (ident)
          (group
            (number
              (unit))))
        (content
          (text)))))
  (parbreak))

====================
typst/stack/issue-1240-stack-v-fr
====================

#set page(height: 60pt)
#stack(
  dir: ltr,
  spacing: 1fr,
  stack([a], 1fr, [b]),
  stack([a], v(1fr), [b]),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (content
              (text))
            (number
              (unit))
            (content
              (text))))
        (call
          (ident)
          (group
            (content
              (text))
            (call
              (ident)
              (group
                (number
                  (unit))))
            (content
              (text)))))))
  (parbreak))

====================
typst/stack/issue-1918-stack-with-infinite-spacing
====================

// https://github.com/typst/typst/issues/1918
#set page(width: auto)
#context layout(available => {
  let infinite-length = available.width
  // Error: 3-40 stack spacing is infinite
  stack(spacing: infinite-length)[A][B]
})
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (context
      (call
        (ident)
        (group
          (lambda
            (ident)
            (block
              (let
                (ident)
                (field
                  (ident)
                  (ident)))
              (comment)
              (call
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (ident))))
                  (content
                    (text)))
                (content
                  (text))))))))))

====================
typst/columns/columns-rtl
====================

// Test normal operation and RTL directions.
#set page(height: 3.25cm, width: 7.05cm, columns: 2)
#set text(lang: "ar", font: ("Noto Sans Arabic", "Libertinus Serif"))
#set columns(gutter: 30pt)

#box(fill: conifer, height: 8pt, width: 6pt) وتحفيز
العديد من التفاعلات الكيميائية. (DNA) من أهم الأحماض النووية التي تُشكِّل
إلى جانب كل من البروتينات والليبيدات والسكريات المتعددة
#box(fill: eastern, height: 8pt, width: 6pt)
الجزيئات الضخمة الأربعة الضرورية للحياة.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (text)
  (text)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (text)
  (parbreak))

====================
typst/columns/columns-in-fixed-size-rect
====================

// Test the `columns` function.
#set page(width: auto)

#rect(width: 180pt, height: 100pt, inset: 8pt, columns(2, [
    A special plight has befallen our document.
    Columns in text boxes reigned down unto the soil
    to waste a year's crop of rich layouts.
    The columns at least were graciously balanced.
]))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (number)
            (content
              (text)
              (text)
              (text)
              (quote)
              (text)
              (text)))))))
  (parbreak))

====================
typst/columns/columns-set-page
====================

// Test columns for a sized page.
#set page(height: 5cm, width: 7.05cm, columns: 2)

Lorem ipsum dolor sit amet is a common blind text
and I again am in need of filling up this page
#align(bottom, rect(fill: eastern, width: 100%, height: 12pt))
#colbreak()

so I'm returning to this trusty tool of tangible terror.
Sure, it is not the most creative way of filling up
a page for a test but it does get the job done.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (text)
  (text)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (text)
  (quote)
  (text)
  (text)
  (text)
  (parbreak))

====================
typst/columns/columns-in-auto-sized-rect
====================

// Test the expansion behaviour.
#set page(height: 2.5cm, width: 7.05cm)

#rect(inset: 6pt, columns(2, [
    ABC \
    BCD
    #colbreak()
    DEF
]))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (number)
            (content
              (text)
              (linebreak)
              (text)
              (code
                (call
                  (ident)
                  (group)))
              (text)))))))
  (parbreak))

====================
typst/columns/columns-more-with-gutter
====================

// Test setting a column gutter and more than two columns.
#set page(height: 3.25cm, width: 7.05cm, columns: 3)
#set columns(gutter: 30pt)

#rect(width: 100%, height: 2.5cm, fill: conifer) #parbreak()
#rect(width: 100%, height: 2cm, fill: eastern) #parbreak()
#circle(fill: eastern)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/columns/columns-set-page-colbreak-pagebreak
====================

// Test the `colbreak` and `pagebreak` functions.
#set page(height: 1cm, width: 7.05cm, columns: 2)

A
#colbreak()
#colbreak()
B
#pagebreak()
C
#colbreak()
D


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/columns/columns-empty-second-column
====================

// Test an empty second column.
#set page(width: 7.05cm, columns: 2)

#rect(width: 100%, inset: 3pt)[So there isn't anything in the second column?]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text)
        (quote)
        (text))))
  (parbreak))

====================
typst/columns/columns-page-width-auto
====================

// Test columns when one of them is empty.
#set page(width: auto, columns: 3)

Arbitrary horizontal growth.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/columns/columns-page-height-auto
====================

// Test columns in an infinitely high frame.
#set page(width: 7.05cm, columns: 2)

There can be as much content as you want in the left column
and the document will grow with it.

#rect(fill: conifer, width: 100%, height: 30pt)

Only an explicit #colbreak() `#colbreak()` can put content in the
second column.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (text)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (raw_span
    (blob))
  (text)
  (text)
  (parbreak))

====================
typst/columns/columns-one
====================

// Test a page with a single column.
#set page(height: auto, width: 7.05cm, columns: 1)

This is a normal page. Very normal.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/columns/columns-zero
====================

// Test a page with zero columns.
// Error: 49-50 number must be positive
#set page(height: auto, width: 7.05cm, columns: 0)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/columns/columns-colbreak-after-place
====================

// Test colbreak after only out-of-flow elements.
#set page(width: 7.05cm, columns: 2)
#place[OOF]
#colbreak()
In flow.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/columns/issue-columns-heading
====================

// The well-known columns bug.
#set page(height: 70pt)

Hallo
#columns(2)[
  = A
  Text
  = B
  Text
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (number)))
      (content
        (section
          (heading
            (text))
          (content
            (text)))
        (section
          (heading
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/columns/colbreak-weak
====================

#set page(columns: 2)
#colbreak(weak: true)
A
#colbreak(weak: true)
B
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text))

====================
typst/repeat/repeat-basic
====================

// Test multiple repeats.
#let sections = (
  ("Introduction", 1),
  ("Approach", 1),
  ("Evaluation", 3),
  ("Discussion", 15),
  ("Related Work", 16),
  ("Conclusion", 253),
)

#for section in sections [
  #section.at(0) #box(width: 1fr, repeat[.]) #section.at(1) \
]


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (group
        (group
          (string)
          (number))
        (group
          (string)
          (number))
        (group
          (string)
          (number))
        (group
          (string)
          (number))
        (group
          (string)
          (number))
        (group
          (string)
          (number)))))
  (parbreak)
  (code
    (for
      (ident)
      (ident)
      (content
        (code
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (ident)
                (content
                  (text))))))
        (code
          (call
            (field
              (ident)
              (ident))
            (group
              (number))))
        (linebreak))))
  (parbreak))

====================
typst/repeat/repeat-dots-rtl
====================

// Test dots with RTL.
#set text(lang: "ar")
مقدمة #box(width: 1fr, repeat[.]) 15


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (content
            (text))))))
  (text)
  (parbreak))

====================
typst/repeat/repeat-empty
====================

// Test empty repeat.
A #box(width: 1fr, repeat[]) B


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (content)))))
  (text)
  (parbreak))

====================
typst/repeat/repeat-unboxed
====================

// Test unboxed repeat.
#repeat(rect(width: 2em, height: 1em))


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/repeat/repeat-align-and-dir
====================

// Test single repeat in both directions.
A#box(width: 1fr, repeat(rect(width: 6em, height: 0.7em)))B

#set align(center)
A#box(width: 1fr, repeat(rect(width: 6em, height: 0.7em)))B

#set text(dir: rtl)
ريجين#box(width: 1fr, repeat(rect(width: 4em, height: 0.7em)))سون


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit))))))))))
  (text)
  (parbreak))

====================
typst/repeat/repeat-unrestricted
====================

// Error: 2:2-2:13 repeat with no size restrictions
#set page(width: auto)
#repeat(".")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/repeat/repeat-gap
====================

// Test repeat with custom gap.
A#box(width: 1fr, repeat(rect(width: 2em, height: 1em), gap: 1em))B


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/repeat/repeat-no-justify
====================

// Test repeat with disabled justification.
#set repeat(justify: false)
A#box(width: 1fr, repeat(rect(width: 2em, height: 1em), gap: 1em))B


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/repeat/repeat-no-justify-align
====================

// Test repeat with alignment and disabled justification.
#set repeat(justify: false)
#set align(right)
A#box(width: 1fr, repeat(rect(width: 2em, height: 1em), gap: 1em))B
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (tagged
              (ident)
              (number
                (unit))))))))
  (text))

====================
typst/table/table-empty
====================

#table()


--------------------

(source_file
  (code
    (call
      (ident)
      (group)))
  (parbreak))

====================
typst/table/table-newlines
====================

#set page(height: 70pt)
#set table(fill: (x, y) => if calc.even(x + y) { rgb("aaa") })

#table(
  columns: (1fr,) * 3,
  stroke: 2pt + rgb("333"),
  [A], [B], [C], [], [], [D \ E \ F \ \ \ G], [H],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (group
                (ident)
                (ident))
              (branch
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (add
                      (ident)
                      (ident))))
                (block
                  (call
                    (ident)
                    (group
                      (string)))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content)
        (content)
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)
          (linebreak)
          (linebreak)
          (linebreak)
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/table-fill-basic
====================

#table(columns: 3, stroke: none, fill: green, [A], [B], [C])


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (none))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/table-fill-bad
====================

// Error: 14-19 expected color, gradient, tiling, none, array, or function, found string
#table(fill: "hey")


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/table/table-align-array
====================

// Test alignment with array.
#table(
  columns: (1fr, 1fr, 1fr),
  align: (left, center, right),
  [A], [B], [C]
)

// Test empty array.
#set align(center)
#table(
  columns: (1fr, 1fr, 1fr),
  align: (),
  [A], [B], [C]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (ident)
            (ident)
            (ident)))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/table-inset
====================

// Test inset.
#table(
  columns: 3,
  inset: 10pt,
  [A], [B], [C]
)

#table(
  columns: 3,
  inset: (y: 10pt),
  [A], [B], [C]
)

#table(
  columns: 3,
  inset: (left: 20pt, rest: 10pt),
  [A], [B], [C]
)

#table(
  columns: 2,
  inset: (
    left: 20pt,
    right: 5pt,
    top: 10pt,
    bottom: 3pt,
  ),
  [A],
  [B],
)

#table(
  columns: 3,
  fill: (x, y) => (if y == 0 { aqua } else { orange }).darken(x * 15%),
  inset: (x, y) => (left: if x == 0 { 0pt } else { 5pt }, right: if x == 0 { 5pt } else { 0pt }, y: if y == 0 { 0pt } else { 5pt }),
  [A], [B], [C],
  [A], [B], [C],
)

#table(
  columns: 3,
  inset: (0pt, 5pt, 10pt),
  fill: (x, _) => aqua.darken(x * 15%),
  [A], [B], [C],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (branch
                    (cmp
                      (ident)
                      (number))
                    (block
                      (ident))
                    (block
                      (ident))))
                (ident))
              (group
                (mul
                  (ident)
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (branch
                  (cmp
                    (ident)
                    (number))
                  (block
                    (number
                      (unit)))
                  (block
                    (number
                      (unit)))))
              (tagged
                (ident)
                (branch
                  (cmp
                    (ident)
                    (number))
                  (block
                    (number
                      (unit)))
                  (block
                    (number
                      (unit)))))
              (tagged
                (ident)
                (branch
                  (cmp
                    (ident)
                    (number))
                  (block
                    (number
                      (unit)))
                  (block
                    (number
                      (unit))))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (ident)
                (ident))
              (group
                (mul
                  (ident)
                  (number
                    (unit)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/table-inset-fold
====================

// Test inset folding
#set table(inset: 10pt)
#set table(inset: (left: 0pt))

#table(
  fill: red,
  inset: (right: 0pt),
  table.cell(inset: (top: 0pt))[a]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-gutters
====================

// Test interaction with gutters.
#table(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)

#table(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  row-gutter: 5pt,
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)

#table(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  column-gutter: 5pt,
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)

#table(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  gutter: 5pt,
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/table-contextual-measurement
====================

// Test that table cells with varying contextual results are properly
// measured.
#let c = counter("c")
#let k = context square(width: c.get().first() * 5pt)
#let u(n) = [#n] + c.update(n)
#table(
  columns: 3,
  u(1), k, u(2),
  k, u(4), k,
  k, k, k,
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (ident)
      (context
        (call
          (ident)
          (group
            (tagged
              (ident)
              (mul
                (call
                  (field
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))
                    (ident))
                  (group))
                (number
                  (unit)))))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (add
        (content
          (code
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (ident)
          (group
            (number)))
        (ident)
        (call
          (ident)
          (group
            (number)))
        (ident)
        (call
          (ident)
          (group
            (number)))
        (ident)
        (ident)
        (ident)
        (ident))))
  (parbreak))

====================
typst/table/table-header-citation
====================

#set page(height: 60pt)
#table(
  table.header[@netwok],
  [A],
  [A],
)

#show bibliography: none
#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (ref)))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (show
      (ident)
      (none)))
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/table/table-header-counter
====================

#set page(height: 60pt)
#let c = counter("c")
#table(
  table.header(c.step() + context c.display()),
  [A],
  [A],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (add
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (context
                (call
                  (field
                    (ident)
                    (ident))
                  (group))))))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/table-header-footer-madness
====================

#set page(height: 100pt)
#let c = counter("c")
#let it = context c.get().first() * v(10pt)
#table(
  table.header(c.step()),
  [A],
  [A],
  [A],
  [A],
  [A],
  [A],
  [A],
  table.footer(it),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (ident)
      (context
        (mul
          (call
            (field
              (call
                (field
                  (ident)
                  (ident))
                (group))
              (ident))
            (group))
          (call
            (ident)
            (group
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (ident))))))
  (parbreak))

====================
typst/table/table-cell-override
====================

// Cell override
#table(
  align: left,
  fill: red,
  stroke: blue,
  columns: 2,
  [AAAAA], [BBBBB],
  [A], [B],
  table.cell(align: right)[C], [D],
  align(right)[E], [F],
  align(horizon)[G], [A\ A\ A],
  table.cell(align: horizon)[G2], [A\ A\ A],
  table.cell(inset: 0pt)[I], [F],
  [H], table.cell(fill: blue)[J]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-show
====================

// Cell show rule
#show table.cell: it => [Zz]

#table(
  align: left,
  fill: red,
  stroke: blue,
  columns: 2,
  [AAAAA], [BBBBB],
  [A], [B],
  table.cell(align: right)[C], [D],
  align(right)[E], [F],
  align(horizon)[G], [A\ A\ A]
)


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)))))
  (parbreak))

====================
typst/table/table-cell-show-and-override
====================

#show table.cell: it => (it.align, it.fill)
#table(
  align: left,
  row-gutter: 5pt,
  [A],
  table.cell(align: right)[B],
  table.cell(fill: aqua)[B],
)


--------------------

(source_file
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (group
          (field
            (ident)
            (ident))
          (field
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-set
====================

// Cell set rules
#set table.cell(align: center)
#show table.cell: it => (it.align, it.fill, it.inset)
#set table.cell(inset: 20pt)
#table(
  align: left,
  row-gutter: 5pt,
  [A],
  table.cell(align: right)[B],
  table.cell(fill: aqua)[B],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (group
          (field
            (ident)
            (ident))
          (field
            (ident)
            (ident))
          (field
            (ident)
            (ident))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-folding
====================

// Test folding per-cell properties (align and inset)
#table(
  columns: (1fr, 1fr),
  rows: (2.5em, auto),
  align: right,
  fill: (x, y) => (green, aqua).at(calc.rem(x + y, 2)),
  [Top], table.cell(align: bottom)[Bot],
  table.cell(inset: (bottom: 0pt))[Bot], table.cell(inset: (bottom: 0pt))[Bot]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (add
                      (ident)
                      (ident))
                    (number)))))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-align-override
====================

// Test overriding outside alignment
#set align(bottom + right)
#table(
  columns: (1fr, 1fr),
  rows: 2em,
  align: auto,
  fill: green,
  [BR], [BR],
  table.cell(align: left, fill: aqua)[BL], table.cell(align: top, fill: red.lighten(50%))[TR]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-various-overrides
====================

#table(
  columns: 2,
  fill: green,
  align: right,
  [*Name*], [*Data*],
  table.cell(fill: blue)[J.], [Organizer],
  table.cell(align: center)[K.], [Leader],
  [M.], table.cell(inset: 0pt)[Player]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-show-emph
====================

#{
  show table.cell: emph
  table(
    columns: 2,
    [Person], [Animal],
    [John], [Dog]
  )
}


--------------------

(source_file
  (code
    (block
      (show
        (field
          (ident)
          (ident))
        (ident))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/table/table-cell-show-based-on-position
====================

// Style based on position
#{
  show table.cell: it => {
    if it.y == 0 {
      strong(it)
    } else if it.x == 1 {
      emph(it)
    } else {
      it
    }
  }
  table(
    columns: 3,
    gutter: 3pt,
    [Name], [Age], [Info],
    [John], [52], [Nice],
    [Mary], [50], [Cool],
    [Jake], [49], [Epic]
  )
}


--------------------

(source_file
  (comment)
  (code
    (block
      (show
        (field
          (ident)
          (ident))
        (lambda
          (ident)
          (block
            (branch
              (cmp
                (field
                  (ident)
                  (ident))
                (number))
              (block
                (call
                  (ident)
                  (group
                    (ident))))
              (branch
                (cmp
                  (field
                    (ident)
                    (ident))
                  (number))
                (block
                  (call
                    (ident)
                    (group
                      (ident))))
                (block
                  (ident)))))))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number
              (unit)))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/table/grid-cell-in-table
====================

// Error: 8-19 cannot use `grid.cell` as a table cell
// Hint: 8-19 use `table.cell` instead
#table(grid.cell[])


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (content)))))
  (parbreak))

====================
typst/table/issue-183-table-lines
====================

// Ensure no empty lines before a table that doesn't fit into the first page.
#set page(height: 50pt)

Hello
#table(
  columns: 4,
  [1], [2], [3], [4]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/table/issue-1388-table-row-missing
====================

// Test that a table row isn't wrongly treated like a gutter row.
#set page(height: 70pt)
#table(
  rows: 16pt,
  ..range(6).map(str).flatten(),
)
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)))
                  (ident))
                (group
                  (ident)))
              (ident))
            (group)))))))

====================
typst/layout/layout-in-fixed-size-block
====================

// Layout inside a block with certain dimensions should provide those dimensions.
#set page(height: 120pt)
#block(width: 60pt, height: 80pt, layout(size => [
  This block has a width of #size.width and height of #size.height
]))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (lambda
              (ident)
              (content
                (text)
                (code
                  (field
                    (ident)
                    (ident)))
                (text)
                (code
                  (field
                    (ident)
                    (ident))))))))))
  (parbreak))

====================
typst/layout/layout-in-page-call
====================

// Layout without any container should provide the page's dimensions, minus its margins.
#page(width: 100pt, height: 100pt, {
  layout(size => [This page has a width of #size.width and height of #size.height ])
  h(1em)
  place(left, rect(width: 80pt, stroke: blue))
})
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (block
          (call
            (ident)
            (group
              (lambda
                (ident)
                (content
                  (text)
                  (code
                    (field
                      (ident)
                      (ident)))
                  (text)
                  (code
                    (field
                      (ident)
                      (ident)))))))
          (call
            (ident)
            (group
              (number
                (unit))))
          (call
            (ident)
            (group
              (ident)
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident)))))))))))

====================
typst/line-numbers/line-numbers-enable
====================

#set page(margin: (left: 2.5em))
#set par.line(numbering: "1")

First line \
Second line \
Third line


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-clearance
====================

#set page(margin: (left: 1.5cm))
#set par.line(numbering: "1", number-clearance: 0cm)

First line \
Second line \
Third line


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-margin
====================

#set page(margin: (right: 3cm))
#set par.line(numbering: "1", number-clearance: 1.5cm, number-margin: end)

First line \
Second line \
Third line


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-default-alignment
====================

#set page(margin: (left: 3em))
#set par.line(numbering: "1")
a
#([\ a] * 15)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (code
    (group
      (mul
        (content
          (linebreak)
          (text))
        (number))))
  (parbreak))

====================
typst/line-numbers/line-numbers-start-alignment
====================

#set page(margin: (left: 3em))
#set par.line(numbering: "i", number-align: start)
a \
a
#pagebreak()
a \
a \
a


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-auto-alignment
====================

#set page(margin: (right: 3cm))
#set par.line(numbering: "i", number-clearance: 1.5cm, number-margin: end)

First line \
Second line \
Third line


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-rtl
====================

#set page(margin: (right: 3em))
#set text(dir: rtl)
#set par.line(numbering: "1")
a
#([\ a] * 15)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (code
    (group
      (mul
        (content
          (linebreak)
          (text))
        (number))))
  (parbreak))

====================
typst/line-numbers/line-numbers-columns
====================

#set page(columns: 2, margin: (x: 1.5em))
#set par.line(numbering: "1", number-clearance: 0.5em)

Hello \
Beautiful \
World
#colbreak()
Birds \
In the \
Sky


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-columns-alignment
====================

#set page(columns: 2, margin: (x: 1.5em))
#set par.line(numbering: "i", number-clearance: 0.5em)

Hello \
Beautiful \
World
#colbreak()
Birds \
In the \
Sky


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-multi-columns
====================

#set page(columns: 3, margin: (x: 1.5em))
#set par.line(numbering: "1", number-clearance: 0.5em)

A \
B \
C
#colbreak()
D \
E \
F
#colbreak()
G \
H \
I


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-columns-rtl
====================

#set page(columns: 2, margin: (x: 1.5em))
#set par.line(numbering: "1", number-clearance: 0.5em)
#set text(dir: rtl)

Hello \
Beautiful \
World
#colbreak()
Birds \
In the \
Sky


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-columns-override
====================

#set columns(gutter: 1.5em)
#set page(columns: 2, margin: (x: 1.5em))
#set par.line(numbering: "1", number-margin: end, number-clearance: 0.5em)

Hello \
Beautiful \
World
#colbreak()
Birds \
In the \
Sky


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-page-scope
====================

#set page(margin: (left: 2.5em))
#set par.line(numbering: "1", numbering-scope: "page")

First line \
Second line
#pagebreak()
Back to first line \
Second line again
#page[
  Once again, first \
  And second
]
Back to first


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (linebreak)
        (text))))
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-page-scope-with-columns
====================

#set page(margin: (x: 1.1cm), columns: 2)
#set par.line(
  numbering: "1",
  number-clearance: 0.5cm,
  numbering-scope: "page"
)

A \
A \
A
#colbreak()
B \
B \
B
#pagebreak()
One \
Two \
Three
#colbreak()
Four \
Five \
Six
#page[
  Page \
  Elem
  #colbreak()
  Number \
  Reset
]
We're back
#colbreak()
Bye!


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (linebreak)
        (text)
        (code
          (call
            (ident)
            (group)))
        (text)
        (linebreak)
        (text))))
  (text)
  (quote)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/line-numbers/line-numbers-page-scope-quasi-empty-first-column
====================

// Ensure this case (handled separately internally) is properly handled.
#set page(margin: (x: 1.1cm), height: 2cm, columns: 2)
#set par.line(
  numbering: "1",
  number-clearance: 0.5cm,
  numbering-scope: "page"
)

First line
#colbreak()
Second line
#pagebreak()
#place[]
#box(height: 2cm)[First!]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (ident)
      (content)))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/line-numbers/line-numbers-nested-content
====================

#set page(margin: (left: 1.5cm))
#set par.line(numbering: "1", number-clearance: 0.5cm)

#grid(
  columns: (1fr, 1fr),
  column-gutter: 0.5cm,
  inset: 5pt,
  block[A\ #box(lorem(5))], [Roses\ are\ red],
  [AAA], [],
  [], block[BBB\ CCC],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (content
            (text)
            (linebreak)
            (code
              (call
                (ident)
                (group
                  (call
                    (ident)
                    (group
                      (number))))))))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (content
          (text))
        (content)
        (content)
        (call
          (ident)
          (content
            (text)
            (linebreak)
            (text))))))
  (parbreak))

====================
typst/line-numbers/line-numbers-place-out-of-order
====================

#set page(margin: (left: 1.5cm))
#set par.line(numbering: "1", number-clearance: 0.5cm)

#place(bottom)[Line 4]

Line 1\
Line 2\
Line 3
#v(1cm)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (parbreak))

====================
typst/line-numbers/line-numbers-deduplication
====================

#set page(margin: (left: 1.5cm))
#set par.line(numbering: "1", number-clearance: 0.5cm)

#grid(
  columns: (1fr, 1fr),
  column-gutter: 0.5cm,
  row-gutter: 5pt,
  lorem(5), [A\ B\ C],
  [DDD], [DDD],
  [This is], move(dy: 2pt)[tough]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (number)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (parbreak))

====================
typst/line-numbers/line-numbers-deduplication-tall-line
====================

#set page(margin: (left: 1.5cm))
#set par.line(numbering: "1", number-clearance: 0.5cm)

#grid(
  columns: (1fr, 1fr),
  column-gutter: 0.5cm,
  stroke: 0.5pt,

  grid.cell(rowspan: 2)[very #box(fill: red, height: 4cm)[tall]],
  grid.cell(inset: (y: 0.5pt))[Line 1\ Line 2\ Line 3],
  grid.cell(inset: (y: 0.5pt))[Line 4\ Line 5\ Line 6\ Line 7\ Line 8\ Line 9\ End]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (code
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (ident))
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text))))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text))))))
  (parbreak))

====================
typst/line-numbers/line-numbers-deduplication-zero-height-number
====================

#set page(margin: (left: 1.5cm))
#set par.line(numbering: n => move(dy: -0.6em, box(height: 0pt)[#n]), number-clearance: 0.5cm)

#grid(
  columns: (1fr, 1fr),
  column-gutter: 0.5cm,
  row-gutter: 5pt,
  lorem(5), [A\ B\ C],
  [DDD], [DDD],
  [This is], move(dy: 3pt)[tough]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (lambda
              (ident)
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (sign
                      (number
                        (unit))))
                  (call
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (number
                            (unit)))))
                    (content
                      (code
                        (ident))))))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (number)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (parbreak))

====================
typst/line-numbers/line-numbers-equation-number
====================

#set page(margin: (left: 2.5em))
#set par.line(numbering: "1")
#set math.equation(numbering: "(1)")

A
$ x $
B
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (math
    (formula
      (letter)))
  (text))

====================
typst/pad/pad-basic
====================

// Use for indentation.
#pad(left: 10pt, [Indented!])

// All sides together.
#set rect(inset: 0pt)
#rect(fill: conifer,
  pad(10pt, right: 20pt,
    rect(width: 20pt, height: 20pt, fill: rgb("eb5278"))
  )
)

Hi #box(pad(left: 10pt)[A]) there


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text)))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number
              (unit))
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (string)))))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (text)
  (parbreak))

====================
typst/pad/pad-expanding-contents
====================

// Pad can grow.
#pad(left: 10pt, right: 10pt)[PL #h(1fr) PR]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text)
        (code
          (call
            (ident)
            (group
              (number
                (unit)))))
        (text))))
  (parbreak))

====================
typst/pad/pad-followed-by-content
====================

// Test that the pad element doesn't consume the whole region.
#set page(height: 6cm)
#align(left)[Before]
#pad(10pt, image("/assets/images/tiger.jpg"))
#align(right)[After]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (call
          (ident)
          (group
            (string))))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak))

====================
typst/pad/pad-adding-to-100-percent
====================

// Test that padding adding up to 100% does not panic.
#pad(50%)[]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (number
            (unit))))
      (content)))
  (parbreak))

====================
typst/pad/issue-5044-pad-100-percent
====================

#set page(width: 30pt, height: 30pt)
#pad(100%, block(width: 1cm, height: 1cm, fill: red))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/pad/issue-5160-unbreakable-pad
====================

#set block(breakable: false)
#block(width: 100%, pad(x: 20pt, align(right)[A]))
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (call
              (call
                (ident)
                (group
                  (ident)))
              (content
                (text)))))))))

====================
typst/hide/hide-text
====================

AB #h(1fr) CD \
#hide[A]B #h(1fr) C#hide[D]


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (linebreak)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/hide/hide-line
====================

Hidden:
#hide[#line(length: 100%)]
#line(length: 100%)


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/hide/hide-table
====================

Hidden:
#hide(table(rows: 2, columns: 2)[a][b][c][d])
#table(rows: 2, columns: 2)[a][b][c][d]


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number))
                    (tagged
                      (ident)
                      (number))))
                (content
                  (text)))
              (content
                (text)))
            (content
              (text)))
          (content
            (text))))))
  (code
    (call
      (call
        (call
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))))
            (content
              (text)))
          (content
            (text)))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/hide/hide-polygon
====================

Hidden:
#hide[
  #polygon((20%, 0pt),
    (60%, 0pt),
    (80%, 2cm),
    (0%,  2cm),)
]
#polygon((20%, 0pt),
  (60%, 0pt),
  (80%, 2cm),
  (0%,  2cm),)


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (group
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit)))
              (group
                (number
                  (unit))
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit)))
        (group
          (number
            (unit))
          (number
            (unit))))))
  (parbreak))

====================
typst/hide/hide-rect
====================

#set rect(
  inset: 8pt,
  fill: rgb("e4e5ea"),
  width: 100%,
)

Hidden:
#hide[
#grid(
  columns: (1fr, 1fr, 2fr),
  rows: (auto, 40pt),
  gutter: 3pt,
  rect[A],
  rect[B],
  rect[C],
  rect(height: 100%)[D],
)
]
#grid(
  columns: (1fr, 1fr, 2fr),
  rows: (auto, 40pt),
  gutter: 3pt,
  rect[A],
  rect[B],
  rect[C],
  rect(height: 100%)[D],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (group
                  (number
                    (unit))
                  (number
                    (unit))
                  (number
                    (unit))))
              (tagged
                (ident)
                (group
                  (auto)
                  (number
                    (unit))))
              (tagged
                (ident)
                (number
                  (unit)))
              (call
                (ident)
                (content
                  (text)))
              (call
                (ident)
                (content
                  (text)))
              (call
                (ident)
                (content
                  (text)))
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (content
            (text)))
        (call
          (ident)
          (content
            (text)))
        (call
          (ident)
          (content
            (text)))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (parbreak))

====================
typst/hide/hide-list
====================

Hidden:
#hide[
- 1
- 2
  1. A
  2. B
- 3
]


- 1
- 2
  1. A
  2. B
- 3


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (content
        (item
          (text))
        (item
          (text)
          (item
            (text))
          (item
            (text)))
        (item
          (text)))))
  (parbreak)
  (item
    (text))
  (item
    (text)
    (item
      (text))
    (item
      (text)))
  (item
    (text))
  (parbreak))

====================
typst/hide/hide-image
====================

Hidden:
#hide(image("/assets/images/tiger.jpg", width: 5cm, height: 1cm,))

#image("/assets/images/tiger.jpg", width: 5cm, height: 1cm,)


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/hide/issue-622-hide-meta-cite
====================

// Test that metadata of hidden stuff stays available.
#set cite(style: "chicago-notes")

A pirate. @arrgh \
#set text(2pt)
#hide[
  A @arrgh pirate.
  #bibliography("/assets/bib/works.bib")
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (ref)
  (linebreak)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (content
        (text)
        (ref)
        (text)
        (code
          (call
            (ident)
            (group
              (string)))))))
  (parbreak))

====================
typst/hide/issue-622-hide-meta-outline
====================

#set text(8pt)
#outline()
#set text(2pt)
#hide(block(grid(
  [= A],
  [= B],
  block(grid(
    [= C],
    [= D],
  ))
)))
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (content
                  (section
                    (heading
                      (text))
                    (content)))
                (content
                  (section
                    (heading
                      (text))
                    (content)))
                (call
                  (ident)
                  (group
                    (call
                      (ident)
                      (group
                        (content
                          (section
                            (heading
                              (text))
                            (content)))
                        (content
                          (section
                            (heading
                              (text))
                            (content)))))))))))))))

====================
typst/relative/relative-fields
====================

// Test relative length fields.
#test((100% + 2em + 2pt).ratio, 100%)
#test((100% + 2em + 2pt).length, 2em + 2pt)
#test((100% + 2pt).length, 2pt)
#test((100% + 2pt - 2pt).length, 0pt)
#test((56% + 2pt - 56%).ratio, 0%)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (add
                (number
                  (unit))
                (number
                  (unit)))
              (number
                (unit))))
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (add
                (number
                  (unit))
                (number
                  (unit)))
              (number
                (unit))))
          (ident))
        (add
          (number
            (unit))
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (add
              (number
                (unit))
              (number
                (unit))))
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (sub
              (add
                (number
                  (unit))
                (number
                  (unit)))
              (number
                (unit))))
          (ident))
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (field
          (group
            (sub
              (add
                (number
                  (unit))
                (number
                  (unit)))
              (number
                (unit))))
          (ident))
        (number
          (unit)))))
  (parbreak))

====================
typst/relative/double-percent
====================

// Test for two percent signs in a row.
#3.1%%


--------------------

(source_file
  (comment)
  (code
    (number
      (unit)))
  (text)
  (parbreak))

====================
typst/relative/double-percent-error
====================

// Error: 7-8 the character `%` is not valid in code
#(3.1%%)
--------------------



====================
typst/embed/pdf-embed
====================

#pdf.embed("/assets/text/hello.txt")
#pdf.embed(
  "/assets/data/details.toml",
  relationship: "supplement",
  mime-type: "application/toml",
  description: "Information about a secret project",
)


--------------------

(source_file
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string)
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/embed/pdf-embed-bytes
====================

#pdf.embed("hello.txt", read("/assets/text/hello.txt", encoding: none))
#pdf.embed(
  "a_file_name.txt",
  read("/assets/text/hello.txt", encoding: none),
  relationship: "supplement",
  mime-type: "text/plain",
  description: "A description",
)


--------------------

(source_file
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string)
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (none)))))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string)
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (none))))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string)))))
  (parbreak))

====================
typst/embed/pdf-embed-invalid-relationship
====================

#pdf.embed(
  "/assets/text/hello.txt",
  // Error: 17-23 expected "source", "data", "alternative", "supplement", or none
  relationship: "test",
  mime-type: "text/plain",
  description: "A test file",
)
--------------------

(source_file
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (string)
        (comment)
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (string))))))

====================
typst/cjk/text-chinese-basic
====================

// Test basic Chinese text from Wikipedia.
#set text(font: "Noto Serif CJK SC")

是美国广播公司电视剧《迷失》第3季的第22和23集，也是全剧的第71集和72集
由执行制作人戴蒙·林道夫和卡尔顿·库斯编剧，导演则是另一名执行制作人杰克·本德
节目于2007年5月23日在美国和加拿大首播，共计吸引了1400万美国观众收看
本集加上插播广告一共也持续有两个小时


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (text)
  (text)
  (text)
  (parbreak))

====================
typst/cjk/text-cjk-latin-spacing
====================

#set page(width: 50pt + 10pt, margin: (x: 5pt))
#set text(lang: "zh", font: "Noto Serif CJK SC", cjk-latin-spacing: auto)
#set par(justify: true)

中文，中12文1中，文12中文

中文，中ab文a中，文ab中文

#set text(cjk-latin-spacing: none)

中文，中12文1中，文12中文

中文，中ab文a中，文ab中文


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (number
                (unit))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (none))))))
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak))

====================
typst/cjk/cjk-punctuation-adjustment-1
====================

#set page(width: 15em)

// In the following example, the space between 》！ and ？ should be squeezed.
// because zh-CN follows GB style
#set text(lang: "zh", region: "CN", font: "Noto Serif CJK SC")
原来，你也玩《原神》！？

// However, in the following example, the space between 》！ and ？ should not be squeezed.
// because zh-TW does not follow GB style
#set text(lang: "zh", region: "TW", font: "Noto Serif CJK TC")
原來，你也玩《原神》！ ？

#set text(lang: "zh", region: "CN", font: "Noto Serif CJK SC")
「真的吗？」

#set text(lang: "ja", font: "Noto Serif CJK JP")
「本当に？」


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak))

====================
typst/cjk/cjk-punctuation-adjustment-2
====================

#set text(lang: "zh", region: "CN", font: "Noto Serif CJK SC")
《书名〈章节〉》 // the space between 〉 and 》 should be squeezed

〔茸毛〕：很细的毛 // the space between 〕 and ： should be squeezed


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text)
  (comment)
  (parbreak)
  (text)
  (comment)
  (parbreak))

====================
typst/cjk/cjk-punctuation-adjustment-3
====================

#set page(width: 21em)
#set text(lang: "zh", region: "CN", font: "Noto Serif CJK SC")

// These examples contain extensive use of Chinese punctuation marks,
// from 《Which parentheses should be used when applying parentheses?》.
// link: https://archive.md/2bb1N


（〔中〕医、〔中〕药、技）系列评审

（长三角［长江三角洲］）（GB/T 16159—2012《汉语拼音正词法基本规则》）

【爱因斯坦（Albert Einstein）】物理学家

〔（2009）民申字第1622号〕

“江南海北长相忆，浅水深山独掩扉。”（［唐］刘长卿《会赦后酬主簿所问》）

参看1378页〖象形文字〗。（《现代汉语词典》修订本）


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (comment)
  (comment)
  (comment)
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak))

====================
typst/cjk/issue-2538-cjk-latin-spacing-before-linebreak
====================

// Issue #2538
#set text(cjk-latin-spacing: auto)

abc字

abc字#linebreak()

abc字#linebreak()
母

abc字\
母


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (text)
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/cjk/issue-2650-cjk-latin-spacing-meta
====================

测a试

测#context [a]试
--------------------

(source_file
  (text)
  (parbreak)
  (text)
  (code
    (context
      (content
        (text))))
  (text))

====================
typst/linebreak/linebreak-overflow
====================

// Test overlong word that is not directly after a hard break.
This is a spaceexceedinglylongy.


--------------------

(source_file
  (comment)
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-overflow-double
====================

// Test two overlong words in a row.
Supercalifragilisticexpialidocious Expialigoricmetrioxidation.


--------------------

(source_file
  (comment)
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-hyphen-nbsp
====================

// Test for non-breaking space and hyphen.
There are non\u{2011}breaking~characters.


--------------------

(source_file
  (comment)
  (text
    (escape))
  (shorthand)
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-narrow-nbsp
====================

// Test for narrow non-breaking space.
#show "_": sym.space.nobreak.narrow
0.1_g, 1_g, 10_g, 100_g, 1_000_g, 10_000_g, 100_000_g, 1_000_000_g


--------------------

(source_file
  (comment)
  (code
    (show
      (string)
      (field
        (field
          (field
            (ident)
            (ident))
          (ident))
        (ident))))
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-shape-run
====================

// Test that there are no unwanted line break opportunities on run change.
This is partly emp#emph[has]ized.


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-manual
====================

Hard #linebreak() break.


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-manual-directly-after-automatic
====================

// Test hard break directly after normal break.
Hard break directly after \ normal break.


--------------------

(source_file
  (comment)
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-manual-consecutive
====================

// Test consecutive breaks.
Two consecutive \ \ breaks and three \ \ more.


--------------------

(source_file
  (comment)
  (text)
  (linebreak)
  (linebreak)
  (text)
  (linebreak)
  (linebreak)
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-manual-trailing-multiple
====================

// Test forcing an empty trailing line.
Trailing break \ \


--------------------

(source_file
  (comment)
  (text)
  (linebreak)
  (linebreak)
  (parbreak))

====================
typst/linebreak/linebreak-manual-justified
====================

// Test justified breaks.
#set par(justify: true)
With a soft #linebreak(justify: true)
break you can force a break without #linebreak(justify: true)
breaking justification. #linebreak(justify: false)
Nice!


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-thai
====================

// Test linebreak for East Asian languages
ทีวีตรวจทานนอร์ทแฟรีเลคเชอร์โกลด์อัลบัมเชอร์รี่เย้วสโตร์กฤษณ์เคลมเยอบีร่าพ่อค้าบลูเบอร์รี่สหัสวรรษโฮปแคนูโยโย่จูนสตรอว์เบอร์รีซื่อบื้อเยนแบ็กโฮเป็นไงโดนัททอมสเตริโอแคนูวิทย์แดรี่โดนัทวิทย์แอปพริคอทเซอร์ไพรส์ไฮบริดกิฟท์อินเตอร์โซนเซอร์วิสเทียมทานโคโยตี้ม็อบเที่ยงคืนบุญคุณ


--------------------

(source_file
  (comment)
  (text)
  (parbreak))

====================
typst/linebreak/linebreak-cite-punctuation
====================

// Test punctuation after citations.
#set page(width: 162pt)

They can look for the details in @netwok,
which is the authoritative source.

#bibliography("/assets/bib/works.bib")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (ref)
  (text)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (parbreak))

====================
typst/linebreak/linebreak-math-punctuation
====================

// Test punctuation after math equations.
#set page(width: 85pt)

We prove $1 < 2$. \
We prove $1 < 2$! \
We prove $1 < 2$? \
We prove $1 < 2$, \
We prove $1 < 2$; \
We prove $1 < 2$: \
We prove $1 < 2$- \
We prove $1 < 2$– \
We prove $1 < 2$— \


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (text)
  (math
    (formula
      (number)
      (symbol)
      (number)))
  (text)
  (linebreak)
  (parbreak))

====================
typst/linebreak/linebreak-link
====================

#link("https://example.com/(ab") \
#link("https://example.com/(ab)") \
#link("https://example.com/(paren)") \
#link("https://example.com/paren)") \
#link("https://hi.com/%%%%%%%%abcdef") \


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (code
    (call
      (ident)
      (group
        (string))))
  (linebreak)
  (parbreak))

====================
typst/linebreak/linebreak-link-justify
====================

#set page(width: 240pt)
#set par(justify: true)

Here's a link https://url.com/data/extern12840%data_urlenc and then there are more
links #link("www.url.com/data/extern12840%data_urlenc") in my text of links
http://mydataurl/hash/12098541029831025981024980124124214/incremental/progress%linkdata_information_setup_my_link_just_never_stops_going/on?query=false


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (quote)
  (text)
  (url)
  (text)
  (text)
  (code
    (call
      (ident)
      (group
        (string))))
  (text)
  (url)
  (parbreak))

====================
typst/linebreak/linebreak-link-end
====================

// Ensure that there's no unconditional break at the end of a link.
#set page(width: 180pt, height: auto, margin: auto)
#set text(11pt)

For info see #link("https://myhost.tld").


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (string))))
  (text)
  (parbreak))

====================
typst/linebreak/issue-2105-linebreak-tofu
====================

#linebreak()中文


--------------------

(source_file
  (code
    (call
      (ident)
      (group)))
  (text)
  (parbreak))

====================
typst/linebreak/issue-3082-chinese-punctuation
====================

#set text(font: "Noto Serif CJK TC", lang: "zh")
#set page(width: 230pt)

課有手冬，朱得過已誰卜服見以大您即乙太邊良，因且行肉因和拉幸，念姐遠米巴急（abc0），松黃貫誰。


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/linebreak/issue-80-emoji-linebreak
====================

// Test that there are no linebreaks in composite emoji (issue #80).
#set page(width: 50pt, height: auto)
#h(99%) 🏳️‍🌈
🏳️‍🌈


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (text)
  (parbreak))

====================
typst/linebreak/issue-hyphenate-in-link
====================

#set par(justify: true)

// The `linebreak()` function accidentally generated out-of-order breakpoints
// for links because it now splits on word boundaries. We avoid the link markup
// syntax because it's show rule interferes.
#"http://creativecommons.org/licenses/by-nc-sa/4.0/"


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (comment)
  (comment)
  (comment)
  (code
    (string))
  (parbreak))

====================
typst/linebreak/issue-4468-linebreak-thai
====================

// In this bug, empty-range glyphs at line break boundaries could be duplicated.
// This happens for Thai specifically because it has both
// - line break opportunities
// - shaping that results in multiple glyphs in the same cluster
#set text(font: "Noto Sans Thai")
#h(85pt) งบิก


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak))

====================
typst/linebreak/issue-5235-linebreak-optimized-without-justify
====================

#set page(width: 207pt, margin: 15pt)
#set text(11pt)

#set par(linebreaks: "simple")
Some texts feature many longer
words. Those are often exceedingly
challenging to break in a visually
pleasing way.

#set par(linebreaks: "optimized")
Some texts feature many longer
words. Those are often exceedingly
challenging to break in a visually
pleasing way.
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (text)
  (text)
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (text)
  (text)
  (text))

====================
typst/hyphenate/hyphenate
====================

// Test hyphenating english and greek.
#set text(hyphenate: true)
#set page(width: auto)
#grid(
  columns: (50pt, 50pt),
  [Warm welcomes to Typst.],
  text(lang: "el")[διαμερίσματα. \ λατρευτός],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string))))
          (content
            (text)
            (linebreak)
            (text))))))
  (parbreak))

====================
typst/hyphenate/hyphenate-off-temporarily
====================

// Test disabling hyphenation for short passages.
#set page(width: 110pt)
#set text(hyphenate: true)

Welcome to wonderful experiences. \
Welcome to `wonderful` experiences. \
Welcome to #text(hyphenate: false)[wonderful] experiences. \
Welcome to wonde#text(hyphenate: false)[rf]ul experiences. \

// Test enabling hyphenation for short passages.
#set text(hyphenate: false)
Welcome to wonderful experiences. \
Welcome to wo#text(hyphenate: true)[nd]erful experiences. \


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (linebreak)
  (text)
  (raw_span
    (blob))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (text)
  (linebreak)
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (text)
  (linebreak)
  (parbreak))

====================
typst/hyphenate/hyphenate-between-shape-runs
====================

// Hyphenate between shape runs.
#set page(width: 80pt)
#set text(hyphenate: true)
It's a #emph[Tree]beard.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (quote)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-shy
====================

// Test shy hyphens.
#set text(lang: "de", hyphenate: true)
#grid(
  columns: 2 * (20pt,),
  gutter: 20pt,
  [Barankauf],
  [Bar-?ankauf],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text)
          (shorthand)
          (text)))))
  (parbreak))

====================
typst/hyphenate/hyphenate-punctuation
====================

// This sequence would confuse hypher if we passed trailing / leading
// punctuation instead of just the words. So this tests that we don't
// do that. The test passes if there's just one hyphenation between
// "net" and "works".
#set page(width: 60pt)
#set text(hyphenate: true)
#h(6pt) networks, the rest.


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-outside-of-words
====================

// More tests for hyphenation of non-words.
#set text(hyphenate: true)
#block(width: 0pt, "doesn't")
#block(width: 0pt, "(OneNote)")
#block(width: 0pt, "(present)")

#set text(lang: "de")
#block(width: 0pt, "(bzw.)")


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (string))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (string))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (string))))
  (parbreak))

====================
typst/hyphenate/hyphenate-pt-repeat-hyphen-natural-word-breaking
====================

// The word breaker naturally breaks arco-da-velha at arco-/-da-velha,
// so we shall repeat the hyphen, even that hyphenate is set to false.
#set page(width: 4cm)
#set text(lang: "pt")

Alguma coisa no arco-da-velha é algo que está muito longe.


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-pt-repeat-hyphen-hyphenate-true
====================

#set page(width: 4cm)
#set text(lang: "pt", hyphenate: true)

Alguma coisa no arco-da-velha é algo que está muito longe.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-pt-repeat-hyphen-hyphenate-true-with-emphasis
====================

#set page(width: 4cm)
#set text(lang: "pt", hyphenate: true)

Alguma coisa no _arco-da-velha_ é algo que está muito longe.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (emph
    (text))
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-pt-no-repeat-hyphen
====================

#set page(width: 4cm)
#set text(lang: "pt", hyphenate: true)

Um médico otorrinolaringologista cuida da garganta do paciente.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-pt-dash-emphasis
====================

// If the hyphen is followed by a space we shall not repeat the hyphen
// at the next line
#set page(width: 4cm)
#set text(lang: "pt", hyphenate: true)

Quebabe é a -melhor- comida que existe.


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-es-repeat-hyphen
====================

#set page(width: 6cm)
#set text(lang: "es", hyphenate: true)

Lo que entendemos por nivel léxico-semántico, en cuanto su sentido más
gramatical: es aquel que estudia el origen y forma de las palabras de
un idioma.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (text)
  (text)
  (parbreak))

====================
typst/hyphenate/hyphenate-es-capitalized-names
====================

// If the hyphen is followed by a capitalized word we shall not repeat
//  the hyphen at the next line
#set page(width: 6.2cm)
#set text(lang: "es", hyphenate: true)

Tras el estallido de la contienda Ruiz-Giménez fue detenido junto a sus
dos hermanos y puesto bajo custodia por las autoridades republicanas, con
el objetivo de protegerle de las patrullas de milicianos.


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (text)
  (text)
  (parbreak))

====================
typst/hyphenate/costs-widow-orphan
====================

#set page(height: 60pt)

#let sample = lorem(12)

#sample
#pagebreak()
#set text(costs: (widow: 0%, orphan: 0%))
#sample


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (number)))))
  (parbreak)
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (ident))
  (parbreak))

====================
typst/hyphenate/costs-runt-avoid
====================

#set par(justify: true)

#let sample = [please avoid runts in this text.]

#sample
#pagebreak()
#set text(costs: (runt: 10000%))
#sample


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (code
    (let
      (ident)
      (content
        (text))))
  (parbreak)
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (ident))
  (parbreak))

====================
typst/hyphenate/costs-runt-allow
====================

#set par(justify: true)
#set text(size: 6pt)

#let sample = [a a a a a a a a a a a a a a a a a a a a a a a a a]

#sample
#pagebreak()
#set text(costs: (runt: 0%))
#sample


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (let
      (ident)
      (content
        (text))))
  (parbreak)
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (ident))
  (parbreak))

====================
typst/hyphenate/costs-hyphenation-avoid
====================

#set par(justify: true)

#let sample = [we've increased the hyphenation cost.]

#sample
#pagebreak()
#set text(costs: (hyphenation: 10000%))
#sample


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (code
    (let
      (ident)
      (content
        (text)
        (quote)
        (text))))
  (parbreak)
  (code
    (ident))
  (code
    (call
      (ident)
      (group)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (ident))
  (parbreak))

====================
typst/hyphenate/costs-invalid-type
====================

// Error: 18-37 expected ratio, found auto
#set text(costs: (hyphenation: auto))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (auto))))))))
  (parbreak))

====================
typst/hyphenate/costs-invalid-key
====================

// Error: 18-52 unexpected key "invalid-key", valid keys are "hyphenation", "runt", "widow", and "orphan"
#set text(costs: (hyphenation: 1%, invalid-key: 3%))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/hyphenate/costs-access
====================

#set text(costs: (hyphenation: 1%, runt: 2%))
#set text(costs: (widow: 3%))
#context test(text.costs, (hyphenation: 1%, runt: 2%, widow: 3%, orphan: 100%))
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (context
      (call
        (ident)
        (group
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))))))

====================
typst/justify/justify
====================

#set page(width: 180pt)
#set par(justify: true, first-line-indent: 14pt, spacing: 5pt, leading: 5pt)

This text is justified, meaning that spaces are stretched so that the text
forms a "block" with flush edges at both sides.

First line indents and hyphenation play nicely with justified text.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (text)
  (quote)
  (text)
  (quote)
  (text)
  (parbreak)
  (text)
  (parbreak))

====================
typst/justify/justify-knuth-story
====================

#set page(width: auto, height: auto)
#set par(leading: 4pt, justify: true)
#set text(font: "New Computer Modern")

#let story = [
  In olden times when wishing still helped one, there lived a king whose
  daughters were all beautiful; and the youngest was so beautiful that the sun
  itself, which has seen so much, was astonished whenever it shone in her face.
  Close by the king’s castle lay a great dark forest, and under an old lime-tree
  in the forest was a well, and when the day was very warm, the king’s child
  went out into the forest and sat down by the side of the cool fountain; and
  when she was bored she took a golden ball, and threw it up on high and caught
  it; and this ball was her favorite plaything.
]

#let column(title, linebreaks, hyphenate) = {
  rect(inset: 0pt, width: 132pt, fill: rgb("eee"))[
    #set par(linebreaks: linebreaks)
    #set text(hyphenate: hyphenate)
    #strong(title) \ #story
  ]
}

#grid(
  columns: 3,
  gutter: 10pt,
  column([Simple without hyphens], "simple", false),
  column([Simple with hyphens], "simple", true),
  column([Optimized with hyphens], "optimized", true),
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (let
      (ident)
      (content
        (text)
        (text)
        (text)
        (text)
        (text)
        (text)
        (text)
        (text))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)
          (ident)))
      (block
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (string))))))
          (content
            (code
              (set
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (ident))))))
            (code
              (set
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (ident))))))
            (code
              (call
                (ident)
                (group
                  (ident))))
            (linebreak)
            (code
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (content
              (text))
            (string)
            (bool)))
        (call
          (ident)
          (group
            (content
              (text))
            (string)
            (bool)))
        (call
          (ident)
          (group
            (content
              (text))
            (string)
            (bool))))))
  (parbreak))

====================
typst/justify/justify-manual-linebreak
====================

// Test that lines with hard breaks aren't justified.
#set par(justify: true)
A B C \
D


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/justify/justify-justified-linebreak
====================

// Test forced justification with justified break.
A B C #linebreak(justify: true)
D E F #linebreak(justify: true)


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (bool)))))
  (parbreak))

====================
typst/justify/justify-basically-empty
====================

// Test that there are no hick-ups with justification enabled and
// basically empty paragraph.
#set par(justify: true)
#""


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (string))
  (parbreak))

====================
typst/justify/justify-shrink-last-line
====================

// Test that the last line can be shrunk
#set page(width: 155pt)
#set par(justify: true)
This text can be fitted in one line.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (text)
  (parbreak))

====================
typst/justify/justify-avoid-runts
====================

// Test that runts are avoided when it's not too costly to do so.
#set page(width: 124pt)
#set par(justify: true)
#for i in range(0, 20) {
	"a b c "
}
#"d"


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (for
      (ident)
      (call
        (ident)
        (group
          (number)
          (number)))
      (block
        (string))))
  (code
    (string))
  (parbreak))

====================
typst/justify/justify-no-leading-spaces
====================

// Test that justification cannot lead to a leading space
#set par(justify: true)
#set text(size: 12pt)
#set page(width: 45mm, height: auto)

lorem ipsum 1234, lorem ipsum dolor sit amet

#"  leading whitespace should still be displayed"


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (text)
  (parbreak)
  (code
    (string))
  (parbreak))

====================
typst/justify/justify-code-blocks
====================

// Test that justification doesn't break code blocks
#set par(justify: true)

```cpp
int main() {
  printf("Hello world\n");
  return 0;
}
```


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (raw_blck
    (ident)
    (blob))
  (parbreak))

====================
typst/justify/justify-chinese
====================

// In Chinese typography, line length should be multiples of the character size
// and the line ends should be aligned with each other. Most Chinese
// publications do not use hanging punctuation at line end.
#set page(width: auto)
#set par(justify: true)
#set text(lang: "zh", font: "Noto Serif CJK SC")

#rect(inset: 0pt, width: 80pt, fill: rgb("eee"))[
  中文维基百科使用汉字书写，汉字是汉族或华人的共同文字，是中国大陆、新加坡、马来西亚、台湾、香港、澳门的唯一官方文字或官方文字之一。25.9%，而美国和荷兰则分別占13.7%及8.2%。近年來，中国大陆地区的维基百科编辑者正在迅速增加；
]


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))
      (content
        (text))))
  (parbreak))

====================
typst/justify/justify-japanese
====================

// Japanese typography is more complex, make sure it is at least a bit sensible.
#set page(width: auto)
#set par(justify: true)
#set text(lang: "ja", font: ("Libertinus Serif", "Noto Serif CJK JP"))
#rect(inset: 0pt, width: 80pt, fill: rgb("eee"))[
  ウィキペディア（英: Wikipedia）は、世界中のボランティアの共同作業によって執筆及び作成されるフリーの多言語インターネット百科事典である。主に寄付に依って活動している非営利団体「ウィキメディア財団」が所有・運営している。

  専門家によるオンライン百科事典プロジェクトNupedia（ヌーペディア）を前身として、2001年1月、ラリー・サンガーとジミー・ウェールズ（英: Jimmy Donal "Jimbo" Wales）により英語でプロジェクトが開始された。
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))
      (content
        (text)
        (parbreak)
        (text)
        (quote)
        (text)
        (quote)
        (text))))
  (parbreak))

====================
typst/justify/justify-whitespace-adjustment
====================

// Test punctuation whitespace adjustment
#set page(width: auto)
#set text(lang: "zh", font: "Noto Serif CJK SC")
#set par(justify: true)
#rect(inset: 0pt, width: 80pt, fill: rgb("eee"))[
  “引号测试”，还，

  《书名》《测试》下一行

  《书名》《测试》。
]

「『引号』」。“‘引号’”。


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (group
                (string))))))
      (content
        (text)
        (parbreak)
        (text)
        (parbreak)
        (text))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/justify/justify-variants
====================

// Test Variants of Mainland China, Hong Kong, and Japan.

// 17 characters a line.
#set page(width: 170pt + 10pt, margin: (x: 5pt))
#set text(lang: "zh", font: "Noto Serif CJK SC")
#set par(justify: true)

孔雀最早见于《山海经》中的《海内经》：“有孔雀。”东汉杨孚著《异物志》记载，岭南：“孔雀，其大如大雁而足高，毛皆有斑纹彩，捕而蓄之，拍手即舞。”

#set text(lang: "zh", region: "hk", font: "Noto Serif CJK TC")
孔雀最早见于《山海经》中的《海内经》：「有孔雀。」东汉杨孚著《异物志》记载，岭南：「孔雀，其大如大雁而足高，毛皆有斑纹彩，捕而蓄之，拍手即舞。」


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (number
                (unit))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak))

====================
typst/justify/justify-punctuation-adjustment
====================

// Test punctuation marks adjustment in justified paragraph.

// The test case includes the following scenarios:
// - Compression of punctuation marks at line start or line end
// - Adjustment of adjacent punctuation marks

#set page(width: 110pt + 10pt, margin: (x: 5pt))
#set text(lang: "zh", font: "Noto Serif CJK SC")
#set par(justify: true)

标注在字间的标点符号（乙式括号省略号以外）通常占一个汉字宽度，使其易于识别、适合配置及排版，有些排版风格完全不对标点宽度进行任何调整。但是为了让文字体裁更加紧凑易读，，，以及执行3.1.4 行首行尾禁则时，就需要对标点符号的宽度进行调整。是否调整取决于……


--------------------

(source_file
  (comment)
  (parbreak)
  (comment)
  (comment)
  (comment)
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (number
                (unit))))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/justify/justify-without-justifiables
====================

// Test breaking a line without justifiables.
#set par(justify: true)
#block(width: 1cm, fill: aqua, lorem(2))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number))))))
  (parbreak))

====================
typst/justify/issue-2419-justify-hanging-indent
====================

// Test that combination of justification and hanging indent doesn't result in
// an underfull first line.
#set par(hanging-indent: 2.5cm, justify: true)
#lorem(5)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/justify/issue-4651-justify-bad-bound
====================

// Test that overflow does not lead to bad bounds in paragraph optimization.
#set par(justify: true)
#block(width: 0pt)[A B]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text))))
  (parbreak))

====================
typst/justify/issue-5360-unnecessary-hyphenation
====================

// Test whether `Formal` would be in one line.
#set par(justify: true)
#table(columns: 1, [Formal])
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))))))

====================
typst/bidi/bidi-en-he-top-level
====================

// Test reordering with different top-level paragraph directions.
#let content = par[Text טֶקסט]
#text(lang: "he", content)
#text(lang: "de", content)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident))))
  (parbreak))

====================
typst/bidi/bidi-consecutive-embedded-ltr-runs
====================

// Test that consecutive, embedded LTR runs stay LTR.
// Here, we have two runs: "A" and italic "B".
#let content = par[أنت A#emph[B]مطرC]
#set text(font: ("PT Sans", "Noto Sans Arabic"))
#text(lang: "ar", content)
#text(lang: "de", content)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text))))
          (text)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident))))
  (parbreak))

====================
typst/bidi/bidi-consecutive-embedded-rtl-runs
====================

// Test that consecutive, embedded RTL runs stay RTL.
// Here, we have three runs: "גֶ", bold "שֶׁ", and "ם".
#let content = par[Aגֶ#strong[שֶׁ]םB]
#set text(font: ("Libertinus Serif", "Noto Serif Hebrew"))
#text(lang: "he", content)
#text(lang: "de", content)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (content
          (text)
          (code
            (call
              (ident)
              (content
                (text))))
          (text)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident))))
  (parbreak))

====================
typst/bidi/bidi-nesting
====================

// Test embedding up to level 4 with isolates.
#set text(dir: rtl)
א\u{2066}A\u{2067}Bב\u{2069}?


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text
    (escape)
    (escape)
    (escape))
  (parbreak))

====================
typst/bidi/bidi-manual-linebreak
====================

// Test hard line break (leads to two paragraphs in unicode-bidi).
#set text(lang: "ar", font: ("Noto Sans Arabic", "PT Sans"))
Life المطر هو الحياة \
الحياة تمطر is rain.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (text)
  (linebreak)
  (text)
  (parbreak))

====================
typst/bidi/bidi-spacing
====================

// Test spacing.
L #h(1cm) ריווחR \
Lריווח #h(1cm) R


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (parbreak))

====================
typst/bidi/bidi-obj
====================

// Test inline object.
#set text(lang: "he")
קרנפיםRh#box(image("/assets/images/rhino.png", height: 11pt))inoחיים


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/bidi/bidi-whitespace-reset
====================

// Test whether L1 whitespace resetting destroys stuff.
الغالب #h(70pt) ن#" "ة


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (string))
  (text)
  (parbreak))

====================
typst/bidi/bidi-explicit-dir
====================

// Test explicit dir
#set text(dir: rtl)
#text("8:00 - 9:00", dir: ltr) בבוקר
#linebreak()
ב #text("12:00 - 13:00", dir: ltr) בצהריים


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (ident)))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (ident)
      (group
        (string)
        (tagged
          (ident)
          (ident)))))
  (text)
  (parbreak))

====================
typst/bidi/bidi-raw
====================

// Mixing raw
#set text(lang: "he")
לדוג. `if a == b:` זה תנאי
#set raw(lang: "python")
לדוג. `if a == b:` זה תנאי

#show raw: set text(dir:rtl)
לתכנת בעברית `אם א == ב:`


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (raw_span
    (blob))
  (text)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (raw_span
    (blob))
  (text)
  (parbreak)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident)))))))
  (text)
  (raw_span
    (blob))
  (parbreak))

====================
typst/bidi/bidi-vertical
====================

// Test setting a vertical direction.
// Error: 16-19 text direction must be horizontal
#set text(dir: ttb)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak))

====================
typst/bidi/issue-1373-bidi-tofus
====================

// Test that shaping missing characters in both left-to-right and
// right-to-left directions does not cause a crash.
#"\u{590}\u{591}\u{592}\u{593}"

#"\u{30000}\u{30001}\u{30002}\u{30003}"


--------------------

(source_file
  (comment)
  (comment)
  (code
    (string
      (escape)
      (escape)
      (escape)
      (escape)))
  (parbreak)
  (code
    (string
      (escape)
      (escape)
      (escape)
      (escape)))
  (parbreak))

====================
typst/bidi/issue-5490-bidi-invalid-range
====================

#set text(lang: "he")
#set raw(lang: "python")
#set page(width: 240pt)
בדיקה האם מספר מתחלק במספר אחר. לדוגמה `if a % 2 == 0`


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (raw_span
    (blob))
  (parbreak))

====================
typst/bidi/issue-5490-bidi-invalid-range-2
====================

#table(
  columns: (1fr, 1fr),
  lines(6),
  [
    #text(lang: "ar")[مجرد نص مؤقت لأغراض العرض التوضيحي. ]
    #text(lang: "ar")[سلام]
  ],
)
--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (call
          (ident)
          (group
            (number)))
        (content
          (code
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))))
              (content
                (text))))
          (code
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))))
              (content
                (text)))))))))

====================
typst/overhang/overhang
====================

// Test hanging punctuation.
// TODO: This test was broken at some point.
#set page(width: 130pt, margin: 15pt)
#set par(justify: true, linebreaks: "simple")
#set text(size: 9pt)
#rect(inset: 0pt, fill: rgb(0, 0, 0, 0), width: 100%)[
  This is a little bit of text that builds up to
  hang-ing hyphens and dash
--------------------



====================
typst/overhang/overhang-lone
====================

// Test that lone punctuation doesn't overhang into the margin.
#set page(margin: 0pt)
#set align(end)
#set text(dir: rtl)
:
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (text))

====================
typst/shaping/shaping-script-separation
====================

// Test separation by script.
#set text(font: ("Libertinus Serif", "IBM Plex Sans Devanagari"))
ABCअपार्टमेंट

// This is how it should look like.
अपार्टमेंट

// This (without the spaces) is how it would look
// if we didn't separate by script.
अ पा र् ट में ट


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (comment)
  (text)
  (parbreak))

====================
typst/shaping/shaping-forced-script-font-feature-inhibited
====================

// A forced `latn` script inhibits Devanagari font features.
#set text(font: ("Libertinus Serif", "IBM Plex Sans Devanagari"), script: "latn")
ABCअपार्टमेंट


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak))

====================
typst/shaping/shaping-forced-script-font-feature-enabled
====================

// A forced `deva` script enables Devanagari font features.
#set text(font: ("Libertinus Serif", "IBM Plex Sans Devanagari"), script: "deva")
ABCअपार्टमेंट


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))
          (tagged
            (ident)
            (string))))))
  (text)
  (parbreak))

====================
typst/shaping/issue-rtl-safe-to-break-panic
====================

// Test that RTL safe-to-break doesn't panic even though newline
// doesn't exist in shaping output.
#set text(dir: rtl, font: "Noto Serif Hebrew")
\ ט


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (string))))))
  (linebreak)
  (text)
  (parbreak))

====================
typst/shaping/shaping-font-fallback
====================

// Font fallback for emoji.
A😀B

// Font fallback for entire text.
دع النص يمطر عليك

// Font fallback in right-to-left text.
ب🐈😀سم

// Multi-layer font fallback.
Aب😀🏞سمB

// Font fallback with composed emojis and multiple fonts.
01️⃣2

// Tofus are rendered with the first font.
A🐈ዲሞB


--------------------

(source_file
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak))

====================
typst/shaping/shaping-emoji-basic
====================

// This should form a three-member family.
👩‍👩‍👦

// This should form a pride flag.
🏳️‍🌈

// Skin tone modifier should be applied.
👍🏿

// This should be a 1 in a box.
1️⃣


--------------------

(source_file
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak)
  (comment)
  (text)
  (parbreak))

====================
typst/shaping/shaping-emoji-bad-zwj
====================

// These two shouldn't be affected by a zero-width joiner.
🏞‍🌋
--------------------

(source_file
  (comment)
  (text))

====================
typst/baseline/baseline-text
====================

Hi #text(1.5em)[You], #text(0.75em)[how are you?]

Our cockatoo was one of the
#text(baseline: -0.2em)[#box(circle(radius: 2pt)) first]
#text(baseline: 0.2em)[birds #box(circle(radius: 2pt))]
that ever learned to mimic a human voice.


--------------------

(source_file
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (number
            (unit))))
      (content
        (text))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (number
            (unit))))
      (content
        (text))))
  (parbreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))))
      (content
        (code
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit))))))))
        (text))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (text)
        (code
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))))))
  (text)
  (parbreak))

====================
typst/baseline/baseline-box
====================

Hey #box(baseline: 40%, image("/assets/images/tiger.jpg", width: 1.5cm)) there!


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/baseline/issue-2214-baseline-math
====================

// The math content should also be affected by the TextElem baseline.
hello #text(baseline: -5pt)[123 #sym.WW\orld]\
hello #text(baseline: -5pt)[$123 WW#text[or]$ld]\
--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))))
      (content
        (text)
        (code
          (field
            (ident)
            (ident)))
        (text
          (escape)))))
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))))
      (content
        (math
          (formula
            (number)
            (ident)
            (code
              (call
                (ident)
                (content
                  (text))))))
        (text))))
  (linebreak))

====================
typst/text/text-kerning
====================

// Test turning kerning off.
#text(kerning: true)[Tq] \
#text(kerning: false)[Tq]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (linebreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-alternates-and-stylistic-sets
====================

// Test alternates and stylistic sets.
#set text(font: "IBM Plex Serif")
a vs #text(alternates: true)[a] \
ß vs #text(stylistic-set: 5)[ß] \
10 years ago vs #text(stylistic-set: (1, 2, 3))[10 years ago]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))
      (content
        (text))))
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number)
              (number)
              (number)))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-ligatures
====================

// Test text turning off (standard) ligatures of the font.
#text(ligatures: false)[fi Qu] vs fi Qu \
// Test text turning on historical ligatures of the font.
abstract vs #text(historical-ligatures: true)[abstract] \
// Test text turning on discretionary ligatures of the font.
waltz vs #text(discretionary-ligatures: true)[waltz]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (text)
  (linebreak)
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (linebreak)
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-number-type
====================

// Test number type.
#set text(number-type: "old-style")
0123456789 \
#text(number-type: auto)[0123456789]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (linebreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-number-width
====================

// Test number width.
#text(number-width: "proportional")[0123456789] \
#text(number-width: "tabular")[3456789123] \
#text(number-width: "tabular")[0123456789]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (linebreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (linebreak)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-slashed-zero-and-fractions
====================

// Test extra number stuff.
#set text(font: "IBM Plex Serif")
0 vs. #text(slashed-zero: true)[0] \
1/2 vs. #text(fractions: true)[1/2]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-features
====================

// Test raw features array or dictionary.
#text(features: ("smcp",))[Smcp] \
fi vs. #text(features: (liga: 0))[No fi]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)))))
      (content
        (text))))
  (linebreak)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number))))))
      (content
        (text))))
  (parbreak))

====================
typst/text/text-stylistic-set-bad-type
====================

// Error: 26-31 expected none, integer, or array, found boolean
#set text(stylistic-set: false)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak))

====================
typst/text/text-stylistic-set-out-of-bounds
====================

// Error: 26-28 stylistic set must be between 1 and 20
#set text(stylistic-set: 25)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/text/text-number-type-bad
====================

// Error: 24-25 expected "lining", "old-style", or auto, found integer
#set text(number-type: 2)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak))

====================
typst/text/text-features-bad
====================

// Error: 21-26 expected array or dictionary, found boolean
#set text(features: false)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (parbreak))

====================
typst/text/text-features-bad-nested-type
====================

// Error: 21-35 expected string, found boolean
#set text(features: ("tag", false))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (bool)))))))
  (parbreak))

====================
typst/text/text-tracking-negative
====================

// Test tracking.
#set text(tracking: -0.01em)
I saw Zoe yӛsterday, on the tram.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (sign
              (number
                (unit))))))))
  (text)
  (parbreak))

====================
typst/text/text-tracking-changed-temporarily
====================

// Test tracking for only part of paragraph.
I'm in#text(tracking: 0.15em + 1.5pt)[ spaace]!


--------------------

(source_file
  (comment)
  (text)
  (quote)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (number
                (unit))))))
      (content
        (text))))
  (text)
  (parbreak))

====================
typst/text/text-tracking-mark-placement
====================

// Test that tracking doesn't disrupt mark placement.
#set text(font: ("PT Sans", "Noto Serif Hebrew"))
#set text(tracking: 0.3em)
טֶקסט


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (string)
              (string)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (parbreak))

====================
typst/text/text-tracking-arabic
====================

// Test tracking in arabic text (makes no sense whatsoever)
#set text(tracking: 0.3em)
النص


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (parbreak))

====================
typst/text/text-spacing
====================

// Test word spacing.
#set text(spacing: 1em)
My text has spaces.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (parbreak))

====================
typst/text/text-spacing-relative
====================

// Test word spacing relative to the font's space width.
#set text(spacing: 50% + 1pt)
This is tight.
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (number
                (unit))
              (number
                (unit))))))))
  (text))

====================
typst/positioning/grid-cell-show-x-y
====================

#{
  show grid.cell: it => (it.x, it.y)
  grid(
    columns: 2,
    inset: 5pt,
    fill: aqua,
    gutter: 3pt,
    [Hello], [World],
    [Sweet], [Home]
  )
}
#{
  show table.cell: it => pad(rest: it.inset)[#(it.x, it.y)]
  table(
    columns: 2,
    gutter: 3pt,
    [Hello], [World],
    [Sweet], [Home]
  )
}


--------------------

(source_file
  (code
    (block
      (show
        (field
          (ident)
          (ident))
        (lambda
          (ident)
          (group
            (field
              (ident)
              (ident))
            (field
              (ident)
              (ident)))))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (code
    (block
      (show
        (field
          (ident)
          (ident))
        (lambda
          (ident)
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (field
                    (ident)
                    (ident)))))
            (content
              (code
                (group
                  (field
                    (ident)
                    (ident))
                  (field
                    (ident)
                    (ident))))))))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number
              (unit)))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-cell-position-out-of-order
====================

// Positioning cells in a different order than they appear
#grid(
  columns: 2,
  [A], [B],
  grid.cell(x: 1, y: 2)[C], grid.cell(x: 0, y: 2)[D],
  grid.cell(x: 1, y: 1)[E], grid.cell(x: 0, y: 1)[F],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-cell-position-extra-rows
====================

// Creating more rows by positioning out of bounds
#grid(
  columns: 3,
  rows: 1.5em,
  inset: 5pt,
  fill: (x, y) => if (x, y) == (0, 0) { blue } else if (x, y) == (2, 3) { red } else { green },
  [A],
  grid.cell(x: 2, y: 3)[B]
)

#table(
  columns: (3em, 1em, 3em),
  rows: 1.5em,
  inset: (top: 0pt, bottom: 0pt, rest: 5pt),
  fill: (x, y) => if (x, y) == (0, 0) { blue } else if (x, y) == (2, 3) { red } else { green },
  align: (x, y) => (left, center, right).at(x),
  [A],
  table.cell(x: 2, y: 3)[B]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (cmp
                (group
                  (ident)
                  (ident))
                (group
                  (number)
                  (number)))
              (block
                (ident))
              (branch
                (cmp
                  (group
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)))
                (block
                  (ident))
                (block
                  (ident))))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (cmp
                (group
                  (ident)
                  (ident))
                (group
                  (number)
                  (number)))
              (block
                (ident))
              (branch
                (cmp
                  (group
                    (ident)
                    (ident))
                  (group
                    (number)
                    (number)))
                (block
                  (ident))
                (block
                  (ident))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident)
                  (ident))
                (ident))
              (group
                (ident)))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-cell-position-collide
====================

// Error: 3:3-3:42 attempted to place a second cell at column 0, row 0
// Hint: 3:3-3:42 try specifying your cells in a different order
#grid(
  [A],
  grid.cell(x: 0, y: 0)[This shall error]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/table-cell-position-collide
====================

// Error: 3:3-3:43 attempted to place a second cell at column 0, row 0
// Hint: 3:3-3:43 try specifying your cells in a different order
#table(
  [A],
  table.cell(x: 0, y: 0)[This shall error]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-cell-position-automatic-skip-manual
====================

// Automatic position cell skips custom position cell
#grid(
  grid.cell(x: 0, y: 0)[This shall not error],
  [A]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/positioning/grid-cell-position-x-out-of-bounds
====================

// Error: 4:3-4:36 cell could not be placed at invalid column 2
#grid(
  columns: 2,
  [A],
  grid.cell(x: 2)[This shall error]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-cell-position-partial
====================

// Partial positioning
#grid(
  columns: 3,
  rows: 1.5em,
  inset: 5pt,
  fill: aqua,
  [A], grid.cell(y: 1, fill: green)[B], [C], grid.cell(x: auto, y: 1, fill: green)[D], [E],
  grid.cell(y: 2, fill: green)[F], grid.cell(x: 0, fill: orange)[G], grid.cell(x: 0, y: auto, fill: orange)[H],
  grid.cell(x: 1, fill: orange)[I]
)

#table(
  columns: 3,
  rows: 1.5em,
  inset: 5pt,
  fill: aqua,
  [A], table.cell(y: 1, fill: green)[B], [C], table.cell(x: auto, y: 1, fill: green)[D], [E],
  table.cell(y: 2, fill: green)[F], table.cell(x: 0, fill: orange)[G], table.cell(x: 0, y: auto, fill: orange)[H],
  table.cell(x: 1, fill: orange)[I]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (auto))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (auto))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (auto))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (auto))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-cell-position-partial-collide
====================

// Error: 4:3-4:21 cell could not be placed in row 0 because it was full
// Hint: 4:3-4:21 try specifying your cells in a different order
#grid(
  columns: 2,
  [A], [B],
  grid.cell(y: 0)[C]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/table-cell-position-partial-collide
====================

// Error: 4:3-4:22 cell could not be placed in row 0 because it was full
// Hint: 4:3-4:22 try specifying your cells in a different order
#table(
  columns: 2,
  [A], [B],
  table.cell(y: 0)[C]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-calendar
====================

#set page(width: auto)
#show grid.cell: it => {
  if it.y == 0 {
    set text(white)
    strong(it)
  } else {
    // For the second row and beyond, we will write the day number for each
    // cell.

    // In general, a cell's index is given by cell.x + columns * cell.y.
    // Days start in the second grid row, so we subtract 1 row.
    // But the first day is day 1, not day 0, so we add 1.
    let day = it.x + 7 * (it.y - 1) + 1
    if day <= 31 {
      // Place the day's number at the top left of the cell.
      // Only if the day is valid for this month (not 32 or higher).
      place(top + left, dx: 2pt, dy: 2pt, text(8pt, red.darken(40%))[#day])
    }
    it
  }
}

#grid(
  fill: (x, y) => if y == 0 { gray.darken(50%) },
  columns: (30pt,) * 7,
  rows: (auto, 30pt),
  // Events will be written at the bottom of each day square.
  align: bottom,
  inset: 5pt,
  stroke: (thickness: 0.5pt, dash: "densely-dotted"),

  [Sun], [Mon], [Tue], [Wed], [Thu], [Fri], [Sat],

  // This event will occur on the first Friday (sixth column).
  grid.cell(x: 5, fill: yellow.darken(10%))[Call],

  // This event will occur every Monday (second column).
  // We have to repeat it 5 times so it occurs every week.
  ..(grid.cell(x: 1, fill: red.lighten(50%))[Meet],) * 5,

  // This event will occur at day 19.
  grid.cell(x: 4, y: 3, fill: orange.lighten(25%))[Talk],

  // These events will occur at the second week, where available.
  grid.cell(y: 2, fill: aqua)[Chat],
  grid.cell(y: 2, fill: aqua)[Walk],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (branch
            (cmp
              (field
                (ident)
                (ident))
              (number))
            (block
              (set
                (call
                  (ident)
                  (group
                    (ident))))
              (call
                (ident)
                (group
                  (ident))))
            (block
              (comment)
              (comment)
              (comment)
              (comment)
              (comment)
              (let
                (ident)
                (add
                  (add
                    (field
                      (ident)
                      (ident))
                    (mul
                      (number)
                      (group
                        (sub
                          (field
                            (ident)
                            (ident))
                          (number)))))
                  (number)))
              (branch
                (cmp
                  (ident)
                  (number))
                (block
                  (comment)
                  (comment)
                  (call
                    (ident)
                    (group
                      (add
                        (ident)
                        (ident))
                      (tagged
                        (ident)
                        (number
                          (unit)))
                      (tagged
                        (ident)
                        (number
                          (unit)))
                      (call
                        (call
                          (ident)
                          (group
                            (number
                              (unit))
                            (call
                              (field
                                (ident)
                                (ident))
                              (group
                                (number
                                  (unit))))))
                        (content
                          (code
                            (ident))))))))
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (cmp
                (ident)
                (number))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))))
        (comment)
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (string))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (comment)
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (comment)
        (comment)
        (elude
          (mul
            (group
              (call
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (number))
                    (tagged
                      (ident)
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (number
                            (unit)))))))
                (content
                  (text))))
            (number)))
        (comment)
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (comment)
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/positioning/grid-exam
====================

#set page(width: auto)
#show table.cell: it => {
  if it.x == 0 or it.y == 0 {
    set text(white)
    strong(it)
  } else if it.body == [] {
    // Replace empty cells with 'N/A'
    pad(rest: it.inset)[_N/A_]
  } else {
    it
  }
}

#table(
  fill: (x, y) => if x == 0 or y == 0 { gray.darken(50%) },
  columns: 4,
  [], [Exam 1], [Exam 2], [Exam 3],
  ..([John], [Mary], [Jake], [Robert]).map(table.cell.with(x: 0)),

  // Mary got grade A on Exam 3.
  table.cell(x: 3, y: 2, fill: green)[A],

  // Everyone got grade A on Exam 2.
  ..(table.cell(x: 2, fill: green)[A],) * 4,

  // Robert got grade B on other exams.
  ..(table.cell(y: 4, fill: aqua)[B],) * 2,
)
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (branch
            (or
              (cmp
                (field
                  (ident)
                  (ident))
                (number))
              (cmp
                (field
                  (ident)
                  (ident))
                (number)))
            (block
              (set
                (call
                  (ident)
                  (group
                    (ident))))
              (call
                (ident)
                (group
                  (ident))))
            (branch
              (cmp
                (field
                  (ident)
                  (ident))
                (content))
              (block
                (comment)
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (field
                          (ident)
                          (ident)))))
                  (content
                    (emph
                      (text)))))
              (block
                (ident))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (or
                (cmp
                  (ident)
                  (number))
                (cmp
                  (ident)
                  (number)))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number))
        (content)
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (elude
          (call
            (field
              (group
                (content
                  (text))
                (content
                  (text))
                (content
                  (text))
                (content
                  (text)))
              (ident))
            (group
              (call
                (field
                  (field
                    (ident)
                    (ident))
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number)))))))
        (comment)
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (comment)
        (elude
          (mul
            (group
              (call
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (number))
                    (tagged
                      (ident)
                      (ident))))
                (content
                  (text))))
            (number)))
        (comment)
        (elude
          (mul
            (group
              (call
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (number))
                    (tagged
                      (ident)
                      (ident))))
                (content
                  (text))))
            (number)))))))

====================
typst/colspan/grid-colspan
====================

#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  grid.cell(colspan: 4)[*Full Header*],
  grid.cell(colspan: 2, fill: orange)[*Half*],
  grid.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], grid.cell(colspan: 3, fill: orange.darken(10%))[6],
  grid.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], grid.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)

#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  table.cell(colspan: 4)[*Full Header*],
  table.cell(colspan: 2, fill: orange)[*Half*],
  table.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], table.cell(colspan: 3, fill: orange.darken(10%))[6],
  table.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], table.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/colspan/grid-colspan-gutter
====================

#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  grid.cell(colspan: 4)[*Full Header*],
  grid.cell(colspan: 2, fill: orange)[*Half*],
  grid.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], grid.cell(colspan: 3, fill: orange.darken(10%))[6],
  grid.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], grid.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)

#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  table.cell(colspan: 4)[*Full Header*],
  table.cell(colspan: 2, fill: orange)[*Half*],
  table.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], table.cell(colspan: 3, fill: orange.darken(10%))[6],
  table.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], table.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/colspan/grid-colspan-thick-stroke
====================

#set page(width: 300pt)
#table(
  columns: (2em, 2em, auto, auto),
  stroke: 5pt,
  [A], [B], [C], [D],
  table.cell(colspan: 4, lorem(20)),
  [A], table.cell(colspan: 2)[BCBCBCBC], [D]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)
            (auto)))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/colspan/grid-colspan-out-of-bounds
====================

// Error: 3:8-3:32 cell's colspan would cause it to exceed the available column(s)
// Hint: 3:8-3:32 try placing the cell in another position or reducing its colspan
#grid(
  columns: 3,
  [a], grid.cell(colspan: 3)[b]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/colspan/grid-colspan-overlap
====================

// Error: 4:8-4:32 cell would span a previously placed cell at column 2, row 0
// Hint: 4:8-4:32 try specifying your cells in a different order or reducing the cell's rowspan or colspan
#grid(
  columns: 3,
  grid.cell(x: 2, y: 0)[x],
  [a], grid.cell(colspan: 2)[b]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/colspan/grid-colspan-over-all-fr-columns
====================

// Colspan over all fractional columns shouldn't expand auto columns on finite pages
#table(
  columns: (1fr, 1fr, auto),
  [A], [B], [C],
  [D], [E], [F]
)
#table(
  columns: (1fr, 1fr, auto),
  table.cell(colspan: 3, lorem(8)),
  [A], [B], [C],
  [D], [E], [F]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/colspan/grid-colspan-over-some-fr-columns
====================

// Colspan over only some fractional columns will not trigger the heuristic, and
// the auto column will expand more than it should. The table looks off, as a result.
#table(
  columns: (1fr, 1fr, auto),
  [], table.cell(colspan: 2, lorem(8)),
  [A], [B], [C],
  [D], [E], [F]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (content)
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/colspan/grid-colspan-over-all-fr-columns-page-width-auto
====================

// On infinite pages, colspan over all fractional columns SHOULD expand auto columns
#set page(width: auto)
#table(
  columns: (1fr, 1fr, auto),
  [A], [B], [C],
  [D], [E], [F]
)
#table(
  columns: (1fr, 1fr, auto),
  table.cell(colspan: 3, lorem(8)),
  [A], [B], [C],
  [D], [E], [F]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/colspan/grid-colspan-multiple-regions
====================

// Test multiple regions
#set page(height: 5em)
#grid(
  stroke: red,
  fill: aqua,
  columns: 4,
  [a], [b], [c], [d],
  [a], grid.cell(colspan: 2)[e, f, g, h, i], [f],
  [e], [g], grid.cell(colspan: 2)[eee\ e\ e\ e],
  grid.cell(colspan: 4)[eeee e e e]
)
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))))))

====================
typst/styling/grid-fill-func
====================

#set page(height: 70pt)
#set grid(fill: (x, y) => if calc.even(x + y) { rgb("aaa") })

#grid(
  columns: (1fr,) * 3,
  stroke: 2pt + rgb("333"),
  [A], [B], [C], [], [], [D \ E \ F \ \ \ G], [H],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (lambda
              (group
                (ident)
                (ident))
              (branch
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (add
                      (ident)
                      (ident))))
                (block
                  (call
                    (ident)
                    (group
                      (string)))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content)
        (content)
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)
          (linebreak)
          (linebreak)
          (linebreak)
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/styling/grid-stroke-none
====================

#grid(columns: 3, stroke: none, fill: green, [A], [B], [C])


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (none))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/styling/grid-align
====================

// Test general alignment.
#grid(
  columns: 3,
  align: left,
  [Hello], [Hello], [Hello],
  [A], [B], [C],
)

// Test alignment with a function.
#grid(
  columns: 3,
  align: (x, y) => (left, center, right).at(x),
  [Hello], [Hello], [Hello],
  [A], [B], [C],
)

// Test alignment with array.
#grid(
  columns: (1fr, 1fr, 1fr),
  align: (left, center, right),
  [A], [B], [C]
)

// Test empty array.
#set align(center)
#grid(
  columns: (1fr, 1fr, 1fr),
  align: (),
  [A], [B], [C]
)

a


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident)
                  (ident))
                (ident))
              (group
                (ident)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (ident)
            (ident)
            (ident)))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/styling/grid-inset
====================

// Test inset.
#grid(
  columns: (1fr,) * 3,
  stroke: 2pt + rgb("333"),
  inset: 5pt,
  [A], [B], [C], [], [], [D \ E \ F \ \ \ G], [H],
)

#grid(
  columns: 3,
  inset: 10pt,
  fill: blue,
  [A], [B], [C]
)

#grid(
  columns: 3,
  inset: (y: 10pt),
  [A], [B], [C]
)

#grid(
  columns: 3,
  inset: (left: 20pt, rest: 10pt),
  stroke: 3pt + red,
  [A], [B], [C]
)

#grid(
  columns: 2,
  inset: (
    left: 20pt,
    right: 5pt,
    top: 10pt,
    bottom: 3pt,
  ),
  [A],
  [B],
)

#grid(
  columns: 3,
  fill: (x, y) => (if y == 0 { aqua } else { orange }).darken(x * 15%),
  inset: (x, y) => (left: if x == 0 { 0pt } else { 5pt }, right: if x == 0 { 5pt } else { 0pt }, y: if y == 0 { 0pt } else { 5pt }),
  [A], [B], [C],
  [A], [B], [C],
)

#grid(
  columns: 3,
  inset: (0pt, 5pt, 10pt),
  fill: (x, _) => aqua.darken(x * 15%),
  [A], [B], [C],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content)
        (content)
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)
          (linebreak)
          (linebreak)
          (linebreak)
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (tagged
          (ident)
          (add
            (number
              (unit))
            (ident)))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (branch
                    (cmp
                      (ident)
                      (number))
                    (block
                      (ident))
                    (block
                      (ident))))
                (ident))
              (group
                (mul
                  (ident)
                  (number
                    (unit)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (branch
                  (cmp
                    (ident)
                    (number))
                  (block
                    (number
                      (unit)))
                  (block
                    (number
                      (unit)))))
              (tagged
                (ident)
                (branch
                  (cmp
                    (ident)
                    (number))
                  (block
                    (number
                      (unit)))
                  (block
                    (number
                      (unit)))))
              (tagged
                (ident)
                (branch
                  (cmp
                    (ident)
                    (number))
                  (block
                    (number
                      (unit)))
                  (block
                    (number
                      (unit))))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (ident)
                (ident))
              (group
                (mul
                  (ident)
                  (number
                    (unit)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/styling/grid-inset-folding
====================

// Test inset folding
#set grid(inset: 10pt)
#set grid(inset: (left: 0pt))

#grid(
  fill: red,
  inset: (right: 0pt),
  grid.cell(inset: (top: 0pt))[a]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/styling/grid-funcs-gutter
====================

// Test interaction with gutters.
#grid(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)

#grid(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  row-gutter: 5pt,
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)

#grid(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  column-gutter: 5pt,
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)

#grid(
  columns: (3em, 3em),
  fill: (x, y) => (red, blue).at(calc.rem(x, 2)),
  align: (x, y) => (left, right).at(calc.rem(y, 2)),
  gutter: 5pt,
  [A], [B],
  [C], [D],
  [E], [F],
  [G], [H]
)
--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (ident)
                    (number)))))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))))))

====================
typst/rowspan/grid-rowspan
====================

#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  grid.cell(rowspan: 2, fill: orange)[*Left*],
  [Right A], [Right A], [Right A],
  [Right B], grid.cell(colspan: 2, rowspan: 2, fill: orange.darken(10%))[B Wide],
  [Left A], [Left A],
  [Left B], [Left B], grid.cell(colspan: 2, rowspan: 3, fill: orange)[Wide and Long]
)

#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  table.cell(rowspan: 2, fill: orange)[*Left*],
  [Right A], [Right A], [Right A],
  [Right B], table.cell(colspan: 2, rowspan: 2, fill: orange.darken(10%))[B Wide],
  [Left A], [Left A],
  [Left B], [Left B], table.cell(colspan: 2, rowspan: 3, fill: orange)[Wide and Long]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-gutter
====================

#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  grid.cell(rowspan: 2, fill: orange)[*Left*],
  [Right A], [Right A], [Right A],
  [Right B], grid.cell(colspan: 2, rowspan: 2, fill: orange.darken(10%))[B Wide],
  [Left A], [Left A],
  [Left B], [Left B], grid.cell(colspan: 2, rowspan: 3, fill: orange)[Wide and Long]
)

#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  table.cell(rowspan: 2, fill: orange)[*Left*],
  [Right A], [Right A], [Right A],
  [Right B], table.cell(colspan: 2, rowspan: 2, fill: orange.darken(10%))[B Wide],
  [Left A], [Left A],
  [Left B], [Left B], table.cell(colspan: 2, rowspan: 3, fill: orange)[Wide and Long]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-fixed-size
====================

// Fixed-size rows
#set page(height: 10em)
#grid(
  columns: 2,
  rows: 1.5em,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  grid.cell(rowspan: 3)[R1], [b],
  [c],
  [d],
  [e], [f],
  grid.cell(rowspan: 5)[R2], [h],
  [i],
  [j],
  [k],
  [l],
  [m], [n]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-cell-coordinates
====================

// Cell coordinate tests
#set page(height: 10em)
#show table.cell: it => [(#it.x, #it.y)]
#table(
  columns: 3,
  fill: red,
  [a], [b], table.cell(rowspan: 2)[c],
  table.cell(colspan: 2)[d],
  table.cell(colspan: 3, rowspan: 10)[a],
  table.cell(colspan: 2)[b],
)
#table(
  columns: 3,
  gutter: 3pt,
  fill: red,
  [a], [b], table.cell(rowspan: 2)[c],
  table.cell(colspan: 2)[d],
  table.cell(colspan: 3, rowspan: 9)[a],
  table.cell(colspan: 2)[b],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (content
          (text)
          (code
            (field
              (ident)
              (ident)))
          (text)
          (code
            (field
              (ident)
              (ident)))
          (text)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-over-auto-row
====================

// Auto row expansion
#set page(height: 10em)
#grid(
  columns: (1em, 1em),
  rows: (0.5em, 0.5em, auto),
  fill: orange,
  gutter: 3pt,
  grid.cell(rowspan: 4, [x x x x] + place(bottom)[*Bot*]),
  [a],
  [b],
  [c],
  [d]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (add
              (content
                (text))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-excessive
====================

// Excessive rowspan (no gutter)
#set page(height: 10em)
#table(
  columns: 4,
  fill: red,
  [a], [b], table.cell(rowspan: 2)[c], [d],
  table.cell(colspan: 2, stroke: (bottom: aqua + 2pt))[e], table.cell(stroke: (bottom: aqua))[f],
  table.cell(colspan: 2, rowspan: 10)[R1], table.cell(colspan: 2, rowspan: 10)[R2],
  [b],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (add
                      (ident)
                      (number
                        (unit))))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-excessive-gutter
====================

// Excessive rowspan (with gutter)
#set page(height: 10em)
#table(
  columns: 4,
  gutter: 3pt,
  fill: red,
  [a], [b], table.cell(rowspan: 2)[c], [d],
  table.cell(colspan: 2, stroke: (bottom: aqua + 2pt))[e], table.cell(stroke: (bottom: aqua))[f],
  table.cell(colspan: 2, rowspan: 10)[R1], table.cell(colspan: 2, rowspan: 10)[R2],
  [b],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (add
                      (ident)
                      (number
                        (unit))))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-over-fr-row-at-end
====================

// Fractional rows
// They cause the auto row to expand more than needed.
#set page(height: 10em)
#grid(
  fill: red,
  gutter: 3pt,
  columns: 3,
  rows: (1em, auto, 1fr),
  [a], [b], grid.cell(rowspan: 3, block(height: 4em, width: 1em, fill: orange)),
  [c], [d],
  [e], [f]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)
            (number
              (unit))))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-over-fr-row-at-start
====================

// Fractional rows
#set page(height: 10em)
#grid(
  fill: red,
  gutter: 3pt,
  columns: 3,
  rows: (1fr, auto, 1em),
  [a], [b], grid.cell(rowspan: 3, block(height: 4em, width: 1em, fill: orange)),
  [c], [d],
  [e], [f]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)
            (number
              (unit))))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-cell-order
====================

// Cell order
#let count = counter("count")
#show grid.cell: it => {
  count.step()
  context count.display()
}

#grid(
  columns: (2em,) * 3,
  stroke: aqua,
  rows: 1.2em,
  fill: (x, y) => if calc.odd(x + y) { red } else { orange },
  [a], grid.cell(rowspan: 2)[b], grid.cell(rowspan: 2)[c],
  [d],
  grid.cell(rowspan: 2)[f], [g], [h],
  [i], [j],
  [k], [l], [m],
  grid.cell(rowspan: 2)[n], [o], [p],
  [q], [r],
  [s], [t], [u]
)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (call
            (field
              (ident)
              (ident))
            (group))
          (context
            (call
              (field
                (ident)
                (ident))
              (group)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (ident))
              (block
                (ident)))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-unbreakable-1
====================

#table(
    columns: 3,
    rows: (auto, auto, auto, 2em),
    gutter: 3pt,
    table.cell(rowspan: 4)[a \ b\ c\ d\ e], [c], [d],
    [e], table.cell(breakable: false, rowspan: 2)[f],
    [g]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (auto)
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (bool))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-unbreakable-2
====================

// Test cell breakability
#show grid.cell: it => {
  test(it.breakable, (it.x, it.y) != (0, 6) and (it.y in (2, 5, 6) or (it.x, it.y) in ((0, 1), (2, 3), (1, 7))))
  it.breakable
}
#grid(
  columns: 3,
  rows: (6pt, 1fr, auto, 1%, 1em, auto, auto, 0.2in),
  row-gutter: (0pt, 0pt, 0pt, auto),
  [a], [b], [c],
  grid.cell(rowspan: 3)[d], [e], [f],
  [g], [h],
  [i], grid.cell(rowspan: 2)[j],
  [k],
  grid.cell(y: 5)[l],
  grid.cell(y: 6, breakable: false)[m], grid.cell(y: 6, breakable: true)[n],
  grid.cell(y: 7, breakable: false)[o], grid.cell(y: 7, breakable: true)[p], grid.cell(y: 7, breakable: auto)[q]
)


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))
              (and
                (cmp
                  (group
                    (field
                      (ident)
                      (ident))
                    (field
                      (ident)
                      (ident)))
                  (group
                    (number)
                    (number)))
                (group
                  (or
                    (in
                      (field
                        (ident)
                        (ident))
                      (group
                        (number)
                        (number)
                        (number)))
                    (in
                      (group
                        (field
                          (ident)
                          (ident))
                        (field
                          (ident)
                          (ident)))
                      (group
                        (group
                          (number)
                          (number))
                        (group
                          (number)
                          (number))
                        (group
                          (number)
                          (number)))))))))
          (field
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (bool))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (bool))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (bool))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (bool))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (auto))))
          (content
            (text))))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-in-all-columns-stroke
====================

#table(
  columns: 2,
  table.cell(stroke: (bottom: red))[a], [b],
  table.hline(stroke: green),
  table.cell(stroke: (top: yellow, left: green, right: aqua, bottom: blue), colspan: 1, rowspan: 2)[d], table.cell(colspan: 1, rowspan: 2)[e],
  [f],
  [g]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (content
            (text)))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-in-all-columns-stroke-gutter
====================

#table(
  columns: 2,
  gutter: 3pt,
  table.cell(stroke: (bottom: red))[a], [b],
  table.hline(stroke: green),
  table.cell(stroke: (top: yellow, left: green, right: aqua, bottom: blue), colspan: 1, rowspan: 2)[d], table.cell(colspan: 1, rowspan: 2)[e],
  [f],
  [g]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (content
            (text)))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-block-full-height
====================

// Block below shouldn't expand to the end of the page, but stay within its
// rows' boundaries.
#set page(height: 9em)
#table(
  rows: (1em, 1em, 1fr, 1fr, auto),
  table.cell(rowspan: 2, block(width: 2em, height: 100%, fill: red)),
  table.cell(rowspan: 2, block(width: 2em, height: 100%, fill: red)),
  [a]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-block-overflow
====================

#set page(height: 7em)
#table(
  columns: 3,
  [], [], table.cell(breakable: true, rowspan: 2, block(width: 2em, height: 100%, fill: red)),
  table.cell(breakable: false, block(width: 2em, height: 100%, fill: red)),
  table.cell(breakable: false, rowspan: 2, block(width: 2em, height: 100%, fill: red)),
)

// Rowspan split tests


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content)
        (content)
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (bool))
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (bool))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (bool))
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak)
  (comment)
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-1
====================

#set page(height: 10em)
#table(
  columns: 2,
  rows: (auto, auto, 3em),
  fill: red,
  [a], table.cell(rowspan: 3, block(width: 50%, height: 10em, fill: orange) + place(bottom)[*ZD*]),
  [e],
  [f]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (add
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-2
====================

#set page(height: 10em)
#table(
  columns: 2,
  rows: (auto, auto, 3em),
  row-gutter: 1em,
  fill: red,
  [a], table.cell(rowspan: 3, block(width: 50%, height: 10em, fill: orange) + place(bottom)[*ZD*]),
  [e],
  [f]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (add
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-3
====================

#set page(height: 5em)
#table(
  columns: 2,
  fill: red,
  inset: 0pt,
  table.cell(fill: orange, rowspan: 10, place(bottom)[*Z*] + [x\ ] * 10 + place(bottom)[*ZZ*]),
  ..([y],) * 10,
  [a], [b],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))
            (add
              (add
                (call
                  (call
                    (ident)
                    (group
                      (ident)))
                  (content
                    (strong
                      (text))))
                (mul
                  (content
                    (text)
                    (linebreak))
                  (number)))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (elude
          (mul
            (group
              (content
                (text)))
            (number)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-4
====================

#set page(height: 5em)
#table(
  columns: 2,
  fill: red,
  inset: 0pt,
  gutter: 2pt,
  table.cell(fill: orange, rowspan: 10, place(bottom)[*Z*] + [x\ ] * 10 + place(bottom)[*ZZ*]),
  ..([y],) * 10,
  [a], [b],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))
            (add
              (add
                (call
                  (call
                    (ident)
                    (group
                      (ident)))
                  (content
                    (strong
                      (text))))
                (mul
                  (content
                    (text)
                    (linebreak))
                  (number)))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (elude
          (mul
            (group
              (content
                (text)))
            (number)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-5
====================

#set page(height: 5em)
#table(
  columns: 2,
  fill: red,
  inset: 0pt,
  table.cell(fill: orange, rowspan: 10, breakable: false, place(bottom)[*Z*] + [x\ ] * 10 + place(bottom)[*ZZ*]),
  ..([y],) * 10,
  [a], [b],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (bool))
            (add
              (add
                (call
                  (call
                    (ident)
                    (group
                      (ident)))
                  (content
                    (strong
                      (text))))
                (mul
                  (content
                    (text)
                    (linebreak))
                  (number)))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (elude
          (mul
            (group
              (content
                (text)))
            (number)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-6
====================

#set page(height: 5em)
#table(
  columns: 2,
  fill: red,
  inset: 0pt,
  gutter: 2pt,
  table.cell(fill: orange, rowspan: 10, breakable: false, place(bottom)[*Z*] + [x\ ] * 10 + place(bottom)[*ZZ*]),
  ..([y],) * 10,
  [a], [b],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (bool))
            (add
              (add
                (call
                  (call
                    (ident)
                    (group
                      (ident)))
                  (content
                    (strong
                      (text))))
                (mul
                  (content
                    (text)
                    (linebreak))
                  (number)))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (elude
          (mul
            (group
              (content
                (text)))
            (number)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-7
====================

#set page(height: 5em)
#grid(
  columns: 2,
  stroke: red,
  inset: 5pt,
  grid.cell(rowspan: 5)[a\ b\ c\ d\ e]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text))))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-8
====================

#set page(height: 5em)
#table(
  columns: 2,
  gutter: 3pt,
  stroke: red,
  inset: 5pt,
  table.cell(rowspan: 5)[a\ b\ c\ d\ e]
)

// Rowspan split without ending at the auto row


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text))))))
  (parbreak)
  (comment)
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-9
====================

#set page(height: 6em)
#table(
  rows: (4em,) * 7 + (auto,) + (4em,) * 7,
  columns: 2,
  column-gutter: 1em,
  row-gutter: (1em, 2em) * 4,
  fill: (x, y) => if calc.odd(x + y) { orange.lighten(20%) } else { red },
  table.cell(rowspan: 15, [a \ ] * 15),
  [] * 15
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (add
              (mul
                (group
                  (number
                    (unit)))
                (number))
              (group
                (auto)))
            (mul
              (group
                (number
                  (unit)))
              (number))))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit))
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (mul
              (content
                (text)
                (linebreak))
              (number))))
        (mul
          (content)
          (number)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-10
====================

#set page(height: 6em)
#table(
  rows: (4em,) * 7 + (auto,) + (4em,) * 7,
  columns: 2,
  column-gutter: 1em,
  row-gutter: (1em, 2em) * 4,
  fill: (x, y) => if calc.odd(x + y) { green } else { green.darken(40%) },
  table.cell(rowspan: 15, block(fill: blue, width: 2em, height: 4em * 14 + 3em)),
  [] * 15
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (add
            (add
              (mul
                (group
                  (number
                    (unit)))
                (number))
              (group
                (auto)))
            (mul
              (group
                (number
                  (unit)))
              (number))))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit))
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (ident))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (add
                    (mul
                      (number
                        (unit))
                      (number))
                    (number
                      (unit))))))))
        (mul
          (content)
          (number)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-11
====================

#set page(height: 6em)
#table(
  rows: (3em,) * 15,
  columns: 2,
  column-gutter: 1em,
  row-gutter: (1em, 2em) * 4,
  fill: (x, y) => if calc.odd(x + y) { aqua } else { blue },
  table.cell(breakable: true, rowspan: 15, [a \ ] * 15),
  [] * 15
)

// Some splitting corner cases


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit))
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (ident))
              (block
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (bool))
            (tagged
              (ident)
              (number))
            (mul
              (content
                (text)
                (linebreak))
              (number))))
        (mul
          (content)
          (number)))))
  (parbreak)
  (comment)
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-12
====================

// Inside the larger rowspan's range, there's an unbreakable rowspan and a
// breakable rowspan. This should work normally.
// The auto row will also expand ignoring the last fractional row.
#set page(height: 10em)
#table(
    gutter: 0.5em,
    columns: 2,
    rows: (2em,) * 10 + (auto, auto, 2em, 1fr),
    fill: (_, y) => if calc.even(y) { aqua } else { blue },
    table.cell(rowspan: 14, block(width: 2em, height: 2em * 10 + 2em + 5em, fill: red)[]),
    ..([a],) * 5,
    table.cell(rowspan: 3)[a\ b],
    table.cell(rowspan: 5, [a\ b\ c\ d\ e\ f\ g\ h]),
    [z]
)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (mul
              (group
                (number
                  (unit)))
              (number))
            (group
              (auto)
              (auto)
              (number
                (unit))
              (number
                (unit)))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (ident)))
              (block
                (ident))
              (block
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (add
                      (add
                        (mul
                          (number
                            (unit))
                          (number))
                        (number
                          (unit)))
                      (number
                        (unit))))
                  (tagged
                    (ident)
                    (ident))))
              (content))))
        (elude
          (mul
            (group
              (content
                (text)))
            (number)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (linebreak)
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (content
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-13
====================

// Inset moving to next region bug
#set page(width: 10cm, height: 2.5cm, margin: 0.5cm)
#set text(size: 11pt)
#table(
  columns: (1fr, 1fr, 1fr),
  [A],
  [B],
  [C],
  [D],
  table.cell(rowspan: 2, lorem(4)),
  [E],
  [F],
  [G],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-14
====================

// Second lorem must be sent to the next page, too big
#set page(width: 10cm, height: 9cm, margin: 1cm)
#set text(size: 11pt)
#table(
  columns: (1fr, 1fr, 1fr),
  align: center,
  rows: (4cm, auto),
  [A], [B], [C],
  table.cell(rowspan: 4, breakable: false, lorem(10)),
  [D],
  table.cell(rowspan: 2, breakable: false, lorem(20)),
  [E],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (bool))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (bool))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-15
====================

// Auto row must expand properly in both cases
#set text(10pt)
#show table.cell: it => if it.x == 0 { it } else { layout(size => size.height) }
#table(
  columns: 2,
  rows: (1em, auto, 2em, 3em, 4em),
  gutter: 3pt,
  table.cell(rowspan: 5, block(fill: orange, height: 15em)[a]),
  [b],
  [c],
  [d],
  [e],
  [f]
)

#table(
  columns: 2,
  rows: (1em, auto, 2em, 3em, 4em),
  gutter: 3pt,
  table.cell(rowspan: 5, breakable: false, block(fill: orange, height: 15em)[a]),
  [b],
  [c],
  [d],
  [e],
  [f]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (branch
          (cmp
            (field
              (ident)
              (ident))
            (number))
          (block
            (ident))
          (block
            (call
              (ident)
              (group
                (lambda
                  (ident)
                  (field
                    (ident)
                    (ident))))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (text)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (bool))
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (text)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-16
====================

// Expanding on unbreakable auto row
#set page(height: 7em, margin: (bottom: 2em))
#grid(
  columns: 2,
  rows: (1em, 1em, auto, 1em, 1em, 1em),
  fill: (x, y) => if x == 0 { aqua } else { blue },
  stroke: black,
  gutter: 2pt,
  grid.cell(rowspan: 5, block(height: 10em)[a]),
  [a],
  [b],
  grid.cell(breakable: false, v(3em) + [c]),
  [d],
  [e],
  [f], [g]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (cmp
                (ident)
                (number))
              (block
                (ident))
              (block
                (ident)))))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (text)))))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (bool))
            (add
              (call
                (ident)
                (group
                  (number
                    (unit))))
              (content
                (text)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rowspan/grid-rowspan-split-17
====================

#show table.cell.where(x: 0): strong
#show table.cell.where(y: 0): strong
#set page(height: 13em)
#let lets-repeat(thing, n) = ((thing + colbreak(),) * (calc.max(0, n - 1)) + (thing,)).join()
#table(
  columns: 4,
  fill: (x, y) => if x == 0 or y == 0 { gray },
  [], [Test 1], [Test 2], [Test 3],
  table.cell(rowspan: 15, align: horizon, lets-repeat((rotate(-90deg, reflow: true)[*All Tests*]), 3)),
  ..([123], [456], [789]) * 15
)
--------------------

(source_file
  (code
    (show
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (ident)))
  (code
    (show
      (call
        (field
          (field
            (ident)
            (ident))
          (ident))
        (group
          (tagged
            (ident)
            (number))))
      (ident)))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (field
          (group
            (add
              (mul
                (group
                  (add
                    (ident)
                    (call
                      (ident)
                      (group))))
                (group
                  (call
                    (field
                      (ident)
                      (ident))
                    (group
                      (number)
                      (sub
                        (ident)
                        (number))))))
              (group
                (ident))))
          (ident))
        (group))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (or
                (cmp
                  (ident)
                  (number))
                (cmp
                  (ident)
                  (number)))
              (block
                (ident)))))
        (content)
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))
            (call
              (ident)
              (group
                (group
                  (call
                    (call
                      (ident)
                      (group
                        (sign
                          (number
                            (unit)))
                        (tagged
                          (ident)
                          (bool))))
                    (content
                      (strong
                        (text)))))
                (number)))))
        (elude
          (mul
            (group
              (content
                (text))
              (content
                (text))
              (content
                (text)))
            (number)))))))

====================
typst/grid/grid-columns-sizings-rect
====================

#let cell(width, color) = rect(width: width, height: 2cm, fill: color)
#set page(width: 100pt, height: 140pt)
#grid(
  columns: (auto, 1fr, 3fr, 0.25cm, 3%, 2mm + 10%),
  cell(0.5cm, rgb("2a631a")),
  cell(100%,  forest),
  cell(100%,  conifer),
  cell(100%,  rgb("ff0000")),
  cell(100%,  rgb("00ff00")),
  cell(80%,   rgb("00faf0")),
  cell(1cm,   rgb("00ff00")),
  cell(0.5cm, rgb("2a631a")),
  cell(100%,  forest),
  cell(100%,  conifer),
  cell(100%,  rgb("ff0000")),
  cell(100%,  rgb("00ff00")),
)


--------------------

(source_file
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (add
              (number
                (unit))
              (number
                (unit)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident)))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident)))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident)))
        (call
          (ident)
          (group
            (number
              (unit))
            (ident)))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (number
              (unit))
            (call
              (ident)
              (group
                (string))))))))
  (parbreak))

====================
typst/grid/grid-gutter-fr
====================

#set rect(inset: 0pt)
#grid(
  columns: (auto, auto, 40%),
  column-gutter: 1fr,
  row-gutter: 1fr,
  rect(fill: eastern)[dddaa aaa aaa],
  rect(fill: conifer)[ccc],
  rect(fill: rgb("dddddd"))[aaa],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (call
                  (ident)
                  (group
                    (string))))))
          (content
            (text))))))
  (parbreak))

====================
typst/grid/grid-row-sizing-manual-align
====================

#set page(height: 3cm, margin: 0pt)
#grid(
  columns: (1fr,),
  rows: (1fr, auto, 2fr),
  [],
  align(center)[A bit more to the top],
  [],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)
            (number
              (unit))))
        (content)
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content))))
  (parbreak))

====================
typst/grid/grid-finance
====================

// Test using the `grid` function to create a finance table.
#set page(width: 11cm, height: 2.5cm)
#grid(
  columns: 5,
  column-gutter: (2fr, 1fr, 1fr),
  row-gutter: 6pt,
  [*Quarter*],
  [Expenditure],
  [External Revenue],
  [Financial ROI],
  [_total_],
  [*Q1*],
  [173,472.57 \$],
  [472,860.91 \$],
  [51,286.84 \$],
  [_350,675.18 \$_],
  [*Q2*],
  [93,382.12 \$],
  [439,382.85 \$],
  [-1,134.30 \$],
  [_344,866.43 \$_],
  [*Q3*],
  [96,421.49 \$],
  [238,583.54 \$],
  [3,497.12 \$],
  [_145,659.17 \$_],
)
// Test grid cells that overflow to the next region.


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (emph
            (text)))
        (content
          (strong
            (text)))
        (content
          (text
            (escape)))
        (content
          (text
            (escape)))
        (content
          (text
            (escape)))
        (content
          (emph
            (text
              (escape))))
        (content
          (strong
            (text)))
        (content
          (text
            (escape)))
        (content
          (text
            (escape)))
        (content
          (text
            (escape)))
        (content
          (emph
            (text
              (escape))))
        (content
          (strong
            (text)))
        (content
          (text
            (escape)))
        (content
          (text
            (escape)))
        (content
          (text
            (escape)))
        (content
          (emph
            (text
              (escape)))))))
  (comment)
  (parbreak))

====================
typst/grid/grid-cell-breaking
====================

#set page(width: 5cm, height: 3cm)
#grid(
  columns: 2,
  row-gutter: 8pt,
  [Lorem ipsum dolor sit amet.

  Aenean commodo ligula eget dolor. Aenean massa. Penatibus et magnis.],
  [Text that is rather short],
  [Fireflies],
  [Critical],
  [Decorum],
  [Rampage],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text)
          (parbreak)
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/grid/grid-consecutive-rows-breaking
====================

// Test a column that starts overflowing right after another row/column did
// that.
#set page(width: 5cm, height: 2cm)
#grid(
  columns: 4 * (1fr,),
  row-gutter: 10pt,
  column-gutter: (0pt, 10%),
  align(top, image("/assets/images/rhino.png")),
  align(top, rect(inset: 0pt, fill: eastern, align(right)[LoL])),
  [rofl],
  [\ A] * 3,
  [Ha!\ ] * 3,
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (string)))))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (call
                  (call
                    (ident)
                    (group
                      (ident)))
                  (content
                    (text)))))))
        (content
          (text))
        (mul
          (content
            (linebreak)
            (text))
          (number))
        (mul
          (content
            (text)
            (linebreak))
          (number)))))
  (parbreak))

====================
typst/grid/grid-same-row-multiple-columns-breaking
====================

// Test two columns in the same row overflowing by a different amount.
#set page(width: 5cm, height: 2cm)
#grid(
  columns: 3 * (1fr,),
  row-gutter: 8pt,
  column-gutter: (0pt, 10%),
  [A], [B], [C],
  [Ha!\ ] * 6,
  [rofl],
  [\ A] * 3,
  [hello],
  [darkness],
  [my old]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (mul
          (content
            (text)
            (linebreak))
          (number))
        (content
          (text))
        (mul
          (content
            (linebreak)
            (text))
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/grid/grid-nested-breaking
====================

// Test grid within a grid, overflowing.
#set page(width: 5cm, height: 2.25cm)
#grid(
  columns: 4 * (1fr,),
  row-gutter: 10pt,
  column-gutter: (0pt, 10%),
  [A], [B], [C], [D],
  grid(columns: 2, [A], [B], [C\ ]*3, [D]),
  align(top, rect(inset: 0pt, fill: eastern, align(right)[LoL])),
  [rofl],
  [E\ ]*4,
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (number)
            (group
              (number
                (unit)))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (content
              (text))
            (content
              (text))
            (mul
              (content
                (text)
                (linebreak))
              (number))
            (content
              (text))))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident))
                (call
                  (call
                    (ident)
                    (group
                      (ident)))
                  (content
                    (text)))))))
        (content
          (text))
        (mul
          (content
            (text)
            (linebreak))
          (number)))))
  (parbreak))

====================
typst/grid/grid-column-sizing-auto-base
====================

// Test that auto and relative columns use the correct base.
#grid(
  columns: (auto, 60%),
  rows: (auto, auto),
  rect(width: 50%, height: 0.5cm, fill: conifer),
  rect(width: 100%, height: 0.5cm, fill: eastern),
  rect(width: 50%, height: 0.5cm, fill: forest),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (auto)
            (auto)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/grid/grid-column-sizing-fr-base
====================

// Test that fr columns use the correct base.
#grid(
  columns: (1fr,) * 4,
  rows: (1cm,),
  rect(width: 50%, fill: conifer),
  rect(width: 50%, fill: forest),
  rect(width: 50%, fill: conifer),
  rect(width: 50%, fill: forest),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (group
            (number
              (unit))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/grid/grid-column-sizing-mixed-base
====================

// Test that all three kinds of rows use the correct bases.
#set page(height: 4cm, margin: 0cm)
#grid(
  rows: (1cm, 1fr, 1fr, auto),
  rect(height: 50%, width: 100%, fill: conifer),
  rect(height: 50%, width: 100%, fill: forest),
  rect(height: 50%, width: 100%, fill: conifer),
  rect(height: 25%, width: 100%, fill: forest),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/grid/grid-trailing-linebreak-region-overflow
====================

// Test that trailing linebreak doesn't overflow the region.
#set page(height: 2cm)
#grid[
  Hello \
  Hello \
  Hello \

  World
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (content
        (text)
        (linebreak)
        (text)
        (linebreak)
        (text)
        (linebreak)
        (parbreak)
        (text))))
  (parbreak))

====================
typst/grid/grid-breaking-expand-vertically
====================

// Test that broken cell expands vertically.
#set page(height: 2.25cm)
#grid(
  columns: 2,
  gutter: 10pt,
  align(bottom)[A],
  [
    Top
    #align(bottom)[
      Bottom \
      Bottom

      Top
    ]
  ],
  align(top)[B],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text)
          (code
            (call
              (call
                (ident)
                (group
                  (ident)))
              (content
                (text)
                (linebreak)
                (text)
                (parbreak)
                (text)))))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text))))))
  (parbreak))

====================
typst/grid/grid-complete-rows
====================

// Ensure grids expand enough for the given rows.
#grid(
  columns: (2em, 2em),
  rows: (2em,) * 4,
  fill: red,
  stroke: aqua,
  [a]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (mul
            (group
              (number
                (unit)))
            (number)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (content
          (text)))))
  (parbreak))

====================
typst/grid/grid-auto-shrink
====================

// Test iterative auto column shrinking.
#set page(width: 210mm - 2 * 2.5cm + 2 * 10pt)
#set text(11pt)
#table(
  columns: 4,
  [Hello!],
  [Hello there, my friend!],
  [Hello there, my friends! Hi!],
  [Hello there, my friends! Hi! What is going on right now?],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (sub
                (number
                  (unit))
                (mul
                  (number)
                  (number
                    (unit))))
              (mul
                (number)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/grid/issue-grid-base-auto-row
====================

// Test that grid base for auto rows makes sense.
#set page(height: 150pt)
#table(
  columns: (1.5cm, auto),
  rows: (auto, auto),
  rect(width: 100%, fill: red),
  rect(width: 100%, fill: blue),
  rect(width: 100%, height: 50%, fill: green),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (group
            (auto)
            (auto)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/grid/issue-grid-base-auto-row-list
====================

#rect(width: 100%, height: 1em)
- #rect(width: 100%, height: 1em)
  - #rect(width: 100%, height: 1em)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (item
    (code
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit))))))
    (item
      (code
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/grid/issue-grid-skip
====================

// Grid now skips a remaining region when one of the cells
// doesn't fit into it at all.
#set page(height: 100pt)
#grid(
  columns: (2cm, auto),
  rows: (auto, auto),
  rect(width: 100%, fill: red),
  rect(width: 100%, fill: blue),
  rect(width: 100%, height: 80%, fill: green),
  [hello \ darkness #parbreak() my \ old \ friend \ I],
  rect(width: 100%, height: 20%, fill: blue),
  polygon(fill: red, (0%, 0%), (100%, 0%), (100%, 20%))
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (group
            (auto)
            (auto)))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (content
          (text)
          (linebreak)
          (text)
          (code
            (call
              (ident)
              (group)))
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (ident))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit)))
            (group
              (number
                (unit))
              (number
                (unit))))))))
  (parbreak))

====================
typst/grid/issue-grid-skip-list
====================

#set page(height: 60pt)
#lines(2)
- #lines(2)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (item
    (code
      (call
        (ident)
        (group
          (number)))))
  (parbreak))

====================
typst/grid/issue-grid-double-skip
====================

// Ensure that the list does not jump to the third page.
#set page(height: 70pt)
#v(40pt)
The following:
+ A
+ B


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (item
    (text))
  (item
    (text))
  (parbreak))

====================
typst/grid/issue-grid-gutter-skip
====================

// Ensure gutter rows at the top or bottom of a region are skipped.
#set page(height: 10em)

#table(
  row-gutter: 1.5em,
  inset: 0pt,
  rows: (1fr, auto),
  [a],
  [],
  [],
  [f],
  [e\ e],
  [],
  [a]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)))
        (content
          (text))
        (content)
        (content)
        (content
          (text))
        (content
          (text)
          (linebreak)
          (text))
        (content)
        (content
          (text)))))
  (parbreak))

====================
typst/grid/issue-3917-grid-with-infinite-width
====================

// https://github.com/typst/typst/issues/1918
#set page(width: auto)
#context layout(available => {
  let infinite-length = available.width
  // Error: 3-50 cannot create grid with infinite width
  grid(gutter: infinite-length, columns: 2)[A][B]
})
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (code
    (context
      (call
        (ident)
        (group
          (lambda
            (ident)
            (block
              (let
                (ident)
                (field
                  (ident)
                  (ident)))
              (comment)
              (call
                (call
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (ident))
                      (tagged
                        (ident)
                        (number))))
                  (content
                    (text)))
                (content
                  (text))))))))))

====================
typst/cell/grid-cell-override
====================

// Cell override
#grid(
  align: left,
  fill: red,
  stroke: blue,
  inset: 5pt,
  columns: 2,
  [AAAAA], [BBBBB],
  [A], [B],
  grid.cell(align: right)[C], [D],
  align(right)[E], [F],
  align(horizon)[G], [A\ A\ A],
  grid.cell(align: horizon)[G2], [A\ A\ A],
  grid.cell(inset: 0pt)[I], [F],
  [H], grid.cell(fill: blue)[J]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-show
====================

// Cell show rule
#show grid.cell: it => [Zz]

#grid(
  align: left,
  fill: red,
  stroke: blue,
  inset: 5pt,
  columns: 2,
  [AAAAA], [BBBBB],
  [A], [B],
  grid.cell(align: right)[C], [D],
  align(right)[E], [F],
  align(horizon)[G], [A\ A\ A]
)


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (text)))
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)))))
  (parbreak))

====================
typst/cell/grid-cell-show-and-override
====================

#show grid.cell: it => (it.align, it.fill)
#grid(
  align: left,
  row-gutter: 5pt,
  [A],
  grid.cell(align: right)[B],
  grid.cell(fill: aqua)[B],
)


--------------------

(source_file
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (group
          (field
            (ident)
            (ident))
          (field
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-set
====================

// Cell set rules
#set grid.cell(align: center)
#show grid.cell: it => (it.align, it.fill, it.inset)
#set grid.cell(inset: 20pt)
#grid(
  align: left,
  row-gutter: 5pt,
  [A],
  grid.cell(align: right)[B],
  grid.cell(fill: aqua)[B],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (group
          (field
            (ident)
            (ident))
          (field
            (ident)
            (ident))
          (field
            (ident)
            (ident))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-folding
====================

// Test folding per-cell properties (align and inset)
#grid(
  columns: (1fr, 1fr),
  rows: (2.5em, auto),
  align: right,
  inset: 5pt,
  fill: (x, y) => (green, aqua).at(calc.rem(x + y, 2)),
  [Top], grid.cell(align: bottom)[Bot],
  grid.cell(inset: (bottom: 0pt))[Bot], grid.cell(inset: (bottom: 0pt))[Bot]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (group
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (call
              (field
                (group
                  (ident)
                  (ident))
                (ident))
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (add
                      (ident)
                      (ident))
                    (number)))))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-align-override
====================

// Test overriding outside alignment
#set align(bottom + right)
#grid(
  columns: (1fr, 1fr),
  rows: 2em,
  align: auto,
  fill: green,
  [BR], [BR],
  grid.cell(align: left, fill: aqua)[BL], grid.cell(align: top, fill: red.lighten(50%))[TR]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (auto))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-various-overrides
====================

#grid(
  columns: 2,
  fill: red,
  align: left,
  inset: 5pt,
  [ABC], [ABC],
  grid.cell(fill: blue)[C], [D],
  grid.cell(align: center)[E], [F],
  [G], grid.cell(inset: 0pt)[H]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-show-emph
====================

#{
  show grid.cell: emph
  grid(
    columns: 2,
    gutter: 3pt,
    [Hello], [World],
    [Sweet], [Italics]
  )
}


--------------------

(source_file
  (code
    (block
      (show
        (field
          (ident)
          (ident))
        (ident))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number
              (unit)))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/grid-cell-show-based-on-position
====================

// Style based on position
#{
  show grid.cell: it => {
    if it.y == 0 {
      strong(it)
    } else if it.x == 1 {
      emph(it)
    } else {
      it
    }
  }
  grid(
    columns: 3,
    gutter: 3pt,
    [Name], [Age], [Info],
    [John], [52], [Nice],
    [Mary], [50], [Cool],
    [Jake], [49], [Epic]
  )
}


--------------------

(source_file
  (comment)
  (code
    (block
      (show
        (field
          (ident)
          (ident))
        (lambda
          (ident)
          (block
            (branch
              (cmp
                (field
                  (ident)
                  (ident))
                (number))
              (block
                (call
                  (ident)
                  (group
                    (ident))))
              (branch
                (cmp
                  (field
                    (ident)
                    (ident))
                  (number))
                (block
                  (call
                    (ident)
                    (group
                      (ident))))
                (block
                  (ident)))))))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number
              (unit)))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (parbreak))

====================
typst/cell/table-cell-in-grid
====================

// Error: 7-19 cannot use `table.cell` as a grid cell
// Hint: 7-19 use `grid.cell` instead
#grid(table.cell[])
--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (content))))))

====================
typst/footers/grid-footer
====================

#set page(width: auto, height: 15em)
#set text(6pt)
#set table(inset: 2pt, stroke: 0.5pt)
#table(
  columns: 5,
  align: center + horizon,
  table.header(
    table.cell(colspan: 5)[*Cool Zone*],
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.hline(start: 2, end: 3, stroke: yellow)
  ),
  ..range(0, 5).map(i => ([John \##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789], [?], table.hline(start: 4, end: 5, stroke: red))).flatten(),
  table.footer(
    table.hline(start: 2, end: 3, stroke: yellow),
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.cell(colspan: 5)[*Cool Zone*]
  )
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))
                      (content
                        (text))
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (ident))))))))
              (ident))
            (group)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text)))))))))
  (parbreak))

====================
typst/footers/grid-footer-gutter-and-no-repeat
====================

// Gutter & no repetition
#set page(width: auto, height: 16em)
#set text(6pt)
#set table(inset: 2pt, stroke: 0.5pt)
#table(
  columns: 5,
  gutter: 2pt,
  align: center + horizon,
  table.header(
    table.cell(colspan: 5)[*Cool Zone*],
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.hline(start: 2, end: 3, stroke: yellow)
  ),
  ..range(0, 5).map(i => ([John \##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789], [?], table.hline(start: 4, end: 5, stroke: red))).flatten(),
  table.footer(
    repeat: false,
    table.hline(start: 2, end: 3, stroke: yellow),
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.cell(colspan: 5)[*Cool Zone*]
  )
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))
                      (content
                        (text))
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (ident))))))))
              (ident))
            (group)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (bool))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text)))))))))
  (parbreak))

====================
typst/footers/grid-cell-override-in-header-and-footer
====================

#table(
  table.header(table.cell(stroke: red)[Hello]),
  table.footer(table.cell(stroke: aqua)[Bye]),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (text))))))))
  (parbreak))

====================
typst/footers/grid-cell-override-in-header-and-footer-with-gutter
====================

#table(
  gutter: 3pt,
  table.header(table.cell(stroke: red)[Hello]),
  table.footer(table.cell(stroke: aqua)[Bye]),
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (text))))))))
  (parbreak))

====================
typst/footers/grid-footer-top-stroke
====================

// Footer's top stroke should win when repeated, but lose at the last page.
#set page(height: 10em)
#table(
  stroke: green,
  table.header(table.cell(stroke: red)[Hello]),
  table.cell(stroke: yellow)[Hi],
  table.cell(stroke: yellow)[Bye],
  table.cell(stroke: yellow)[Ok],
  table.footer[Bye],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (text)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-relative-row-sizes
====================

// Relative lengths
#set page(height: 10em)
#table(
  rows: (30%, 30%, auto),
  [C],
  [C],
  table.footer[*A*][*B*],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text)))))))
  (parbreak))

====================
typst/footers/grid-footer-cell-with-y
====================

#grid(
  grid.footer(grid.cell(y: 2)[b]),
  grid.cell(y: 0)[a],
  grid.cell(y: 1)[c],
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (text)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-expand
====================

// Ensure footer properly expands
#grid(
  columns: 2,
  [a], [],
  [b], [],
  grid.cell(x: 1, y: 3, rowspan: 4)[b],
  grid.cell(y: 2, rowspan: 2)[a],
  grid.footer(),
  grid.cell(y: 4)[d],
  grid.cell(y: 5)[e],
  grid.cell(y: 6)[f],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content)
        (content
          (text))
        (content)
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-not-at-last-row
====================

// Error: 2:3-2:19 footer must end at the last row
#grid(
  grid.footer([a]),
  [b],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/footers/grid-footer-not-at-last-row-two-columns
====================

// Error: 3:3-3:19 footer must end at the last row
#grid(
  columns: 2,
  grid.footer([a]),
  [b],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/footers/grid-footer-overlap
====================

// Error: 4:3-4:19 footer would conflict with a cell placed before it at column 1 row 0
// Hint: 4:3-4:19 try reducing that cell's rowspan or moving the footer
#grid(
  columns: 2,
  grid.header(),
  grid.footer([a]),
  grid.cell(x: 1, y: 0, rowspan: 2)[a],
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-multiple
====================

// Error: 4:3-4:19 cannot have more than one footer
#grid(
  [a],
  grid.footer([a]),
  grid.footer([b]),
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text)))))))
  (parbreak))

====================
typst/footers/table-footer-in-grid
====================

// Error: 3:3-3:20 cannot use `table.footer` as a grid footer
// Hint: 3:3-3:20 use `grid.footer` instead
#grid(
  [a],
  table.footer([a]),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text)))))))
  (parbreak))

====================
typst/footers/grid-footer-in-table
====================

// Error: 3:3-3:19 cannot use `grid.footer` as a table footer
// Hint: 3:3-3:19 use `table.footer` instead
#table(
  [a],
  grid.footer([a]),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text)))))))
  (parbreak))

====================
typst/footers/grid-footer-in-grid-header
====================

// Error: 14-28 cannot place a grid footer within another footer or header
#grid.header(grid.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/table-footer-in-grid-header
====================

// Error: 14-29 cannot place a table footer within another footer or header
#grid.header(table.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-in-table-header
====================

// Error: 15-29 cannot place a grid footer within another footer or header
#table.header(grid.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/table-footer-in-table-header
====================

// Error: 15-30 cannot place a table footer within another footer or header
#table.header(table.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-in-grid-footer
====================

// Error: 14-28 cannot place a grid footer within another footer or header
#grid.footer(grid.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/table-footer-in-grid-footer
====================

// Error: 14-29 cannot place a table footer within another footer or header
#grid.footer(table.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-in-table-footer
====================

// Error: 15-29 cannot place a grid footer within another footer or header
#table.footer(grid.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/table-footer-in-table-footer
====================

// Error: 15-30 cannot place a table footer within another footer or header
#table.footer(table.footer[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-header-in-grid-footer
====================

// Error: 14-28 cannot place a grid header within another header or footer
#grid.footer(grid.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/table-header-in-grid-footer
====================

// Error: 14-29 cannot place a table header within another header or footer
#grid.footer(table.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-header-in-table-footer
====================

// Error: 15-29 cannot place a grid header within another header or footer
#table.footer(grid.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/table-header-in-table-footer
====================

// Error: 15-30 cannot place a table header within another header or footer
#table.footer(table.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-header-footer-block-with-fixed-height
====================

#set page(height: 17em)
#table(
  rows: (auto, 2.5em, auto),
  table.header[*Hello*][*World*],
  block(width: 2em, height: 10em, fill: red),
  table.footer[*Bye*][*World*],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (auto)))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text)))))))
  (parbreak))

====================
typst/footers/grid-header-footer-and-rowspan-non-contiguous-1
====================

// Rowspan sizing algorithm doesn't do the best job at non-contiguous content
// ATM.
#set page(height: 20em)

#table(
  rows: (auto, 2.5em, 2em, auto, 5em, 2em, 2.5em),
  table.header[*Hello*][*World*],
  table.cell(rowspan: 3, lorem(20)),
  table.footer[*Ok*][*Bye*],
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)
            (number
              (unit))
            (number
              (unit))
            (number
              (unit))))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text)))))))
  (parbreak))

====================
typst/footers/grid-header-footer-and-rowspan-non-contiguous-2
====================

// This should look right
#set page(height: 20em)

#table(
  rows: (auto, 2.5em, 2em, auto),
  gutter: 3pt,
  table.header[*Hello*][*World*],
  table.cell(rowspan: 3, lorem(20)),
  table.footer[*Ok*][*Bye*],
)

--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text))))))))

====================
typst/footers/grid-header-and-footer-lack-of-space
====================

// Test lack of space for header + text.
#set page(height: 9em + 2.5em + 1.5em)

#table(
  rows: (auto, 2.5em, auto, auto, 10em, 2.5em, auto),
  gutter: 3pt,
  table.header[*Hello*][*World*],
  table.cell(rowspan: 3, lorem(30)),
  table.footer[*Ok*][*Bye*],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (add
              (add
                (number
                  (unit))
                (number
                  (unit)))
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (auto)
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (content
              (strong
                (text))))
          (content
            (strong
              (text)))))))
  (parbreak))

====================
typst/footers/grid-header-and-footer-orphan-prevention
====================

// Orphan header prevention test
#set page(height: 13em)
#v(8em)
#grid(
  columns: 3,
  gutter: 5pt,
  grid.header(
    [*Mui*], [*A*], grid.cell(rowspan: 2, fill: orange)[*B*],
    [*Header*], [*Header* #v(0.1em)],
  ),
  ..([Test], [Test], [Test]) * 7,
  grid.footer(
    [*Mui*], [*A*], grid.cell(rowspan: 2, fill: orange)[*B*],
    [*Footer*], [*Footer* #v(0.1em)],
  ),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text))
              (code
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))))
        (elude
          (mul
            (group
              (content
                (text))
              (content
                (text))
              (content
                (text)))
            (number)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text))
              (code
                (call
                  (ident)
                  (group
                    (number
                      (unit)))))))))))
  (parbreak))

====================
typst/footers/grid-header-and-footer-empty
====================

// Empty footer should just be a repeated blank row
#set page(height: 8em)
#table(
  columns: 4,
  align: center + horizon,
  table.header(),
  ..range(0, 2).map(i => (
    [John \##i],
    table.cell(stroke: green)[123],
    table.cell(stroke: blue)[456],
    [789]
  )).flatten(),
  table.footer(),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))))))
              (ident))
            (group)))
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/footers/grid-header-and-footer-containing-rowspan
====================

// When a footer has a rowspan with an empty row, it should be displayed
// properly
#set page(height: 14em, width: auto)

#let count = counter("g")
#table(
  rows: (auto, 2em, auto, auto),
  table.header(
    [eeec],
    table.cell(rowspan: 2, count.step() + context count.display()),
  ),
  [d],
  block(width: 5em, fill: yellow, lorem(7)),
  [d],
  table.footer(
    [eeec],
    table.cell(rowspan: 2, count.step() + context count.display()),
  )
)
#context count.display()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (auto)
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (add
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (context
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))))))))
        (content
          (text))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (add
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (context
                    (call
                      (field
                        (ident)
                        (ident))
                      (group)))))))))))
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/footers/grid-nested-with-footers
====================

// Nested table with footer should repeat both footers
#set page(height: 10em, width: auto)
#table(
  table(
    [a\ b\ c\ d],
    table.footer[b],
  ),
  table.footer[a],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (content
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text))
            (call
              (field
                (ident)
                (ident))
              (content
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-nested-footers
====================

#set page(height: 12em, width: auto)
#table(
  [a\ b\ c\ d],
  table.footer(table(
    [c],
    [d],
    table.footer[b],
  ))
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (auto))))))
  (code
    (call
      (ident)
      (group
        (content
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text)
          (linebreak)
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (content
                  (text))
                (content
                  (text))
                (call
                  (field
                    (ident)
                    (ident))
                  (content
                    (text))))))))))
  (parbreak))

====================
typst/footers/grid-footer-rowspan
====================

// General footer-only tests
#set page(height: 9em)
#table(
  columns: 2,
  [a], [],
  [b], [],
  [c], [],
  [d], [],
  [e], [],
  table.footer(
    [*Ok*], table.cell(rowspan: 2)[test],
    [*Thanks*]
  )
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content)
        (content
          (text))
        (content)
        (content
          (text))
        (content)
        (content
          (text))
        (content)
        (content
          (text))
        (content)
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (text)))
            (content
              (strong
                (text))))))))
  (parbreak))

====================
typst/footers/grid-footer-bare-1
====================

#set page(height: 5em)
#table(
  table.footer[a][b][c]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (field
                (ident)
                (ident))
              (content
                (text)))
            (content
              (text)))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-bare-2
====================

#table(table.footer[a][b][c])

#table(
  gutter: 3pt,
  table.footer[a][b][c]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (call
            (call
              (field
                (ident)
                (ident))
              (content
                (text)))
            (content
              (text)))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (call
              (field
                (ident)
                (ident))
              (content
                (text)))
            (content
              (text)))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-stroke-edge-cases
====================

// Test footer stroke priority edge case
#set page(height: 10em)
#table(
  columns: 2,
  stroke: black,
  ..(table.cell(stroke: aqua)[d],) * 8,
  table.footer(
    table.cell(rowspan: 2, colspan: 2)[a],
    [c], [d]
  )
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (elude
          (mul
            (group
              (call
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (ident))))
                (content
                  (text))))
            (number)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))
                  (tagged
                    (ident)
                    (number))))
              (content
                (text)))
            (content
              (text))
            (content
              (text)))))))
  (parbreak))

====================
typst/footers/grid-footer-hline-and-vline-1
====================

// Footer should appear at the bottom. Red line should be above the footer.
// Green line should be on the left border.
#set page(margin: 2pt)
#set text(6pt)
#table(
  columns: 2,
  inset: 1.5pt,
  table.cell(y: 0)[a],
  table.cell(x: 1, y: 1)[a],
  table.cell(y: 2)[a],
  table.footer(
    table.hline(stroke: red),
    table.vline(stroke: green),
    [b],
  ),
  table.cell(x: 1, y: 3)[c]
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))
            (content
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/footers/grid-footer-hline-and-vline-2
====================

// Table should be just one row. [c] appears at the third column.
#set page(margin: 2pt)
#set text(6pt)
#table(
  columns: 3,
  inset: 1.5pt,
  table.cell(y: 0)[a],
  table.footer(
    table.hline(stroke: red),
    table.hline(y: 1, stroke: aqua),
    table.cell(y: 0)[b],
    [c]
  )
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (text)))
            (content
              (text)))))))
  (parbreak))

====================
typst/footers/grid-footer-below-rowspans
====================

// Footer should go below the rowspans.
#set page(margin: 2pt)
#set text(6pt)
#table(
  columns: 2,
  inset: 1.5pt,
  table.cell(rowspan: 2)[a], table.cell(rowspan: 2)[b],
  table.footer()
)
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group))))))

====================
typst/rtl/list-rtl
====================

#set text(dir: rtl)
- מימין לשמאל


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (item
    (text))
  (parbreak))

====================
typst/rtl/grid-rtl
====================

#set text(dir: rtl)
#table(columns: 2)[A][B][C][D]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (call
        (call
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number))))
            (content
              (text)))
          (content
            (text)))
        (content
          (text)))
      (content
        (text))))
  (parbreak))

====================
typst/rtl/grid-rtl-colspan
====================

// Test interaction between RTL and colspans
#set text(dir: rtl)
#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  grid.cell(colspan: 4)[*Full Header*],
  grid.cell(colspan: 2, fill: orange)[*Half*],
  grid.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], grid.cell(colspan: 3, fill: orange.darken(10%))[6],
  grid.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], grid.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)

#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  grid.cell(colspan: 4)[*Full Header*],
  grid.cell(colspan: 2, fill: orange)[*Half*],
  grid.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], grid.cell(colspan: 3, fill: orange.darken(10%))[6],
  grid.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], grid.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/rtl/grid-rtl-colspan-stroke
====================

#set text(dir: rtl)
#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  table.cell(colspan: 4)[*Full Header*],
  table.cell(colspan: 2, fill: orange)[*Half*],
  table.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], table.cell(colspan: 3, fill: orange.darken(10%))[6],
  table.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], table.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)

#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  table.cell(colspan: 4)[*Full Header*],
  table.cell(colspan: 2, fill: orange)[*Half*],
  table.cell(colspan: 2, fill: orange.darken(10%))[*Half*],
  [*A*], [*B*], [*C*], [*D*],
  [1], [2], [3], [4],
  [5], table.cell(colspan: 3, fill: orange.darken(10%))[6],
  table.cell(colspan: 2, fill: orange)[7], [8], [9],
  [10], table.cell(colspan: 2, fill: orange.darken(10%))[11], [12]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (strong
              (text))))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (strong
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/rtl/grid-rtl-multiple-regions
====================

// Test multiple regions
#set page(height: 5em)
#set text(dir: rtl)
#grid(
  stroke: red,
  fill: aqua,
  columns: 4,
  [a], [b], [c], [d],
  [a], grid.cell(colspan: 2)[e, f, g, h, i], [f],
  [e], [g], grid.cell(colspan: 2)[eee\ e\ e\ e],
  grid.cell(colspan: 4)[eeee e e e]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)
            (linebreak)
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/rtl/grid-rtl-vline-position
====================

// Test left and right for vlines in RTL
#set text(dir: rtl)
#grid(
  columns: 3,
  inset: 5pt,
  grid.vline(stroke: red, position: left), grid.vline(stroke: green, position: right), [a],
  grid.vline(stroke: red, position: left), grid.vline(stroke: 2pt, position: right), [b],
  grid.vline(stroke: red, position: left), grid.vline(stroke: 2pt, position: right), [c],
  grid.vline(stroke: aqua, position: right)
)

#grid(
  columns: 3,
  inset: 5pt,
  gutter: 3pt,
  grid.vline(stroke: green, position: left), grid.vline(stroke: red, position: right), [a],
  grid.vline(stroke: blue, position: left), grid.vline(stroke: red, position: right), [b],
  grid.vline(stroke: blue, position: left), grid.vline(stroke: red, position: right), [c],
  grid.vline(stroke: 2pt, position: right)
)

#grid(
  columns: 3,
  inset: 5pt,
  grid.vline(stroke: green, position: start), grid.vline(stroke: red, position: end), [a],
  grid.vline(stroke: 2pt, position: start), grid.vline(stroke: red, position: end), [b],
  grid.vline(stroke: 2pt, position: start), grid.vline(stroke: red, position: end), [c],
  grid.vline(stroke: 2pt, position: start)
)

#grid(
  columns: 3,
  inset: 5pt,
  gutter: 3pt,
  grid.vline(stroke: green, position: start), grid.vline(stroke: red, position: end), [a],
  grid.vline(stroke: blue, position: start), grid.vline(stroke: red, position: end), [b],
  grid.vline(stroke: blue, position: start), grid.vline(stroke: red, position: end), [c],
  grid.vline(stroke: 2pt, position: start)
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/rtl/grid-rtl-vline-out-of-bounds
====================

// Error: 3:8-3:34 cannot place vertical line at the 'end' position of the end border (x = 1)
// Hint: 3:8-3:34 set the line's position to 'start' or place it at a smaller 'x' index
#set text(dir: rtl)
#grid(
  [a], grid.vline(position: left)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/rtl/grid-rtl-complex
====================

#set text(dir: rtl)

#grid(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  grid.cell(rowspan: 2, fill: orange)[*Left*],
  [Right A], [Right A], [Right A],
  [Right B], grid.cell(colspan: 2, rowspan: 2, fill: orange.darken(10%))[B Wide],
  [Left A], [Left A],
  [Left B], [Left B], grid.cell(colspan: 2, rowspan: 3, fill: orange)[Wide and Long]
)

#table(
  columns: 4,
  fill: (x, y) => if calc.odd(x + y) { blue.lighten(50%) } else { blue.lighten(10%) },
  inset: 5pt,
  align: center,
  gutter: 3pt,
  table.cell(rowspan: 2, fill: orange)[*Left*],
  [Right A], [Right A], [Right A],
  [Right B], table.cell(colspan: 2, rowspan: 2, fill: orange.darken(10%))[B Wide],
  [Left A], [Left A],
  [Left B], [Left B], table.cell(colspan: 2, rowspan: 3, fill: orange)[Wide and Long]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (add
                    (ident)
                    (ident))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))
              (block
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit))))))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (number
                      (unit)))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/rtl/grid-rtl-rowspan
====================

#set page(height: 10em)
#set text(dir: rtl)
#table(
  columns: 2,
  rows: (auto, auto, 3em),
  row-gutter: 1em,
  fill: red,
  [a], table.cell(rowspan: 3, block(width: 50%, height: 10em, fill: orange) + place(bottom)[*ZD*]),
  [e],
  [f]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (group
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (add
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (ident))))
              (call
                (call
                  (ident)
                  (group
                    (ident)))
                (content
                  (strong
                    (text)))))))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/rtl/grid-rtl-header
====================

// Headers
#set page(height: 15em)
#set text(dir: rtl)
#table(
  columns: 5,
  align: center + horizon,
  table.header(
    table.cell(colspan: 5)[*Cool Zone*],
    table.cell(stroke: red)[*N1*], table.cell(stroke: aqua)[*N2*], [*D1*], [*D2*], [*Etc*],
    table.hline(start: 2, end: 3, stroke: yellow)
  ),
  ..range(0, 10).map(i => ([\##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789], [?], table.hline(start: 4, end: 5, stroke: red))).flatten()
)
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))
                      (content
                        (text))
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (ident))))))))
              (ident))
            (group)))))))

====================
typst/headers/grid-headers
====================

#set page(width: auto, height: 12em)
#table(
  columns: 5,
  align: center + horizon,
  table.header(
    table.cell(colspan: 5)[*Cool Zone*],
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.hline(start: 2, end: 3, stroke: yellow)
  ),
  ..range(0, 6).map(i => ([John \##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789], [?], table.hline(start: 4, end: 5, stroke: red))).flatten()
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))
                      (content
                        (text))
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (ident))))))))
              (ident))
            (group))))))
  (parbreak))

====================
typst/headers/grid-headers-no-repeat
====================

// Disable repetition
#set page(width: auto, height: 12em)
#table(
  columns: 5,
  align: center + horizon,
  table.header(
    table.cell(colspan: 5)[*Cool Zone*],
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.hline(start: 2, end: 3, stroke: yellow),
    repeat: false
  ),
  ..range(0, 6).map(i => ([John \##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789], [?], table.hline(start: 4, end: 5, stroke: red))).flatten()
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))
            (tagged
              (ident)
              (bool))))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))
                      (content
                        (text))
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (ident))))))))
              (ident))
            (group))))))
  (parbreak))

====================
typst/headers/grid-headers-gutter
====================

#set page(width: auto, height: 12em)
#table(
  columns: 5,
  align: center + horizon,
  gutter: 3pt,
  table.header(
    table.cell(colspan: 5)[*Cool Zone*],
    table.cell(stroke: red)[*Name*], table.cell(stroke: aqua)[*Number*], [*Data 1*], [*Data 2*], [*Etc*],
    table.hline(start: 2, end: 3, stroke: yellow),
  ),
  ..range(0, 6).map(i => ([John \##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789], [?], table.hline(start: 4, end: 5, stroke: red))).flatten()
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (number))
                (tagged
                  (ident)
                  (ident))))))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))
                      (content
                        (text))
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (number))
                          (tagged
                            (ident)
                            (ident))))))))
              (ident))
            (group))))))
  (parbreak))

====================
typst/headers/grid-header-relative-row-sizes
====================

// Relative lengths
#set page(height: 10em)
#table(
  rows: (30%, 30%, auto),
  table.header(
    [*A*],
    [*B*]
  ),
  [C],
  [C]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/headers/grid-header-cell-with-y
====================

#grid(
  grid.cell(y: 1)[a],
  grid.header(grid.cell(y: 0)[b]),
  grid.cell(y: 2)[c]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))))
              (content
                (text)))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/grid-header-last-child
====================

// When the header is the last grid child, it shouldn't include the gutter row
// after it, because there is none.
#grid(
  columns: 2,
  gutter: 3pt,
  grid.header(
    [a], [b],
    [c], [d]
  )
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (content
              (text))
            (content
              (text))
            (content
              (text)))))))
  (parbreak))

====================
typst/headers/grid-header-nested
====================

#set page(height: 14em)
#let t(n) = table(
  columns: 3,
  align: center + horizon,
  gutter: 3pt,
  table.header(
    table.cell(colspan: 3)[*Cool Zone #n*],
    [*Name*], [*Num*], [*Data*]
  ),
  ..range(0, 5).map(i => ([\##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456])).flatten()
)
#grid(
  gutter: 3pt,
  t(0),
  t(1)
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (add
              (ident)
              (ident)))
          (tagged
            (ident)
            (number
              (unit)))
          (call
            (field
              (ident)
              (ident))
            (group
              (call
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (number))))
                (content
                  (strong
                    (text)
                    (code
                      (ident)))))
              (content
                (strong
                  (text)))
              (content
                (strong
                  (text)))
              (content
                (strong
                  (text)))))
          (elude
            (call
              (field
                (call
                  (field
                    (call
                      (ident)
                      (group
                        (number)
                        (number)))
                    (ident))
                  (group
                    (lambda
                      (ident)
                      (group
                        (content
                          (text
                            (escape))
                          (code
                            (ident)))
                        (call
                          (call
                            (field
                              (ident)
                              (ident))
                            (group
                              (tagged
                                (ident)
                                (ident))))
                          (content
                            (text)))
                        (call
                          (call
                            (field
                              (ident)
                              (ident))
                            (group
                              (tagged
                                (ident)
                                (ident))))
                          (content
                            (text)))))))
                (ident))
              (group)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (number)))
        (call
          (ident)
          (group
            (number))))))
  (parbreak))

====================
typst/headers/grid-header-hline-and-vline
====================

// Test line positioning in header
#table(
  columns: 3,
  stroke: none,
  table.hline(stroke: red, end: 2),
  table.vline(stroke: red, end: 3),
  table.header(
    table.hline(stroke: aqua, start: 2),
    table.vline(stroke: aqua, start: 3), [*A*], table.hline(stroke: orange), table.vline(stroke: orange), [*B*],
    [*C*], [*D*]
  ),
  [a], [b],
  [c], [d],
  [e], [f]
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (none))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number))))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number))))
            (content
              (strong
                (text)))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/headers/grid-header-not-at-first-row
====================

// Error: 3:3-3:19 header must start at the first row
// Hint: 3:3-3:19 remove any rows before the header
#grid(
  [a],
  grid.header([b])
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text)))))))
  (parbreak))

====================
typst/headers/grid-header-not-at-first-row-two-columns
====================

// Error: 4:3-4:19 header must start at the first row
// Hint: 4:3-4:19 remove any rows before the header
#grid(
  columns: 2,
  [a],
  grid.header([b])
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text)))))))
  (parbreak))

====================
typst/headers/grow-header-multiple
====================

// Error: 3:3-3:19 cannot have more than one header
#grid(
  grid.header([a]),
  grid.header([b]),
  [a],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/headers/table-header-in-grid
====================

// Error: 2:3-2:20 cannot use `table.header` as a grid header
// Hint: 2:3-2:20 use `grid.header` instead
#grid(
  table.header([a]),
  [a],
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/headers/grid-header-in-table
====================

// Error: 2:3-2:19 cannot use `grid.header` as a table header
// Hint: 2:3-2:19 use `table.header` instead
#table(
  grid.header([a]),
  [a],
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (content
          (text)))))
  (parbreak))

====================
typst/headers/grid-header-in-grid-header
====================

// Error: 14-28 cannot place a grid header within another header or footer
#grid.header(grid.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/table-header-in-grid-header
====================

// Error: 14-29 cannot place a table header within another header or footer
#grid.header(table.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/grid-header-in-table-header
====================

// Error: 15-29 cannot place a grid header within another header or footer
#table.header(grid.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/table-header-in-table-header
====================

// Error: 15-30 cannot place a table header within another header or footer
#table.header(table.header[a])


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (call
          (field
            (ident)
            (ident))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/grid-header-block-with-fixed-height
====================

#set page(height: 15em)
#table(
  rows: (auto, 2.5em, auto),
  table.header(
    [*Hello*],
    [*World*]
  ),
  block(width: 2em, height: 20em, fill: red)
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/headers/grid-header-and-rowspan-non-contiguous-1
====================

// Rowspan sizing algorithm doesn't do the best job at non-contiguous content
// ATM.
#set page(height: 15em)

#table(
  rows: (auto, 2.5em, 2em, auto, 5em),
  table.header(
    [*Hello*],
    [*World*]
  ),
  table.cell(rowspan: 3, lines(15))
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)
            (number
              (unit))))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number))))))))
  (parbreak))

====================
typst/headers/grid-header-and-rowspan-non-contiguous-2
====================

// Rowspan sizing algorithm doesn't do the best job at non-contiguous content
// ATM.
#set page(height: 15em)

#table(
  rows: (auto, 2.5em, 2em, auto, 5em),
  gutter: 3pt,
  table.header(
    [*Hello*],
    [*World*]
  ),
  table.cell(rowspan: 3, lines(15))
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number))))))))
  (parbreak))

====================
typst/headers/grid-header-and-rowspan-non-contiguous-3
====================

// This should look right
#set page(height: 15em)

#table(
  rows: (auto, 2.5em, 2em, auto),
  gutter: 3pt,
  table.header(
    [*Hello*],
    [*World*]
  ),
  table.cell(rowspan: 3, lines(15))
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (number
              (unit))
            (auto)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number))))))))
  (parbreak))

====================
typst/headers/grid-header-lack-of-space
====================

// Test lack of space for header + text.
#set page(height: 8em)

#table(
  rows: (auto, 2.5em, auto, auto, 10em),
  gutter: 3pt,
  table.header(
    [*Hello*],
    [*World*]
  ),
  table.cell(rowspan: 3, lorem(80))
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (auto)
            (auto)
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number))))))))
  (parbreak))

====================
typst/headers/grid-header-orphan-prevention
====================

// Orphan header prevention test
#set page(height: 12em)
#v(8em)
#grid(
  columns: 3,
  grid.header(
    [*Mui*], [*A*], grid.cell(rowspan: 2, fill: orange)[*B*],
    [*Header*], [*Header* #v(0.1em)]
  ),
  ..([Test], [Test], [Test]) * 20
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (strong
                (text)))
            (content
              (strong
                (text)))
            (call
              (call
                (field
                  (ident)
                  (ident))
                (group
                  (tagged
                    (ident)
                    (number))
                  (tagged
                    (ident)
                    (ident))))
              (content
                (strong
                  (text))))
            (content
              (strong
                (text)))
            (content
              (strong
                (text))
              (code
                (call
                  (ident)
                  (group
                    (number
                      (unit))))))))
        (elude
          (mul
            (group
              (content
                (text))
              (content
                (text))
              (content
                (text)))
            (number))))))
  (parbreak))

====================
typst/headers/grid-header-empty
====================

// Empty header should just be a repeated blank row
#set page(height: 12em)
#table(
  columns: 4,
  align: center + horizon,
  table.header(),
  ..range(0, 4).map(i => ([John \##i], table.cell(stroke: green)[123], table.cell(stroke: blue)[456], [789])).flatten()
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (add
            (ident)
            (ident)))
        (call
          (field
            (ident)
            (ident))
          (group))
        (elude
          (call
            (field
              (call
                (field
                  (call
                    (ident)
                    (group
                      (number)
                      (number)))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (group
                      (content
                        (text
                          (escape))
                        (code
                          (ident)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (call
                        (call
                          (field
                            (ident)
                            (ident))
                          (group
                            (tagged
                              (ident)
                              (ident))))
                        (content
                          (text)))
                      (content
                        (text))))))
              (ident))
            (group))))))
  (parbreak))

====================
typst/headers/grid-header-containing-rowspan
====================

// When a header has a rowspan with an empty row, it should be displayed
// properly
#set page(height: 10em)

#let count = counter("g")
#table(
  rows: (auto, 2em, auto, auto),
  table.header(
    [eeec],
    table.cell(rowspan: 2, count.step() + context count.display()),
  ),
  [d],
  block(width: 5em, fill: yellow, lorem(15)),
  [d]
)
#context count.display()


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))
            (auto)
            (auto)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (add
                  (call
                    (field
                      (ident)
                      (ident))
                    (group))
                  (context
                    (call
                      (field
                        (ident)
                        (ident))
                      (group))))))))
        (content
          (text))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))
            (call
              (ident)
              (group
                (number)))))
        (content
          (text)))))
  (code
    (context
      (call
        (field
          (ident)
          (ident))
        (group))))
  (parbreak))

====================
typst/headers/grid-header-expand
====================

// Ensure header expands to fit cell placed in it after its declaration
#set page(height: 10em)
#table(
  columns: 2,
  table.header(
    [a], [b],
    [c],
  ),
  table.cell(x: 1, y: 1, rowspan: 2, lorem(80))
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (content
              (text))
            (content
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (call
              (ident)
              (group
                (number))))))))
  (parbreak))

====================
typst/headers/grid-nested-with-headers
====================

// Nested table with header should repeat both headers
#set page(height: 10em)
#table(
  table.header(
    [a]
  ),
  table(
    table.header(
      [b]
    ),
    [a\ b\ c\ d]
  )
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))))
        (call
          (ident)
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (content
                  (text))))
            (content
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)
              (linebreak)
              (text)))))))
  (parbreak))

====================
typst/headers/grid-nested-headers
====================

#set page(height: 12em)
#table(
  table.header(
    table(
      table.header(
        [b]
      ),
      [c],
      [d]
    )
  ),
  [a\ b]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (ident)
              (group
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (content
                      (text))))
                (content
                  (text))
                (content
                  (text))))))
        (content
          (text)
          (linebreak)
          (text)))))
  (parbreak))

====================
typst/headers/grid-header-stroke-edge-cases
====================

// Test header stroke priority edge case (last header row removed)
#set page(height: 8em)
#table(
  columns: 2,
  stroke: black,
  gutter: (auto, 3pt),
  table.header(
    [c], [d],
  ),
  ..(table.cell(stroke: aqua)[d],) * 8,
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (group
            (auto)
            (number
              (unit))))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (content
              (text))))
        (elude
          (mul
            (group
              (call
                (call
                  (field
                    (ident)
                    (ident))
                  (group
                    (tagged
                      (ident)
                      (ident))))
                (content
                  (text))))
            (number))))))
  (parbreak))

====================
typst/headers/grid-header-hline-bottom
====================

// Yellow line should be kept here
#set text(6pt)
#table(
  column-gutter: 3pt,
  inset: 1pt,
  table.header(
    [a],
    table.hline(stroke: yellow),
  ),
  table.cell(rowspan: 2)[b]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/grid-header-hline-bottom-manually
====================

// Red line should be kept here
#set page(height: 6em)
#set text(6pt)
#table(
  column-gutter: 3pt,
  inset: 1pt,
  table.header(
    table.hline(stroke: red, position: bottom),
    [a],
  ),
  [a],
  table.cell(stroke: aqua)[b]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (ident))))
            (content
              (text))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/headers/grid-header-rowspan-base
====================

#set page(height: 7em)
#set text(6pt)
#let full-block = block(width: 2em, height: 100%, fill: red)
#table(
  columns: 3,
  inset: 1.5pt,
  table.header(
    [a], full-block, table.cell(rowspan: 2, full-block),
    [b]
  )
)
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (content
              (text))
            (ident)
            (call
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (number))
                (ident)))
            (content
              (text))))))))

====================
typst/stroke/grid-stroke-tiling
====================

#let double-line = tiling(size: (1.5pt, 1.5pt), {
  place(line(stroke: .6pt, start: (0%, 50%), end: (100%, 50%)))
})

#table(
  stroke: (_, y) => if y != 1 { (bottom: black) },
  columns: 3,
  table.cell(colspan: 3, align: center)[*Epic Table*],
  align(center)[*Name*], align(center)[*Age*], align(center)[*Data*],
  table.hline(stroke: (paint: double-line, thickness: 2pt)),
  [John], [30], [None],
  [Martha], [20], [A],
  [Joseph], [35], [D]
)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (number
                (unit))
              (number
                (unit))))
          (block
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit)))))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (cmp
                (ident)
                (number))
              (block
                (group
                  (tagged
                    (ident)
                    (ident)))))))
        (tagged
          (ident)
          (number))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (ident))))
          (content
            (strong
              (text))))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (strong
              (text))))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (strong
              (text))))
        (call
          (call
            (ident)
            (group
              (ident)))
          (content
            (strong
              (text))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-folding
====================

// Test folding
#set grid(stroke: red)
#set grid(stroke: 5pt)

#grid(
  inset: 10pt,
  columns: 2,
  stroke: stroke(dash: "loosely-dotted"),
  grid.vline(start: 2, end: 3, stroke: (paint: green, dash: none)),
  [a], [b],
  grid.hline(end: 1, stroke: blue),
  [c], [d],
  [e], grid.cell(stroke: aqua)[f]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (call
            (ident)
            (group
              (tagged
                (ident)
                (string)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (none))))))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text))))))
  (parbreak))

====================
typst/stroke/grid-stroke-set-on-cell-and-line
====================

// Test set rules on cells and folding
#set table.cell(stroke: 4pt)
#set table.cell(stroke: blue)
#set table.hline(stroke: red)
#set table.hline(stroke: 0.75pt)
#set table.vline(stroke: 0.75pt)
#set table.vline(stroke: aqua)

#table(
  columns: 3,
  gutter: 3pt,
  inset: 5pt,
  [a], [b], table.vline(position: end), [c],
  [d], [e], [f],
  table.hline(position: bottom),
  [g], [h], [i],
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-field-in-show
====================

// Test stroke field on cell show rules
#set grid.cell(stroke: (x: 4pt))
#set grid.cell(stroke: (x: blue))
#show grid.cell: it => {
  test(it.stroke, (left: stroke(paint: blue, thickness: 4pt, dash: "loosely-dotted"), right: blue + 4pt, top: stroke(thickness: 1pt), bottom: none))
  it
}
#grid(
  stroke: (left: (dash: "loosely-dotted")),
  inset: 5pt,
  grid.hline(stroke: red),
  grid.cell(stroke: (top: 1pt))[a], grid.vline(stroke: yellow),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (ident))))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block
          (call
            (ident)
            (group
              (field
                (ident)
                (ident))
              (group
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (ident))
                      (tagged
                        (ident)
                        (number
                          (unit)))
                      (tagged
                        (ident)
                        (string)))))
                (tagged
                  (ident)
                  (add
                    (ident)
                    (number
                      (unit))))
                (tagged
                  (ident)
                  (call
                    (ident)
                    (group
                      (tagged
                        (ident)
                        (number
                          (unit))))))
                (tagged
                  (ident)
                  (none)))))
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (tagged
              (ident)
              (group
                (tagged
                  (ident)
                  (string))))))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-complex
====================

#table(
  columns: 3,
  [a], table.cell(colspan: 2)[b c],
  table.cell(stroke: blue)[d], [e], [f],
  [g], [h], table.cell(stroke: (left: yellow, top: green, right: aqua, bottom: red))[i],
  [j], [k], [l],
  table.cell(stroke: 3pt)[m], [n], table.cell(stroke: (dash: "loosely-dotted"))[o],
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))
                  (tagged
                    (ident)
                    (ident))))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text)))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (string))))))
          (content
            (text))))))
  (parbreak))

====================
typst/stroke/grid-stroke-array
====================

// Test per-column stroke array
#let t = table(
  columns: 3,
  stroke: (red, blue, green),
  [a], [b], [c],
  [d], [e], [f],
  [h], [i], [j],
)
#t
#set text(dir: rtl)
#t


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (group
              (ident)
              (ident)
              (ident)))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))
          (content
            (text))))))
  (code
    (ident))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))))
  (code
    (ident))
  (parbreak))

====================
typst/stroke/grid-stroke-func
====================

#grid(
  columns: 3,
  inset: 3pt,
  stroke: (x, _) => (right: (5pt, (dash: "dotted")).at(calc.rem(x, 2)), bottom: (dash: "densely-dotted")),
  grid.vline(x: 0, stroke: red),
  grid.vline(x: 1, stroke: red),
  grid.vline(x: 2, stroke: red),
  grid.vline(x: 3, stroke: red),
  grid.hline(y: 0, end: 1, stroke: blue),
  grid.hline(y: 1, end: 1, stroke: blue),
  grid.cell[a],
  [b], [c]
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (call
                  (field
                    (group
                      (number
                        (unit))
                      (group
                        (tagged
                          (ident)
                          (string))))
                    (ident))
                  (group
                    (call
                      (field
                        (ident)
                        (ident))
                      (group
                        (ident)
                        (number))))))
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (string)))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (content
            (text)))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-manually-positioned-lines
====================

#set page(height: 5em)
#table(
  columns: 3,
  inset: 3pt,
  table.hline(y: 0, end: none, stroke: 3pt + blue),
  table.vline(x: 0, end: none, stroke: 3pt + green),
  table.hline(y: 5, end: none, stroke: 3pt + red),
  table.vline(x: 3, end: none, stroke: 3pt + yellow),
  [a], [b], [c],
  [a], [b], [c],
  [a], [b], [c],
  [a], [b], [c],
  [a], [b], [c],
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (none))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (none))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (none))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (none))
            (tagged
              (ident)
              (add
                (number
                  (unit))
                (ident)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-automatically-positioned-lines
====================

// Automatically positioned lines
// Plus stroke thickness ordering
#table(
  columns: 3,
  table.hline(stroke: red + 5pt),
  table.vline(stroke: blue + 5pt),
  table.vline(stroke: 2pt),
  [a],
  table.vline(x: 1, stroke: aqua + 5pt),
  [b],
  table.vline(stroke: aqua + 5pt),
  [c],
  table.vline(stroke: yellow + 5.2pt),
  table.hline(stroke: green + 5pt),
  [a], [b], [c],
  [a], table.hline(stroke: green + 2pt), table.vline(stroke: 2pt), [b], [c],
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-priority-line
====================

// Line specification order priority
// The last line should be blue, not red.
// The middle aqua line should be gone due to the 'none' override.
#grid(
  columns: 2,
  inset: 2pt,
  grid.hline(y: 2, stroke: red + 5pt),
  grid.vline(),
  [a], [b],
  grid.hline(stroke: red),
  grid.hline(stroke: none),
  [c], grid.cell(stroke: (top: aqua))[d],
  grid.hline(stroke: blue),
)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (add
                (ident)
                (number
                  (unit))))))
        (call
          (field
            (ident)
            (ident))
          (group))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (none))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (group
                  (tagged
                    (ident)
                    (ident))))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-position-bottom-gutter
====================

// Position: bottom and position: end with gutter should have a visible effect
// of moving the lines after the next track.
#table(
  columns: 3,
  gutter: 3pt,
  stroke: blue,
  table.hline(end: 2, stroke: red),
  table.hline(end: 2, stroke: aqua, position: bottom),
  table.vline(end: 2, stroke: green), [a], table.vline(end: 2, stroke: green), table.vline(end: 2, position: end, stroke: orange), [b], table.vline(end: 2, stroke: aqua, position: end), table.vline(end: 2, stroke: green), [c], table.vline(end: 2, stroke: green),
  [d], [e], [f],
  table.hline(end: 2, stroke: red),
  [g], [h], [ie],
  table.hline(end: 2, stroke: green),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-position-bottom
====================

// Using position: bottom and position: end without gutter should be the same
// as placing a line after the next track.
#table(
  columns: 3,
  stroke: blue,
  table.hline(end: 2, stroke: red),
  table.hline(end: 2, stroke: aqua, position: bottom),
  table.vline(end: 2, stroke: green), [a], table.vline(end: 2, stroke: green), [b], table.vline(end: 2, stroke: aqua, position: end), table.vline(end: 2, stroke: green), [c], table.vline(end: 2, stroke: green),
  table.hline(end: 2, stroke: 5pt),
  [d], [e], [f],
  table.hline(end: 2, stroke: red),
  [g], [h], [i],
  table.hline(end: 2, stroke: red),
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number
                (unit)))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-vline-position-left-and-right
====================

// Test left and right for grid vlines.
#grid(
  columns: 3,
  inset: 5pt,
  grid.vline(stroke: green, position: left), grid.vline(stroke: red, position: right), [a],
  grid.vline(stroke: 2pt, position: left), grid.vline(stroke: red, position: right), [b],
  grid.vline(stroke: 2pt, position: left), grid.vline(stroke: red, position: right), [c],
  grid.vline(stroke: 2pt, position: left)
)

#grid(
  columns: 3,
  inset: 5pt,
  gutter: 3pt,
  grid.vline(stroke: green, position: left), grid.vline(stroke: red, position: right), [a],
  grid.vline(stroke: blue, position: left), grid.vline(stroke: red, position: right), [b],
  grid.vline(stroke: blue, position: left), grid.vline(stroke: red, position: right), [c],
  grid.vline(stroke: 2pt, position: left)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/table-stroke-vline-position-left-and-right
====================

// Test left and right for table vlines.
#table(
  columns: 3,
  inset: 5pt,
  table.vline(stroke: green, position: left), table.vline(stroke: red, position: right), [a],
  table.vline(stroke: 2pt, position: left), table.vline(stroke: red, position: right), [b],
  table.vline(stroke: 2pt, position: left), table.vline(stroke: red, position: right), [c],
  table.vline(stroke: 2pt, position: left)
)

#table(
  columns: 3,
  inset: 5pt,
  gutter: 3pt,
  table.vline(stroke: green, position: left), table.vline(stroke: red, position: right), [a],
  table.vline(stroke: blue, position: left), table.vline(stroke: red, position: right), [b],
  table.vline(stroke: blue, position: left), table.vline(stroke: red, position: right), [c],
  table.vline(stroke: 2pt, position: left)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-priority-line-cell
====================

// Hlines and vlines should always appear on top of cell strokes.
#table(
  columns: 3,
  stroke: aqua,
  table.vline(stroke: red, position: end), [a], table.vline(stroke: red), [b], [c],
  table.cell(stroke: blue)[d], [e], [f],
  table.hline(stroke: red),
  [g], table.cell(stroke: blue)[h], [i],
)

#table(
  columns: 3,
  gutter: 3pt,
  stroke: aqua,
  table.vline(stroke: red, position: end), [a], table.vline(stroke: red), [b], [c],
  table.cell(stroke: blue)[d], [e], [f],
  table.hline(stroke: red),
  [g], table.cell(stroke: blue)[h], [i],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-priority-cell
====================

// Ensure cell stroke overrides always appear on top.
#table(
  columns: 2,
  stroke: black,
  table.cell(stroke: red)[a], [b],
  [c], [d],
)

#table(
  columns: 2,
  table.cell(stroke: red)[a], [b],
  [c], [d],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (ident))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-position-bad
====================

// Error: 7:3-7:32 cannot place horizontal line at the 'bottom' position of the bottom border (y = 2)
// Hint: 7:3-7:32 set the line's position to 'top' or place it at a smaller 'y' index
#table(
  columns: 2,
  [a], [b],
  [c], [d],
  table.hline(stroke: aqua),
  table.hline(position: top),
  table.hline(position: bottom)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-border-partial
====================

// Test partial border line overrides
#set page(width: auto, height: 7em, margin: (bottom: 1em))
#table(
  columns: 4,
  stroke: (x, y) => if y == 0 or y == 4 { orange } else { aqua },
  table.hline(stroke: blue, start: 1, end: 2), table.cell(stroke: red, v(3em)), table.cell(stroke: blue)[b], table.cell(stroke: green)[c], [M],
  [a], [b], [c], [M],
  [d], [e], [f], [M],
  [g], [h], [i], [M],
  table.cell(stroke: red)[a], table.cell(stroke: blue)[b], table.cell(stroke: green)[c], [M],
  table.hline(stroke: blue, start: 1, end: 2),
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (lambda
            (group
              (ident)
              (ident))
            (branch
              (or
                (cmp
                  (ident)
                  (number))
                (cmp
                  (ident)
                  (number)))
              (block
                (ident))
              (block
                (ident)))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (call
              (ident)
              (group
                (number
                  (unit))))))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (ident))))
          (content
            (text)))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-vline-colspan
====================

// - Vline should be placed after the colspan.
// - Hline should be placed under the full-width rowspan.
#table(
  columns: 3,
  rows: 1.25em,
  inset: 1pt,
  stroke: none,
  table.cell(colspan: 2)[a], table.vline(stroke: red), table.hline(stroke: blue), [b],
  [c], [d], [e],
  table.cell(colspan: 3, rowspan: 2)[a], table.vline(stroke: blue), table.hline(stroke: red)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (none))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-rowspan
====================

// Red line should be above [c] (hline skips the shortest rowspan).
#set text(6pt)
#table(
  rows: 1em,
  columns: 2,
  inset: 1.5pt,
  table.cell(rowspan: 3)[a], table.cell(rowspan: 2)[b],
  table.hline(stroke: red),
  [c]
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (call
            (field
              (ident)
              (ident))
            (group
              (tagged
                (ident)
                (number))))
          (content
            (text)))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-position-bottom-out-of-bounds
====================

// Error: 8:3-8:32 cannot place horizontal line at the 'bottom' position of the bottom border (y = 2)
// Hint: 8:3-8:32 set the line's position to 'top' or place it at a smaller 'y' index
#table(
  columns: 2,
  gutter: 3pt,
  [a], [b],
  [c], [d], table.vline(stroke: red),
  table.hline(stroke: aqua),
  table.hline(position: top),
  table.hline(position: bottom)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-vline-position-bottom-out-of-bounds
====================

// Error: 6:3-6:28 cannot place vertical line at the 'end' position of the end border (x = 2)
// Hint: 6:3-6:28 set the line's position to 'start' or place it at a smaller 'x' index
#grid(
  columns: 2,
  [a], [b],
  grid.vline(stroke: aqua),
  grid.vline(position: start),
  grid.vline(position: end)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-vline-position-bottom-out-of-bounds-gutter
====================

// Error: 7:3-7:28 cannot place vertical line at the 'end' position of the end border (x = 2)
// Hint: 7:3-7:28 set the line's position to 'start' or place it at a smaller 'x' index
#grid(
  columns: 2,
  gutter: 3pt,
  [a], [b],
  grid.vline(stroke: aqua),
  grid.vline(position: start),
  grid.vline(position: end)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident))))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (ident)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-out-of-bounds
====================

// Error: 4:3-4:19 cannot place horizontal line at invalid row 3
#grid(
  [a],
  [b],
  grid.hline(y: 3)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-hline-out-of-bounds-gutter
====================

// Error: 5:3-5:19 cannot place horizontal line at invalid row 3
#grid(
  gutter: 3pt,
  [a],
  [b],
  grid.hline(y: 3)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-vline-out-of-bounds
====================

// Error: 4:3-4:20 cannot place vertical line at invalid column 3
#table(
  columns: 2,
  [a], [b],
  table.vline(x: 3)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/stroke/grid-stroke-vline-out-of-bounds-gutter
====================

// Error: 5:3-5:20 cannot place vertical line at invalid column 3
#table(
  columns: 2,
  gutter: 3pt,
  [a], [b],
  table.vline(x: 3)
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text))
        (content
          (text))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number)))))))
  (parbreak))

====================
typst/stroke/table-hline-in-grid
====================

// Error: 7-20 cannot use `table.hline` as a grid line
// Hint: 7-20 use `grid.hline` instead
#grid(table.hline())


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/stroke/table-vline-in-grid
====================

// Error: 7-20 cannot use `table.vline` as a grid line
// Hint: 7-20 use `grid.vline` instead
#grid(table.vline())


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/stroke/grid-hline-in-table
====================

// Error: 8-20 cannot use `grid.hline` as a table line
// Hint: 8-20 use `table.hline` instead
#table(grid.hline())


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/stroke/grid-vline-in-table
====================

// Error: 8-20 cannot use `grid.vline` as a table line
// Hint: 8-20 use `table.vline` instead
#table(grid.vline())


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak))

====================
typst/stroke/grid-hline-end-before-start-1
====================

// Error: 3:3-3:31 line cannot end before it starts
#grid(
  columns: 3,
  grid.hline(start: 2, end: 1),
  [a], [b], [c],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-hline-end-before-start-2
====================

// Error: 3:3-3:32 line cannot end before it starts
#table(
  columns: 3,
  table.vline(start: 2, end: 1),
  [a], [b], [c],
  [d], [e], [f],
  [g], [h], [i],
)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (call
          (field
            (ident)
            (ident))
          (group
            (tagged
              (ident)
              (number))
            (tagged
              (ident)
              (number))))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text))
        (content
          (text)))))
  (parbreak))

====================
typst/stroke/grid-hline-position-horizon
====================

// Error: 24-31 expected `top` or `bottom`, found horizon
#table.hline(position: horizon)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/stroke/grid-vline-position-center
====================

// Error: 24-30 expected `start`, `left`, `right`, or `end`, found center
#table.vline(position: center)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/stroke/grid-hline-position-right
====================

// Error: 24-29 expected `top` or `bottom`, found right
#table.hline(position: right)


--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/stroke/grid-vline-position-top
====================

// Error: 24-27 expected `start`, `left`, `right`, or `end`, found top
#table.vline(position: top)
--------------------

(source_file
  (comment)
  (code
    (call
      (field
        (ident)
        (ident))
      (group
        (tagged
          (ident)
          (ident))))))

====================
typst/orphan/flow-heading-no-orphan
====================

#set page(height: 100pt)
#lines(4)

= Introduction
A


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (text)
      (parbreak))))

====================
typst/orphan/flow-par-no-orphan-and-widow-lines
====================

#set page(width: 60pt, height: 140pt)
#set text(weight: 700)

// Fits fully onto the first page.
#set text(blue)
#lines(8)

// The first line would fit, but is moved to the second page.
#lines(6, "1")

// The second-to-last line is moved to the third page so that the last is isn't
// as lonely.
#set text(maroon)
#lines(4)

#lines(4, "1")

// All three lines go to the next page.
#set text(olive)
#lines(3)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (comment)
  (code
    (call
      (ident)
      (group
        (number)
        (string))))
  (parbreak)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number)
        (string))))
  (parbreak)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/orphan/flow-widow-forced
====================

// Ensure that a widow is allowed when the three lines don't all fit.
#set page(height: 50pt)
#lines(3)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/orphan/issue-1445-widow-orphan-unnecessary-skip
====================

// Ensure that widow/orphan prevention doesn't unnecessarily move things
// to another page.
#set page(width: 16cm)
#block(height: 30pt, fill: aqua, columns(2, lorem(19)))
--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident))
        (call
          (ident)
          (group
            (number)
            (call
              (ident)
              (group
                (number)))))))))

====================
typst/footnote/footnote-basic
====================

#footnote[Hi]


--------------------

(source_file
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/footnote-space-collapsing
====================

// Test space collapsing before footnote.
A#footnote[A] \
A #footnote[A]


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/footnote-nested
====================

First \
Second #footnote[A, #footnote[B, #footnote[C]]]
Third #footnote[D, #footnote[E]] \
Fourth #footnote[F]


--------------------

(source_file
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (content
              (text)
              (code
                (call
                  (ident)
                  (content
                    (text))))))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (content
              (text)))))))
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/footnote-nested-break-across-pages
====================

#set page(height: 80pt)
A #footnote([I: ] + lines(6) + footnote[II])
B #footnote[III]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (ident)
      (group
        (add
          (add
            (content
              (text))
            (call
              (ident)
              (group
                (number))))
          (call
            (ident)
            (content
              (text)))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/footnote-entry
====================

// Test customization.
#show footnote: set text(red)
#show footnote.entry: set text(8pt, style: "italic")
#set footnote.entry(
  indent: 0pt,
  gap: 0.6em,
  clearance: 0.3em,
  separator: repeat[.],
)

Beautiful footnotes. #footnote[Wonderful, aren't they?]


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (ident))))))
  (code
    (show
      (field
        (ident)
        (ident))
      (set
        (call
          (ident)
          (group
            (number
              (unit))
            (tagged
              (ident)
              (string)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (call
              (ident)
              (content
                (text))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (quote)
        (text))))
  (parbreak))

====================
typst/footnote/footnote-break-across-pages
====================

#set page(height: 200pt)

#lines(2)
#footnote[ // 1
  I
  #footnote[II ...] // 2
]
#lines(6)
#footnote[III: #lines(8, "1")] // 3
#lines(6)
#footnote[IV: #lines(15, "1")] // 4
#lines(6)
#footnote[V] // 5


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (content
        (comment)
        (text)
        (code
          (call
            (ident)
            (content
              (text)
              (shorthand))))
        (comment))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (group
              (number)
              (string)))))))
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (group
              (number)
              (string)))))))
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (content
        (text))))
  (comment)
  (parbreak))

====================
typst/footnote/footnote-break-across-pages-block
====================

#set page(height: 100pt)
#block[
  #lines(3) #footnote(lines(6, "1"))
  #footnote[Y]
  #footnote[Z]
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (group
              (number))))
        (code
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (number)
                  (string))))))
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text)))))))
  (parbreak))

====================
typst/footnote/footnote-break-across-pages-float
====================

#set page(height: 180pt)

#lines(5)

#place(
  bottom,
  float: true,
  rect(height: 50pt, width: 100%, {
    footnote(lines(6, "1"))
    footnote(lines(2, "I"))
  })
)

#lines(5)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (block
              (call
                (ident)
                (group
                  (call
                    (ident)
                    (group
                      (number)
                      (string)))))
              (call
                (ident)
                (group
                  (call
                    (ident)
                    (group
                      (number)
                      (string)))))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/footnote/footnote-break-across-pages-nested
====================

#set page(height: 120pt)
#block[
  #lines(4)
  #footnote[
    #lines(6, "1")
    #footnote(lines(3, "I"))
  ]
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (group
              (number))))
        (code
          (call
            (ident)
            (content
              (code
                (call
                  (ident)
                  (group
                    (number)
                    (string))))
              (code
                (call
                  (ident)
                  (group
                    (call
                      (ident)
                      (group
                        (number)
                        (string))))))))))))
  (parbreak))

====================
typst/footnote/footnote-in-columns
====================

#set page(height: 120pt, columns: 2)

#place(
  top + center,
  float: true,
  scope: "parent",
  clearance: 12pt,
  strong[Title],
)

#lines(3)
#footnote(lines(4, "1"))

#lines(2)
#footnote(lines(2, "1"))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (string))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (string))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (string))))))
  (parbreak))

====================
typst/footnote/footnote-in-list
====================

#set page(height: 120pt)

- A #footnote[a]
- B #footnote[b]
- C #footnote[c]
- D #footnote[d]
- E #footnote[e]
- F #footnote[f]
- G #footnote[g]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (text)
    (code
      (call
        (ident)
        (content
          (text)))))
  (parbreak))

====================
typst/footnote/footnote-block-at-end
====================

#set page(height: 50pt)
A
#block(footnote[hello])


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/footnote/footnote-block-fr
====================

#set page(height: 110pt)
A
#block(width: 100%, height: 1fr, fill: aqua)[
  B #footnote[I] #footnote[II]
]
C


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (ident))))
      (content
        (text)
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text)))))))
  (text)
  (parbreak))

====================
typst/footnote/footnote-float-priority
====================

#set page(height: 100pt)

#lines(3)

#place(
  top,
  float: true,
  rect(height: 40pt)
)

#block[
  V
  #footnote[1]
  #footnote[2]
  #footnote[3]
  #footnote[4]
]

#lines(5)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (content
        (text)
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/footnote/footnote-in-caption
====================

// Test footnote in caption.
Read the docs #footnote[https://typst.app/docs]!
#figure(
  image("/assets/images/graph.png", width: 70%),
  caption: [
    A graph #footnote[A _graph_ is a structure with nodes and edges.]
  ]
)
More #footnote[just for ...] footnotes #footnote[... testing. :)]


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (url))))
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (string)
            (tagged
              (ident)
              (number
                (unit)))))
        (tagged
          (ident)
          (content
            (text)
            (code
              (call
                (ident)
                (content
                  (text)
                  (emph
                    (text))
                  (text)))))))))
  (text)
  (code
    (call
      (ident)
      (content
        (text)
        (shorthand))))
  (text)
  (code
    (call
      (ident)
      (content
        (shorthand)
        (text))))
  (parbreak))

====================
typst/footnote/footnote-in-place
====================

A
#place(top + right, footnote[A])
#figure(
  placement: bottom,
  caption: footnote[B],
  rect(),
)


--------------------

(source_file
  (text)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (call
            (ident)
            (content
              (text))))
        (call
          (ident)
          (group)))))
  (parbreak))

====================
typst/footnote/footnote-duplicate
====================

// Test duplicate footnotes.
#let lang = footnote[Languages.]
#let nums = footnote[Numbers.]

/ "Hello": A word #lang
/ "123": A number #nums

- "Hello" #lang
- "123" #nums

+ "Hello" #lang
+ "123" #nums

#table(
  columns: 2,
  [Hello], [A word #lang],
  [123], [A number #nums],
)


--------------------

(source_file
  (comment)
  (code
    (let
      (ident)
      (call
        (ident)
        (content
          (text)))))
  (code
    (let
      (ident)
      (call
        (ident)
        (content
          (text)))))
  (parbreak)
  (term
    (quote)
    (text)
    (quote)
    (text)
    (code
      (ident)))
  (term
    (quote)
    (text)
    (quote)
    (text)
    (code
      (ident)))
  (parbreak)
  (item
    (quote)
    (text)
    (quote)
    (code
      (ident)))
  (item
    (quote)
    (text)
    (quote)
    (code
      (ident)))
  (parbreak)
  (item
    (quote)
    (text)
    (quote)
    (code
      (ident)))
  (item
    (quote)
    (text)
    (quote)
    (code
      (ident)))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number))
        (content
          (text))
        (content
          (text)
          (code
            (ident)))
        (content
          (text))
        (content
          (text)
          (code
            (ident))))))
  (parbreak))

====================
typst/footnote/footnote-invariant
====================

// Ensure that a footnote and the first line of its entry
// always end up on the same page.
#set page(height: 120pt)

#lines(5)

A #footnote(lines(6, "1"))


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number)
            (string))))))
  (parbreak))

====================
typst/footnote/footnote-ref
====================

// Test references to footnotes.
A footnote #footnote[Hi]<fn> \
A reference to it @fn


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (linebreak)
  (text)
  (ref)
  (parbreak))

====================
typst/footnote/footnote-self-ref
====================

// Error: 2-16 footnote cannot reference itself
#footnote(<fn>) <fn>


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (label))))
  (label)
  (parbreak))

====================
typst/footnote/footnote-ref-multiple
====================

// Multiple footnotes are refs
First #footnote[A]<fn1> \
Second #footnote[B]<fn2> \
First ref @fn1 \
Third #footnote[C] \
Fourth #footnote[D]<fn4> \
Fourth ref @fn4 \
Second ref @fn2 \
Second ref again @fn2


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (linebreak)
  (text)
  (ref)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (linebreak)
  (text)
  (ref)
  (linebreak)
  (text)
  (ref)
  (linebreak)
  (text)
  (ref)
  (parbreak))

====================
typst/footnote/footnote-ref-forward
====================

// Forward reference
Usage @fn \
Definition #footnote[Hi]<fn>


--------------------

(source_file
  (comment)
  (text)
  (ref)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (parbreak))

====================
typst/footnote/footnote-ref-in-footnote
====================

// Footnote ref in footnote
#footnote[Reference to next @fn]
#footnote[Reference to myself @fn]<fn>
#footnote[Reference to previous @fn]


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content
        (text)
        (ref))))
  (code
    (call
      (ident)
      (content
        (text)
        (ref))))
  (label)
  (code
    (call
      (ident)
      (content
        (text)
        (ref))))
  (parbreak))

====================
typst/footnote/footnote-styling
====================

// Styling
#show footnote: text.with(fill: red)
Real #footnote[...]<fn> \
Ref @fn


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (ident))))))
  (text)
  (code
    (call
      (ident)
      (content
        (shorthand))))
  (label)
  (linebreak)
  (text)
  (ref)
  (parbreak))

====================
typst/footnote/footnote-ref-call
====================

// Footnote call with label
#footnote(<fn>)
#footnote[Hi]<fn>
#ref(<fn>)
#footnote(<fn>)


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (group
        (label))))
  (code
    (call
      (ident)
      (content
        (text))))
  (label)
  (code
    (call
      (ident)
      (group
        (label))))
  (code
    (call
      (ident)
      (group
        (label))))
  (parbreak))

====================
typst/footnote/footnote-in-table
====================

// Test footnotes in tables. When the table spans multiple pages, the footnotes
// will all be after the table, but it shouldn't create any empty pages.
#set page(height: 100pt)

= Tables
#table(
  columns: 2,
  [Hello footnote #footnote[This is a footnote.]],
  [This is more text],
  [This cell
   #footnote[This footnote is not on the same page]
   breaks over multiple pages.],
  image("/assets/images/tiger.jpg"),
)

#table(
  columns: 3,
  ..range(1, 10)
    .map(numbering.with("a"))
    .map(v => upper(v) + footnote(v))
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (content
              (text)
              (code
                (call
                  (ident)
                  (content
                    (text)))))
            (content
              (text))
            (content
              (text)
              (code
                (call
                  (ident)
                  (content
                    (text))))
              (text))
            (call
              (ident)
              (group
                (string))))))
      (parbreak)
      (code
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number))
            (elude
              (call
                (field
                  (call
                    (field
                      (call
                        (ident)
                        (group
                          (number)
                          (number)))
                      (ident))
                    (group
                      (call
                        (field
                          (ident)
                          (ident))
                        (group
                          (string)))))
                  (ident))
                (group
                  (lambda
                    (ident)
                    (add
                      (call
                        (ident)
                        (group
                          (ident)))
                      (call
                        (ident)
                        (group
                          (ident)))))))))))
      (parbreak))))

====================
typst/footnote/footnote-multiple-in-one-line
====================

#set page(height: 100pt)
#v(50pt)
A #footnote[a]
B #footnote[b]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (text)
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/issue-1433-footnote-in-list
====================

// Test that footnotes in lists do not produce extraneous page breaks. The list
// layout itself does not currently react to the footnotes layout, weakening the
// "footnote and its entry are on the same page" invariant somewhat, but at
// least there shouldn't be extra page breaks.
#set page(height: 100pt)
#block(height: 50pt, width: 100%, fill: aqua)

- #footnote[1]
- #footnote[2]


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (parbreak)
  (item
    (code
      (call
        (ident)
        (content
          (text)))))
  (item
    (code
      (call
        (ident)
        (content
          (text)))))
  (parbreak))

====================
typst/footnote/issue-footnotes-skip-first-page
====================

// In this issue, we would get an empty page at the beginning because footnote
// layout didn't properly check for in_last.
#set page(height: 50pt)
#footnote[A]
#footnote[B]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (content
        (text))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/issue-4454-footnote-ref-numbering
====================

// Test that footnote references are numbered correctly.
A #footnote(numbering: "*")[B]<fn>, C @fn, D @fn, E @fn.


--------------------

(source_file
  (comment)
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (string))))
      (content
        (text))))
  (label)
  (text)
  (ref)
  (text)
  (ref)
  (text)
  (ref)
  (text)
  (parbreak))

====================
typst/footnote/issue-5354-footnote-empty-frame-infinite-loop
====================

// Test whether an empty footnote would cause infinite loop
#show footnote.entry: it => {}
#lorem(3) #footnote[A footnote]


--------------------

(source_file
  (comment)
  (code
    (show
      (field
        (ident)
        (ident))
      (lambda
        (ident)
        (block))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak))

====================
typst/footnote/issue-5256-multiple-footnotes-in-footnote
====================

// Test whether all footnotes inside another footnote are listed.
#footnote[#footnote[A]#footnote[B]#footnote[C]]


--------------------

(source_file
  (comment)
  (code
    (call
      (ident)
      (content
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text))))
        (code
          (call
            (ident)
            (content
              (text)))))))
  (parbreak))

====================
typst/footnote/issue-5435-footnote-migration-in-floats
====================

// Test that a footnote should not prompt migration when in a float that was
// queued to the next page (due to the float being too large), even if the
// footnote does not fit, breaking the footnote invariant.
#set page(height: 50pt)

#place(
  top,
  float: true,
  {
    v(100pt)
    footnote[a]
  }
)
#place(
  top,
  float: true,
  footnote[b]
)


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (bool))
        (block
          (call
            (ident)
            (group
              (number
                (unit))))
          (call
            (ident)
            (content
              (text)))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/footnote/issue-5496-footnote-never-fits
====================

// Test whether a footnote which is always too large would cause an infinite
// loop.
#set page(width: 20pt, height: 20pt)
#set footnote.entry(indent: 0pt)

#footnote(text(size: 15pt)[a] * 100)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text)))
          (number)))))
  (parbreak))

====================
typst/footnote/issue-5496-footnote-in-float-never-fits
====================

// Test whether an overlarge footnote in a float also does not cause an
// infinite loop.
#set page(width: 20pt, height: 20pt)

#place(
  top,
  float: true,
  footnote(text(size: 15pt)[a] * 100)
)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (mul
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text)))
              (number)))))))
  (parbreak))

====================
typst/footnote/issue-5496-footnote-never-fits-multiple
====================

// Test whether multiple overlarge footnotes are properly split up across
// pages.
#set page(width: 20pt, height: 20pt)
#set footnote.entry(indent: 0pt)

A

#footnote(text(size: 15pt)[a] * 100)
#footnote(text(size: 15pt)[b] * 100)
#footnote[Fit]

B

C


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text)))
          (number)))))
  (code
    (call
      (ident)
      (group
        (mul
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text)))
          (number)))))
  (code
    (call
      (ident)
      (content
        (text))))
  (parbreak)
  (text)
  (parbreak)
  (text)
  (parbreak))

====================
typst/footnote/issue-5496-footnote-separator-never-fits
====================

// Test whether an overlarge footnote separator does not cause an infinite
// loop and compiles.
#set page(height: 2em)
#set footnote.entry(separator: v(5em))

#footnote[]
--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (field
          (ident)
          (ident))
        (group
          (tagged
            (ident)
            (call
              (ident)
              (group
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (content))))

====================
typst/place/place-basic
====================

#set page("a8")
#place(bottom + center)[E]

= A
#place(right, rect(width: 1.8cm))
#lines(5)

#stack(
  rect(fill: eastern, height: 10pt, width: 100%),
  place(right, dy: 1.5pt)[ABC],
  rect(fill: conifer, height: 10pt, width: 80%),
  rect(fill: forest, height: 10pt, width: 100%),
  10pt,
  block[
    #place(center, dx: -7pt, dy: -5pt)[A]
    #place(center, dx: 7pt, dy: 5pt)[B]
    C #h(1fr) D
  ]
)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (string)))))
  (code
    (call
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit))))))))
      (code
        (call
          (ident)
          (group
            (number))))
      (parbreak)
      (code
        (call
          (ident)
          (group
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (call
              (call
                (ident)
                (group
                  (ident)
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (content
                (text)))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (number
              (unit))
            (call
              (ident)
              (content
                (code
                  (call
                    (call
                      (ident)
                      (group
                        (ident)
                        (tagged
                          (ident)
                          (sign
                            (number
                              (unit))))
                        (tagged
                          (ident)
                          (sign
                            (number
                              (unit))))))
                    (content
                      (text))))
                (code
                  (call
                    (call
                      (ident)
                      (group
                        (ident)
                        (tagged
                          (ident)
                          (number
                            (unit)))
                        (tagged
                          (ident)
                          (number
                            (unit)))))
                    (content
                      (text))))
                (text)
                (code
                  (call
                    (ident)
                    (group
                      (number
                        (unit)))))
                (text))))))
      (parbreak))))

====================
typst/place/place-block-spacing
====================

// Test how the placed element interacts with paragraph spacing around it.
#set page("a8", height: 60pt)

First

#place(bottom + right)[Placed]

Second


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (string)
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak)
  (text)
  (parbreak))

====================
typst/place/place-bottom-in-box
====================

#box(
  fill: aqua,
  width: 30pt,
  height: 30pt,
  place(bottom,
    place(line(start: (0pt, 0pt), end: (20pt, 0pt), stroke: red + 3pt))
  )
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (group
            (ident)
            (call
              (ident)
              (group
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (group
                        (number
                          (unit))
                        (number
                          (unit))))
                    (tagged
                      (ident)
                      (add
                        (ident)
                        (number
                          (unit)))))))))))))
  (parbreak))

====================
typst/place/place-horizon-in-boxes
====================

#box(
  fill: aqua,
  width: 30pt,
  height: 30pt,
  {
    box(fill: yellow, {
      [Hello]
      place(horizon, line(start: (0pt, 0pt), end: (20pt, 0pt), stroke: red + 2pt))
    })
    place(horizon, line(start: (0pt, 0pt), end: (20pt, 0pt), stroke: green + 3pt))
  }
)


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (block
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (block
                (content
                  (text))
                (call
                  (ident)
                  (group
                    (ident)
                    (call
                      (ident)
                      (group
                        (tagged
                          (ident)
                          (group
                            (number
                              (unit))
                            (number
                              (unit))))
                        (tagged
                          (ident)
                          (group
                            (number
                              (unit))
                            (number
                              (unit))))
                        (tagged
                          (ident)
                          (add
                            (ident)
                            (number
                              (unit)))))))))))
          (call
            (ident)
            (group
              (ident)
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit))))
                  (tagged
                    (ident)
                    (group
                      (number
                        (unit))
                      (number
                        (unit))))
                  (tagged
                    (ident)
                    (add
                      (ident)
                      (number
                        (unit))))))))))))
  (parbreak))

====================
typst/place/place-bottom-right-in-box
====================

#box(fill: aqua)[
  #place(bottom + right)[Hi]
  Hello World \
  How are \
  you?
]


--------------------

(source_file
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))))
            (content
              (text))))
        (text)
        (linebreak)
        (text)
        (linebreak)
        (text))))
  (parbreak))

====================
typst/place/place-top-left-in-box
====================

#box(fill: aqua)[
  #place(top + left, dx: 50%, dy: 50%)[Hi]
  #v(30pt)
  #line(length: 50pt)
]


--------------------

(source_file
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (call
              (ident)
              (group
                (add
                  (ident)
                  (ident))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text))))
        (code
          (call
            (ident)
            (group
              (number
                (unit)))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/place/place-float-flow-around
====================

#set page(height: 80pt)
#set place(float: true)
#place(bottom + center, rect(height: 20pt))
#lines(4)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/place/place-float-queued
====================

#set page(height: 180pt)
#set figure(placement: auto)

#figure(rect(height: 60pt), caption: [I])
#figure(rect(height: 40pt), caption: [II])
#figure(rect(), caption: [III])
A
#figure(rect(), caption: [IV])


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (tagged
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))))
        (tagged
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (content
            (text))))))
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/place/place-float-align-auto
====================

#set page(height: 140pt)
#set place(auto, float: true, clearance: 5pt)

#place(rect[A])
#place(rect[B])
1 \ 2
#place(rect[C])
#place(rect[D])


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (auto)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (text)
  (linebreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/place/place-float-delta
====================

#place(top + center, float: true, dx: 10pt, rect[I])
A
#place(bottom + center, float: true, dx: -10pt, rect[II])


--------------------

(source_file
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (ident)
          (content
            (text))))))
  (text)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (bool))
        (tagged
          (ident)
          (sign
            (number
              (unit))))
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/place/place-float-flow-size
====================

#set page(width: auto, height: auto)
#set place(float: true, clearance: 5pt)

#place(bottom, rect(width: 80pt, height: 10pt))
#place(top + center, rect(height: 20pt))
#align(center)[A]
#pagebreak()
#align(center)[B]
#place(bottom, scope: "parent", rect(height: 10pt))


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (code
    (call
      (ident)
      (group)))
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak))

====================
typst/place/place-float-flow-size-alone
====================

#set page(width: auto, height: auto)
#set place(float: true, clearance: 5pt)
#place(auto)[A]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (auto))
          (tagged
            (ident)
            (auto))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (auto)))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-float-fr
====================

#set page(height: 120pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#place(top + center, rect[I])
#place(bottom + center, scope: "parent", rect[II])

A
#v(1fr)
B
#colbreak()
C
#align(bottom)[D]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (text)
  (code
    (call
      (ident)
      (group)))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (ident)))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-float-rel-sizing
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#place(top + center, scope: "parent", rect[I])
#place(top + center, rect[II])

// This test result is not ideal: The first column takes 30% of the full page,
// while the second takes 30% of the remaining space since there is no concept
// of `full` for followup pages.
#set align(bottom)
#rect(width: 100%, height: 30%)
#rect(width: 100%, height: 30%)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (parbreak)
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/place/place-float-block-backlog
====================

#set page(height: 100pt)
#v(60pt)
#place(top, float: true, rect())
#list(.."ABCDEFGHIJ".clusters())


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group)))))
  (code
    (call
      (ident)
      (group
        (elude
          (call
            (field
              (string)
              (ident))
            (group))))))
  (parbreak))

====================
typst/place/place-float-clearance-empty
====================

// Check that we don't require space for clearance if there is no content.
#set page(height: 100pt)
#v(1fr)
#table(
  columns: (1fr, 1fr),
  lines(2),
  [],
  lines(8),
  place(auto, float: true, block(width: 100%, height: 100%, fill: aqua))
)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (group
            (number
              (unit))
            (number
              (unit))))
        (call
          (ident)
          (group
            (number)))
        (content)
        (call
          (ident)
          (group
            (number)))
        (call
          (ident)
          (group
            (auto)
            (tagged
              (ident)
              (bool))
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (number
                    (unit)))
                (tagged
                  (ident)
                  (ident)))))))))
  (parbreak))

====================
typst/place/place-float-column-align-auto
====================

#set page(height: 150pt, columns: 2)
#set place(auto, float: true, clearance: 10pt)
#set rect(width: 75%)

#place(rect[I])
#place(rect[II])
#place(rect[III])
#place(rect[IV])

#lines(6)

#place(rect[V])
#place(rect[VI])


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (auto)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/place/place-float-column-queued
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 75%)
#set text(costs: (widow: 0%, orphan: 0%))

#lines(3)

#place(top, rect[I])
#place(top, rect[II])
#place(bottom, rect[III])

#lines(3)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (ident)
          (content
            (text))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/place/place-float-twocolumn
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#place(top + center, scope: "parent", rect[I])
#place(top + center, rect[II])
#lines(4)
#place(top + center, rect[III])
#block(width: 100%, height: 70pt, fill: conifer)
#place(bottom + center, scope: "parent", rect[IV])
#place(bottom + center, rect[V])
#v(1pt, weak: true)
#block(width: 100%, height: 60pt, fill: aqua)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (parbreak))

====================
typst/place/place-float-twocolumn-queued
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, scope: "parent", clearance: 10pt)
#let t(align, fill) = place(top + align, rect(fill: fill, height: 25pt))

#t(left, aqua)
#t(center, forest)
#t(right, conifer)
#lines(7)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (string))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (ident))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (ident)
        (ident))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/place/place-float-twocolumn-align-auto
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#place(auto, scope: "parent", rect[I]) // Should end up `top`
#lines(4)
#place(auto, scope: "parent", rect[II])  // Should end up `bottom`
#lines(4)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (auto)
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (auto)
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (comment)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/place/place-float-twocolumn-fits
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#lines(6)
#place(auto, scope: "parent", rect[I])
#lines(12, "1")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (auto)
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (number)
        (string))))
  (parbreak))

====================
typst/place/place-float-twocolumn-fits-not
====================

#set page(height: 100pt, columns: 2)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#lines(10)
#place(auto, scope: "parent", rect[I])
#lines(10, "1")


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (auto)
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (number)
        (string))))
  (parbreak))

====================
typst/place/place-float-threecolumn
====================

#set page(height: 100pt, columns: 3)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

#place(bottom + center, scope: "parent", rect[I])
#lines(21)
#place(top + center, scope: "parent", rect[II])


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (parbreak))

====================
typst/place/place-float-threecolumn-block-backlog
====================

#set page(height: 100pt, columns: 3)
#set place(float: true, clearance: 10pt)
#set rect(width: 70%)

// The most important part of this test is that we get the backlog of the
// conifer (green) block right.
#place(top + center, scope: "parent", rect[I])
#block(fill: aqua, width: 100%, height: 70pt)
#block(fill: conifer, width: 100%, height: 160pt)
#place(bottom + center, scope: "parent", rect[II])
#place(top, rect(height: 40%)[III])
#block(fill: yellow, width: 100%, height: 60pt)


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (comment)
  (comment)
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (string))
        (call
          (ident)
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (call
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (content
            (text))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit))))))
  (parbreak))

====================
typst/place/place-float-counter
====================

#let c = counter("c")
#let cd = context c.display()

#set page(
  height: 100pt,
  margin: (y: 20pt),
  header: [H: #cd],
  footer: [F: #cd],
  columns: 2,
)

#let t(align, scope: "column", n) = place(
  align,
  float: true,
  scope: scope,
  clearance: 10pt,
  line(length: 100%) + c.update(n),
)

#t(bottom, 6)
#cd
#t(top, 3)
#colbreak()
#cd
#t(scope: "parent", bottom, 11)
#colbreak()
#cd
#t(top, 12)


--------------------

(source_file
  (code
    (let
      (ident)
      (call
        (ident)
        (group
          (string)))))
  (code
    (let
      (ident)
      (context
        (call
          (field
            (ident)
            (ident))
          (group)))))
  (parbreak)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))
          (tagged
            (ident)
            (content
              (text)
              (code
                (ident))))
          (tagged
            (ident)
            (content
              (text)
              (code
                (ident))))
          (tagged
            (ident)
            (number))))))
  (parbreak)
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (string))
          (ident)))
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (number
              (unit)))
          (add
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (call
              (field
                (ident)
                (ident))
              (group
                (ident))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (ident))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (string))
        (ident)
        (number))))
  (code
    (call
      (ident)
      (group)))
  (code
    (ident))
  (code
    (call
      (ident)
      (group
        (ident)
        (number))))
  (parbreak))

====================
typst/place/place-float-missing
====================

// Error: 2-20 automatic positioning is only available for floating placement
// Hint: 2-20 you can enable floating placement with `place(float: true, ..)`
#place(auto)[Hello]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (auto)))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-float-center-horizon
====================

// Error: 2-45 vertical floating placement must be `auto`, `top`, or `bottom`
#place(center + horizon, float: true)[Hello]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-float-horizon
====================

// Error: 2-36 vertical floating placement must be `auto`, `top`, or `bottom`
#place(horizon, float: true)[Hello]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-float-default
====================

// Error: 2-27 vertical floating placement must be `auto`, `top`, or `bottom`
#place(float: true)[Hello]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-float-right
====================

// Error: 2-34 vertical floating placement must be `auto`, `top`, or `bottom`
#place(right, float: true)[Hello]


--------------------

(source_file
  (comment)
  (code
    (call
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (bool))))
      (content
        (text))))
  (parbreak))

====================
typst/place/place-flush
====================

#set page(height: 120pt)
#let floater(align, height) = place(
  align,
  float: true,
  rect(width: 100%, height: height),
)

#floater(top, 30pt)
A

#floater(bottom, 50pt)
#place.flush()
B // Should be on the second page.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (ident)
          (tagged
            (ident)
            (bool))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (number
          (unit)))))
  (text)
  (parbreak)
  (code
    (call
      (ident)
      (group
        (ident)
        (number
          (unit)))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (text)
  (comment)
  (parbreak))

====================
typst/place/place-flush-figure
====================

#set page(height: 120pt)
#let floater(align, height, caption) = figure(
  placement: align,
  caption: caption,
  rect(width: 100%, height: height),
)

#floater(top, 30pt)[I]
A

#floater(bottom, 50pt)[II]
#place.flush()
B // Should be on the second page.


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (let
      (call
        (ident)
        (group
          (ident)
          (ident)
          (ident)))
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))
          (tagged
            (ident)
            (ident))
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (ident)
          (number
            (unit))))
      (content
        (text))))
  (text)
  (parbreak)
  (code
    (call
      (call
        (ident)
        (group
          (ident)
          (number
            (unit))))
      (content
        (text))))
  (code
    (call
      (field
        (ident)
        (ident))
      (group)))
  (text)
  (comment)
  (parbreak))

====================
typst/place/issue-place-base
====================

// Test that placement is relative to container and not itself.
#set page(height: 80pt, margin: 0pt)
#place(right, dx: -70%, dy: 20%, [First])
#place(left, dx: 20%, dy: 60%, [Second])
#place(center + horizon, dx: 25%, dy: 25%, [Third])


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (sign
            (number
              (unit))))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (ident)
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text)))))
  (code
    (call
      (ident)
      (group
        (add
          (ident)
          (ident))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (content
          (text)))))
  (parbreak))

====================
typst/place/issue-1368-place-pagebreak
====================

// Test placing on an already full page.
// It shouldn't result in a page break.
#set page(height: 40pt)
#block(height: 100%)
#place(bottom + right)[Hello world]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit))))))
  (code
    (call
      (call
        (ident)
        (group
          (add
            (ident)
            (ident))))
      (content
        (text))))
  (parbreak))

====================
typst/place/issue-2199-place-spacing-bottom
====================

// Test that placed elements don't add extra block spacing.
#show figure: set block(spacing: 4em)

Paragraph before float.
#figure(rect(), placement: bottom)
Paragraph after float.


--------------------

(source_file
  (comment)
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group))
        (tagged
          (ident)
          (ident)))))
  (text)
  (parbreak))

====================
typst/place/issue-2199-place-spacing-default
====================

#show place: set block(spacing: 4em)

Paragraph before place.
#place(rect())
Paragraph after place.


--------------------

(source_file
  (code
    (show
      (ident)
      (set
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group)))))
  (text)
  (parbreak))

====================
typst/place/issue-2595-float-overlap
====================

#set page(height: 80pt)

1
#place(auto, float: true, block(height: 100%, width: 100%, fill: aqua))
#place(auto, float: true, block(height: 100%, width: 100%, fill: red))
#lines(7)
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (text)
  (code
    (call
      (ident)
      (group
        (auto)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (code
    (call
      (ident)
      (group
        (auto)
        (tagged
          (ident)
          (bool))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (number
                (unit)))
            (tagged
              (ident)
              (ident)))))))
  (code
    (call
      (ident)
      (group
        (number)))))

====================
typst/flow/flow-fr
====================

#set page(height: 2cm)
#set text(white)
#rect(fill: forest)[
          #v(1fr)
  #h(1fr) Hi you!
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (ident)))))
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (ident))))
      (content
        (code
          (call
            (ident)
            (group
              (number
                (unit)))))
        (code
          (call
            (ident)
            (group
              (number
                (unit)))))
        (text))))
  (parbreak))

====================
typst/flow/issue-flow-overlarge-frames
====================

// In this bug, the first line of the second paragraph was on its page alone an
// the rest moved down. The reason was that the second block resulted in
// overlarge frames because the region wasn't finished properly.
#set page(height: 70pt)
#block(lines(3))
#block(lines(5))


--------------------

(source_file
  (comment)
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number))))))
  (parbreak))

====================
typst/flow/issue-flow-trailing-leading
====================

// In this bug, the first part of the paragraph moved down to the second page
// because trailing leading wasn't trimmed, resulting in an overlarge frame.
#set page(height: 60pt)
#v(19pt)
#block[
  But, soft! what light through yonder window breaks?
  It is the east, and Juliet is the sun.
]


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (ident)
      (content
        (text)
        (text))))
  (parbreak))

====================
typst/flow/issue-flow-weak-spacing
====================

// In this bug, there was a bit of space below the heading because weak spacing
// directly before a layout-induced column or page break wasn't trimmed.
#set page(height: 60pt)
#rect(inset: 0pt, columns(2)[
  Text
  #v(12pt)
  Hi
  #v(10pt, weak: true)
  At column break.
])


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (call
          (call
            (ident)
            (group
              (number)))
          (content
            (text)
            (code
              (call
                (ident)
                (group
                  (number
                    (unit)))))
            (text)
            (code
              (call
                (ident)
                (group
                  (number
                    (unit))
                  (tagged
                    (ident)
                    (bool)))))
            (text))))))
  (parbreak))

====================
typst/flow/issue-flow-frame-placement
====================

// In this bug, a frame intended for the second region ended up in the first.
#set page(height: 105pt)
#block(lorem(20))


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (call
          (ident)
          (group
            (number))))))
  (parbreak))

====================
typst/flow/issue-flow-layout-index-out-of-bounds
====================

// This bug caused an index-out-of-bounds panic when layouting paragraphs needed
// multiple reorderings.
#set page(height: 200pt)
#lines(10)

#figure(placement: auto, block(height: 100%))

#lines(3)

#lines(3)


--------------------

(source_file
  (comment)
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (auto))
        (call
          (ident)
          (group
            (tagged
              (ident)
              (number
                (unit))))))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak)
  (code
    (call
      (ident)
      (group
        (number))))
  (parbreak))

====================
typst/flow/issue-3641-float-loop
====================

// Flow layout should terminate!
#set page(height: 40pt)

= Heading
#lines(2)


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (parbreak)
  (section
    (heading
      (text))
    (content
      (code
        (call
          (ident)
          (group
            (number))))
      (parbreak))))

====================
typst/flow/issue-3355-metadata-weak-spacing
====================

#set page(height: 50pt)
#block(width: 100%, height: 30pt, fill: aqua)
#metadata(none)
#v(10pt, weak: true)
Hi


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (ident)
      (group
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (number
            (unit)))
        (tagged
          (ident)
          (ident)))))
  (code
    (call
      (ident)
      (group
        (none))))
  (code
    (call
      (ident)
      (group
        (number
          (unit))
        (tagged
          (ident)
          (bool)))))
  (text)
  (parbreak))

====================
typst/flow/issue-3866-block-migration
====================

#set page(height: 120pt)
#set text(costs: (widow: 0%, orphan: 0%))
#v(50pt)
#columns(2)[
  #lines(6)
  #block(rect(width: 80%, height: 80pt), breakable: false)
  #lines(6)
]


--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (code
    (call
      (ident)
      (group
        (number
          (unit)))))
  (code
    (call
      (call
        (ident)
        (group
          (number)))
      (content
        (code
          (call
            (ident)
            (group
              (number))))
        (code
          (call
            (ident)
            (group
              (call
                (ident)
                (group
                  (tagged
                    (ident)
                    (number
                      (unit)))
                  (tagged
                    (ident)
                    (number
                      (unit)))))
              (tagged
                (ident)
                (bool)))))
        (code
          (call
            (ident)
            (group
              (number)))))))
  (parbreak))

====================
typst/flow/issue-5024-spill-backlog
====================

#set page(columns: 2, height: 50pt)
#columns(2)[Hello]
--------------------

(source_file
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number))
          (tagged
            (ident)
            (number
              (unit)))))))
  (code
    (call
      (call
        (ident)
        (group
          (number)))
      (content
        (text)))))

====================
typst/invisibles/flow-first-region-no-item
====================

// No item in the first region.
#set page(height: 5cm, margin: 1cm)
No item in the first region.
#block(breakable: true, stroke: 1pt, inset: 0.5cm)[
  #rect(height: 2cm, fill: gray)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/invisibles/flow-first-region-counter-update
====================

// Counter update in the first region.
#set page(height: 5cm, margin: 1cm)
Counter update.
#block(breakable: true, stroke: 1pt, inset: 0.5cm)[
  #counter("dummy").step()
  #rect(height: 2cm, fill: gray)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (field
              (call
                (ident)
                (group
                  (string)))
              (ident))
            (group)))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/invisibles/flow-first-region-placed
====================

// Placed item in the first region.
#set page(height: 5cm, margin: 1cm)
Placed item in the first region.
#block(breakable: true, above: 1cm, stroke: 1pt, inset: 0.5cm)[
  #place(dx: -0.5cm, dy: -0.75cm, box(width: 200%)[OOF])
  #rect(height: 2cm, fill: gray)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text))))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/invisibles/flow-first-region-zero-sized-item
====================

// In-flow item with size zero in the first region.
#set page(height: 5cm, margin: 1cm)
In-flow, zero-sized item.
#block(breakable: true, stroke: 1pt, inset: 0.4cm)[
  #set block(spacing: 0pt)
  #line(length: 0pt)
  #rect(height: 2cm, fill: gray)
  #line(length: 100%)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (set
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit))))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident)))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))))))))
  (parbreak))

====================
typst/invisibles/flow-first-region-counter-update-and-placed
====================

// Counter update and placed item in the first region.
#set page(height: 5cm, margin: 1cm)
Counter update + place.
#block(breakable: true, above: 1cm, stroke: 1pt, inset: 0.5cm)[
  #counter("dummy").step()
  #place(dx: -0.5cm, dy: -0.75cm, box([OOF]))
  #rect(height: 2cm, fill: gray)
]


--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (field
              (call
                (ident)
                (group
                  (string)))
              (ident))
            (group)))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (call
                (ident)
                (group
                  (content
                    (text)))))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident))))))))
  (parbreak))

====================
typst/invisibles/flow-first-region-counter-update-placed-and-line
====================

// Mix-and-match all the previous ones.
#set page(height: 5cm, margin: 1cm)
Mix-and-match all the previous tests.
#block(breakable: true, above: 1cm, stroke: 1pt, inset: 0.5cm)[
  #counter("dummy").step()
  #place(dx: -0.5cm, dy: -0.75cm, box(width: 200%)[OOF])
  #line(length: 100%)
  #place(dy: 0.2em)[OOF]
  #rect(height: 2cm, fill: gray)
]
--------------------

(source_file
  (comment)
  (code
    (set
      (call
        (ident)
        (group
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))))
  (text)
  (code
    (call
      (call
        (ident)
        (group
          (tagged
            (ident)
            (bool))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))
          (tagged
            (ident)
            (number
              (unit)))))
      (content
        (code
          (call
            (field
              (call
                (ident)
                (group
                  (string)))
              (ident))
            (group)))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (tagged
                (ident)
                (sign
                  (number
                    (unit))))
              (call
                (call
                  (ident)
                  (group
                    (tagged
                      (ident)
                      (number
                        (unit)))))
                (content
                  (text))))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit))))))
        (code
          (call
            (call
              (ident)
              (group
                (tagged
                  (ident)
                  (number
                    (unit)))))
            (content
              (text))))
        (code
          (call
            (ident)
            (group
              (tagged
                (ident)
                (number
                  (unit)))
              (tagged
                (ident)
                (ident)))))))))
